Create your own Flow
































































































Jump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceCreate your own FlowSearchAllPagesStart typing to searchâ€¦IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskarâ€™s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered byÂ Create your own FlowYou can use Package Components to create Flows tailored to your Workflows and Setup. The following includes examples, Apex Actions, and Apex Classes that can be utilized to design these Flows.Some example Flows
These are a few example flows that you can refer to while creating your own custom flows.
Syncing Customers to Zenskar


Get records from the Account object.



Map account details to the ZenskarCustomer object.


ðŸ“˜Note: There are custom fields available in package, you show them on layout and use that in flows. Check Layout Section in Account Object in SF after package install

Add fields of Transformed Data to Zenskar Sync Customer Apex Action.



Update Zenskar Customer ID to Related Object so Updates can be synced.


Note: You can use provided custom field for storing Zenskar Customer ID
Syncing Contracts


Retrieve all Opportunity Line Items for the triggering Opportunity.



Get Related Account for Triggering Opportunity.



Loop over Opportunity Line Item and Get PriceBookEntry for each Opportunity Line Item. Add Pricebookentryâ€™s Link ID(Zenskar) to a Collection of String (ReferenceIDs List).



Convert the Salesforce Opportunity to a ZenskarContract object.



Add Zenskar Sync Contract Apex Action and Use Data from Transformer(Convert SF to Zenskar Contract).



Update the Opportunity with the ZenskarContractId.



Sync with Zenskar


Close the Opportunity as â€˜Wonâ€™ to automatically create and sync data to Zenskar.

For managing Pricebooks and Products, see Manage Price Books.
Package components
Apex Actions
These actions are provided in our Salesforce package to sync data from Salesforce to Zenskar.
Zenskar Customer sync
Creates or updates a customer on Zenskar. This action is required to create a contract.
Inputs
FieldDescriptionCustomerExternalIDID of the customer in your systemCustomerNameName of the customer (required)CustomerEmailEmail of the customerBillingAddressCustomer's billing addressShippingAddressCustomer's shipping addressCustomerPhoneNumberCustomer's phone numberIsAutoChargeEnabledEnable auto-charge on ZenskarIsCommunicationEnabledEnable communication on ZenskarTagsCustomer tagsZenskarCustomerIdExisting Zenskar Customer ID (for updates)
Output
FieldDescriptionZenskarCustomerIdID of the customer on Zenskar

Zenskar Contract Sync
Creates or updates a contract on Zenskar.
Inputs
FieldDescriptionContractNameContract name (required)CustomerIdCustomer ID (required)ContractIdCan be null for a new contractContractStartDateStart date (required)ContractEndDateCan be null for a perpetual contractTagsOptional Zenskar tagsRenewalPolicyDefaults to "Do not Renew"pricingListList of pricing IDsReferenceIdListAlternative to pricingListStatusDefaults to "Active"
Output
FieldDescriptionZenskarContractIdID of the contract on Zenskar

Zenskar Get Contract
Fetches a contract from Zenskar.
Input
FieldDescriptionContractIDValid Zenskar Contract ID
Output
FieldDescriptionZenskarContractZenskar contract object

Zenskar Get Customer
Fetches a customer from Zenskar.
Input
FieldDescriptionCustomerIDValid Zenskar Customer ID
Output
FieldDescriptionZenskarCustomerZenskar customer object

Zenskar Create Product
Creates or updates a product on Zenskar.
Inputs
FieldDescriptionZenskarProductIdProduct ID for updatesNameProduct nameSKUProduct SKUDescriptionProduct descriptionIsActiveSet product status to active
Output
FieldDescriptionZenskarProductIdID of the created/updated product

Zenskar Get Pricing
Fetches pricing from Zenskar.
Input
FieldDescriptionReferenceIDPricing reference IDPricingIdPricing IDProductIdProduct ID
Output
FieldDescriptionZenskarPricingZenskar pricing objectProductIDID of the associated productPricePrice amount for per-unit or flat fee pricing

Zenskar Create Pricing
Creates per-unit pricing on Zenskar.
Inputs
FieldDescriptionPricingObjectContains pricing detailsPerUnitPricingDetailsContains per-unit amount detailsZenskarProductIdProduct ID for the pricing
Output
FieldDescriptionSame as inputEnriched data with additional information

Apex classes
You can use Apex classes to store data.
ZenskarAddress
Javapublic class ZenskarAddress {
    public String line1;
    public String line2;
    public String line3;
    public String city;
    public String state;
    public String zipcode;
    public String country;
}
ZenskarBillingPeriod
Javapublic class ZenskarBillingPeriod {
    public String every;  // 1, 2, 3, etc.
    public String cadence;  // Day, Week, Month, Year
    public String offset;  // prepaid/postpaid
}
ZenskarContract
Javapublic class ZenskarContract {
    public String contractName;
    public String customerId;
    public DateTime startDate;
    public DateTime endDate;
    public List<String> link;
    public List<ZenskarPricingAndProductId> pricingandProductId;
    public List<ZenskarTags> tags;
    public String status;  // draft, active, expired
    public String renewalPolicy;
}
ZenskarCustomer
Javapublic class ZenskarCustomer {
    public String externalID;
    public String customerName;
    public String customerEmail;
    public ZenskarAddress customerBillingAddress;
    public ZenskarAddress customerShippingAddress;
    public String customerPhoneNumber;
    public Boolean customerAutoChargeEnabled;
    public Boolean customerCommunicationEnabled;
    public List<String> tags;
}
ZenskarDiscountFeature
Javapublic class ZenskarDiscountFeature {
    public String unit;  // percentage of discount
}
ZenskarPerUnitPricing
Javapublic class ZenskarPerUnitPricing {
  public Decimal unitAmount;
}
ZenskarPricing
Javapublic class ZenskarPricing {
    public String zenskarPricingId;
    public String Name;
    public String Description;
    public Boolean isRecurring;
    public String linkID;
    public ZenskarBillingPeriod billingPeriod;
    public ZenskarQuantity quantity;
    public String pricingType;  // per_unit, flat_fee
    public List<ZenskarDiscountFeature> discounts;
    public String oppLineItemId;
}
ZenskarPricingAndProductId
Javapublic class ZenskarPricingAndProductId {
    public String productID;
    public String pricingID;
    public String oppLineItemId;
}
ZenskarProduct
Javapublic class ZenskarProduct {
    public String zenskarProductId;
    public String name;
    public String sku;
    public String description;
}
ZenskarQuantity
Javapublic class ZenskarQuantity {
    public Decimal quantity;
    public String unit;
}
ZenskarTags
Javapublic class ZenskarTags {
    public String label;
    public String value;
}

 
For more on Apex classes, see Apex Developer Guide.

Custom Fields Summary
Account

AutoCharge Invoice (Zenskar)
CustomerID (Zenskar)
External ID (Zenskar)

Opportunity

Contract End Date (Zenskar)
Contract Renew Policy (Zenskar)

Product

ProductID (Zenskar)

PriceBookEntry

LinkID (Zenskar)

For details on creating custom fields, refer to Salesforce Custom Fields.Updated 17 days ago Use default FlowNetSuiteTable of Contents

Some example Flows



Syncing Customers to Zenskar
Syncing Contracts



Package components



Apex Actions
Zenskar Create Product



Apex classes



ZenskarAddress
ZenskarBillingPeriod
ZenskarContract
ZenskarCustomer
ZenskarDiscountFeature
ZenskarPerUnitPricing
ZenskarPricing
ZenskarPricingAndProductId
ZenskarProduct
ZenskarQuantity
ZenskarTags



Custom Fields Summary



Account
Opportunity
Product
PriceBookEntry
































































