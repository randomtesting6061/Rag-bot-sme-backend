[
  {
    "id": "chunk_0",
    "document": "Accounting.txt",
    "chunk_index": 0,
    "content": "Accounting\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceAccountingSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by AccountingZenskar can manage your Accounting sub-ledgers for all Billing related accounts. These include accounts like Revenue (broken down by product and customer), Accounts Receivables (broken down by customer), Credit Balances, Unearned Revenue, etc.\nThese entries can then be posted to your external ERP/accounting system using Zenskar's Accounting integrations, or via CSV export if the Integration is not available yet.\nZenskar has an extremely flexible Accounting Rule Engine that can be customised to your specific revenue recognition needs. You get sane defaults off the shelf, but can choose to customise them based on your specific use cases or local regulations very easily if required.\n\nReports\nZenskar allows you to generate comprehensive financial reports tailored to your specific business needs. Our product also offers default templates for balance sheet, income statement, cashflow statements and more.\nUpdated 17 days ago Payment GatewaysHierarchy of default accountsTable of Contents\nReports\n\n"
  },
  {
    "id": "chunk_1",
    "document": "Adyen.txt",
    "chunk_index": 0,
    "content": "Adyen\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceAdyenSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by AdyenUpdated 17 days ago Zoho BooksRazorpay\n\n"
  },
  {
    "id": "chunk_2",
    "document": "Analytics.txt",
    "chunk_index": 0,
    "content": "Analytics\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceAnalyticsSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by AnalyticsWe perform systematic computational analysis of your data. We use the Analytics module to present the data in an easy to consume form.\nTypes of analytics\n\nClick on Analytics in the left sidebar to view all the consolidated analytics for all your customers.\n\nSelect the date range, interval and currency.\n\nSearch for the customer whose analytics you are interested in.\n\nInvoice total and unpaid amount\nThe invoice total and unpaid amount graph shows:\n\nthe total amount of all approved invoices\nthe total unpaid amount\n\nThese analytics are derived from the data from the Invoices module.\n\nFor example, the above graph is for your fictional customer Acme Corporation who has:\n\na total of $35 in approved invoices\n\na total of $35 in dues\n\nNumber of invoices and due invoices\nThis graph shows:\n\nthe total number of approved invoices\nthe total number of unpaid invoices\n\nThese analytics are derived from the data from the Invoices module.\n\nFor example, the above graph is for your fictional customer Acme Corporation who has:\n\none approved invoice\n\none unpaid invoice\n\nAging report\nThis graph shows the total amount in approved invoices approved in the past:\n\n30 days\n30 to 60 days\n60 to 90 days\n90 or more days\n\nClicking on the bar of the graph takes you to the Invoices page with proper filters already applied.\n\nAging report for invoices\nThis graph shows the total number of approved invoices approved in the past:\n\n30 days\n30 to 60 days\n60 to 90 days\n90 or more days\n\nThese analytics are derived from the data from the Invoices module.\n\nPayment totals\nThis graph shows the total payments received from your fictional customer Acme Corporation in the date range selected.\n\nThis graph derives data from the Journal Entries in the Accounting module.\n\nNumber of payments\nThis graph shows the number of payments received from your fictional customer Acme Corporation in the date range selected.\n\nThis graph data can be verified in Journal Entries in the Accounting module.\n\nThis graph data can also be verified in the Payments module.\n\nNumber of new signups\nThis graph shows the number of new customers added to Zenskar in the date range selected.\n🚧NoteThe customer filter has no effect on this graph.\n\nRevenue\nThis graph shows the total revenue from all your customers in the date range selected.\n🚧NoteThe customer filter has no effect on this graph. This graph shows consolidate revenue from all your customers.\n\nThese analytics are derived from Journal Entries in the Accounting module, as shown below.\nThe total estimated inflow of revenue due to approved invoices ($1285):\n\nThe total outflow of revenue due to credit notes ($850):\nUpdated 17 days ago Consolidating invoicesCustomersTable of Contents\n\nTypes of analytics\n\nInvoice total and unpaid amount\nNumber of invoices and due invoices\nAging report\nAging report for invoices\nPayment totals\nNumber of payments\nNumber of new signups\nRevenue\n\n"
  },
  {
    "id": "chunk_3",
    "document": "Anrok.txt",
    "chunk_index": 0,
    "content": "Anrok\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceAnrokSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by AnrokUpdated 17 days ago StripeAvalara AvaTax\n\n"
  },
  {
    "id": "chunk_4",
    "document": "Auth0.txt",
    "chunk_index": 0,
    "content": "Auth0\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceAuth0SearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Auth0🐕‍🦺 Setup guide\nThe Zenskar Auth0 data-source connector fetches data from Auth0 Management API.\n🚧Prerequisites\nYou must have a free or paid Auth0 account.\nYou must authorize Zenskar to read data from your account.\n\n⚙️ Set up an Auth0 account\n\nSign up for an account in Auth0.\nConfirm your email.\n\n⚙️ Get a temporary access token for testing\n\nGo to the API Explorer tab of your Auth0 Management API. A token is automatically generated and displayed there.\nClick Copy Token.\n\nMore details can be found in this documentation.\n⚙️ Create a new app for OAuth2 for automated token generation\n\nTo allow Zenskar to make scheduled calls to Auth0, you must set up an OAuth2 integration. This helps Zenskar generate access tokens automatically.\nIn Auth0, navigate to Dashboard > Applications > Applications.\nCreate a new application, name it Zenskar. Choose the application type Machine to Machine Applications (M2M).\nSelect Management API V2. This is the API Zenksar will call.\nEach M2M app that accesses an API must be granted a set of permissions (or scopes). Here, we only need permissions starting with read (e.g. read:users). Under the API doc, each api will list the required scopes.\nMore details can be found from this documentation.\n\n⚙️ Set up Auth0 as data source in Zenskar\nSet up data source\n\nLog into your Zenskar account.\nIn the left navigation bar, navigate to Metering > Data Sources. In the top-right corner, click + ADD DATA SOURCE.\nIn the Set Up Source section of the Add New Data Source page, enter a name for the Auth0 data source connection.\nSelect Auth0 from the Source Type dropdown.\n\nConfigure data source\nIn the Source Config section of the Add New Data Source page, do the following:\n\nBase URL: the authentication API is served over HTTPS. The Base URL will be of the form https://<yourDomain>.\nAuthentication Method: select from:\n\nOAuth2 Confidential Application\n\nClient ID: the client Id of your Auth0 application\nClient Secret: the client secret of your Auth0 application\n\nOAuth2 Access Token\n\nOAuth2 Access Token: paste the access token retrieved from Auth0.\n\nSupported sync modes\nThe Auth0 source connector supports the following sync modes:\n\nFull Refresh\nIncremental\n\nSupported Streams\n\nClients\nOrganizations\nOrganizationMembers\nOrganizationMemberRoles\nUsers\nClients\n\nPerformance considerations\nThe connector is restricted by Auth0 rate limits.Updated 17 days ago Stripe TaxAWS AthenaTable of Contents\n\n🐕‍🦺 Setup guide\n\n⚙️ Set up an Auth0 account\n⚙️ Get a temporary access token for testing\n⚙️ Create a new app for OAuth2 for automated token generation\n⚙️ Set up Auth0 as data source in Zenskar\n\nSupported sync modes\n\nSupported Streams\n\nPerformance considerations\n\n"
  },
  {
    "id": "chunk_5",
    "document": "Avalara AvaTax.txt",
    "chunk_index": 0,
    "content": "Avalara AvaTax\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceAvalara AvaTaxSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Avalara AvaTax🐕‍🦺 Configuration/User Guide\nAvalara AvaTax is a cloud-based solution automating transaction tax calculations and the tax filing process. Avalara provides real-time tax calculation using tax content from more than 12,000 US taxing jurisdictions and over 200 countries, insuring your transaction tax is calculated based on the most current tax rules.\n🔗 Connect to AvaTax\n🚧PrerequisiteYou must set up your Avalara AvaTax account before proceeding with this guide.\nAfter installing the AvaTax integration you need to configure the integration\n\nGo to Settings > Connectors > Sales Tax > Avalara Tax Connector\nClick the Connect button on the Avalara Tax Connector card.\n\nFig. 1: Provide Avalara AvaTax credentials to the connector.\n\nEnter your Avalara AvaTax credentials:\n\nAccount ID: provided to you during the AvaTax account activation process.\nLicense key: provided to you during the AvaTax account activation process\nCompany code: company profile identifier in the AvaTax Admin Console.\n\nClick the Connect button.\n\n⚙️ Configure Avalara AvaTax\nOnce connected, you see additional settings:\n\nDisconnect: Turn off the AvaTax calculation service by clicking the Disconnect button.\nManage: Configure various aspects of the synchronization.\n\nFig. 2: Manage and disconnect the connector.\n✍️ Assign an AvaTax System Tax Code to an item\n\nGo to Contracts > Plans:\n\nFor editing an existing plan, select the plan from the list\nFor creating a new plan, click the Add New Plan button\n\nThe AvaTax feature can be added in the following two ways:\n\nTo a plan: click on the AvaTax button in the Add More Features section of the Plan Information section.\nTo a product: click on the AvaTax button in the Add More Features section of the product.\n\nFig. 3: The AvaTax feature in the Add More Features section of the Plan Information section.\nFig. 4: The AvaTax feature in the Add More Features section of the product.\n📖Tax versus AvaTaxAvalara AvaTax automates the complete process of sales tax calculations and filing. However, the Tax option in the Add More Features section of a plan or product provides you an alternative for sales tax calculations: enter a tax percentage based on the jurisdiction and product category for calculations. You will have to handle the filing process yourself.\n\nEnter the applicable AvaTax System Tax Code in the Tax Code field.\nClick Save.\n\n🔖ImportantView a listing of all available AvaTax tax codes here.\nAvalara AvaTax in invoice generated by Zenskar\nFig. 5: A sample invoice with Avalara Sales Tax line item.Updated 17 days ago AnrokStripe TaxTable of Contents\n🐕‍🦺 Configuration/User Guide\n🔗 Connect to AvaTax\n⚙️ Configure Avalara AvaTax\n✍️ Assign an AvaTax System Tax Code to an item\nAvalara AvaTax in invoice generated by Zenskar\n\n"
  },
  {
    "id": "chunk_6",
    "document": "AvaTax.txt",
    "chunk_index": 0,
    "content": "AvaTax\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceAvaTaxSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by AvaTaxAvalara AvaTax is a cloud-based solution automating transaction tax calculations and the tax filing process. Avalara provides real-time tax calculation using tax content from more than 12,000 US taxing jurisdictions and over 200 countries, insuring your transaction tax is calculated based on the most current tax rules.\n🚧Prerequisites\nYou must have a fully functioning Avalara account.\nYou must configure the Zenskar's Avalara AvaTax connector.\n\n📚NoteDiscount can be applied at the level of a product and\\or at the level of the contract.\nFig. 1: Avalara AvaTax at the product level.\nFig. 2: Avalara AvaTax at the contract level\nAnatomy of an Avalara tax code\nMost Avalara tax codes are made up of eight characters: two letters to start and six numbers at the end.\n\nThe first letter indicates the tax code type (P for products, D for digital, Fr for freight, S for services, O for other).\nThe second letter indicates the tax code category (for example, C for clothing).\nThe six numbers indicate subcategories under the tax code category.\n\nExamples\n\nPC040101: Aprons\nPC040105: Bandanas\nPC040111: Coats and jackets\n\nAvalara tax code search tool\nAvalara uses tax codes to identify products that have specific tax rates depending on where they are taxed. Using Avalara tax codes makes tax calculation easy for your company because Avalara keeps track of rate changes for products that have tax codes.\nAvalara tax code search tool  helps you discover the appropriate tax codes.Updated 17 days ago DiscountPayment termsTable of Contents\nAnatomy of an Avalara tax code\nAvalara tax code search tool\n\n"
  },
  {
    "id": "chunk_7",
    "document": "AWS Athena.txt",
    "chunk_index": 0,
    "content": "AWS Athena\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceAWS AthenaSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by AWS Athena\nThe Amazon Web Services (AWS) Athena data-source connector allows you to sync data to AWS. The AWS Athena data-source connector does the following:\n\nwrites data as JSON files in AWS S3\nmakes data available through a Lake Formation Governed Table in the Glue Data Catalog so that the data is available throughout other AWS services, such as EMR and Redshift.\n\nPrerequisites\nTo use this connector, you will need the following:\n\nAn AWS account.\n\nAn S3 bucket where the data will be written.\n\nAn AWS Lake Formation database where tables will be created (one per stream)\n\nAWS credentials:\n\nAccess Key Id\nSecret Access Key\n\n🐕‍🦺 Setup guide\n⚙️ Step 1: create an Athena data source in Zenskar\nSet up data source\n\nLog into your Zenskar account.\nIn the left navigation bar, click Metering > Data Sources. In the top-right corner, click + ADD DATA SOURCE.\nIn the Set Up Source section of the Add New Data Source page, enter a name for the Athena data-source connection.\nSelect Athena from the Source Type dropdown.\n\nConfigure data source\n\nIn the Source Config section of the Add New Data Source page, add the following details:\n\nDatabase Name: the database in which the tables will be created. You will find the instructions to create a new Lake Formation database here.\nBucket: the AWS S3 bucket in which the data will be written. You will find the instructions to create a new S3 bucket here.\nAWS Region: the region in which your resources are deployed.\nAWS Access Key Id: You will find the instructions to create a new user here. Select Programmatic Access to generate Access Key Id-AWS Secret Access Key pair.\nAWS Secret Access Key\n\nAssigning proper permissions\nThe policy used by the user or the role must have access to the following services:\n\nAWS Lake Formation\nAWS Glue\nAWS S3\n\nYou can use the AWS policy generator to help you generate an appropriate policy.\nEnsure that the role or user you will use has appropriate permissions on the database in AWS Lake Formation. You will find more information about Lake Formation permissions in the AWS Lake Formation Developer Guide.\nSupported sync modes\nFeatureSupported?Full Refresh SyncYesIncremental - Append SyncYesNamespacesNo\nData type map\nThe Glue tables will be created with schema information provided by the source, i.e : You will find the same columns and types in the destination table as in the source except for the following types which will be translated for compatibility with the Glue Data Catalog:\nType in the sourceType in the destinationnumberfloatintegerintUpdated 17 days ago Auth0BigQueryTable of Contents\nPrerequisites\n🐕‍🦺 Setup guide\n\n⚙️ Step 1: create an Athena data source in Zenskar\n\nSupported sync modes\nData type map\n\n"
  },
  {
    "id": "chunk_8",
    "document": "BigQuery.txt",
    "chunk_index": 0,
    "content": "BigQuery\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceBigQuerySearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by BigQuery🐕‍🦺 Setup guide\n🚧PrerequisitesTo use BigQuery as a data source, you'll need:\nA Google Cloud Project (GCP) with BigQuery enabled\nA Service Account with the BigQuery User and BigQuery Data Editor roles in your GCP project\nA Service Account key to authenticate your Service Account\n\n🤔 What is a Service Account?\n\nA service account is a special kind of account typically used by an application or compute workload, such as a Compute Engine instance, rather than a person. A service account is identified by its email address, which is unique to the account.\n\nZenskar needs credentials for a Service Account with the BigQuery User and BigQuery Data Editor roles. These roles grant Zenskar the following permissions:\n\nRun BigQuery jobs\nWrite to BigQuery Datasets\nRead table metadata\n\n📖Service AccountWe highly recommend that you create a Service Account exclusive to Zenskar for ease of permission and auditing. However, you can use a pre-existing Service Account that has the correct permissions.\n🤔 How to create a Service Account?\nFollow GCP's guide to create a service account. Once you've created the Service Account, keep its ID handy as you will need it while granting role-based permissions. Service Account IDs typically take the form <account-name>@<project-name>.iam.gserviceaccount.com\nAdd the Service Account as a Member in your GCP account with the BigQuery User role. To do this, follow the instructions for granting access in the Google documentation. The email address of the member you are adding is the same as the Service Account ID you just created.\nAt this point you should have a Service Account with the BigQuery User project-level permission. Similarly, assign the BigQuery Data Editor role to the Service Account.\n🤔 How to create a Service Account Key?\nService Account keys are used to authenticate as Google Service Accounts. Zenskar requires the Service Account keys to leverage the role-based permissions you granted to the Service Account in the previous section.\nFollow the Google documentation to create and manage a key. Currently, Zenskar supports only JSON keys. Ensure that:\n\nYou create your key in JSON format\nYou download the key immediately.\n\nGoogle will not allow you to see the contents of the key once you navigate away.\n👍SecurityDelete the Service Account key JSON from your computer after setting up BigQuery as a data source.\nSetup the BigQuery source in Zenskar\n⚙️ Set up data source and type\n\nLog into your Zenskar account.\nIn the left navigation bar, click Metering > Data Sources. In the top-right corner, click + ADD DATA SOURCE.\nIn the Set Up Source section of the Add New Data Source page, enter a name for the QuickBooks data source connection.\nSelect BigQuery from the Source Type dropdown.\n\n⚙️ Configure data source\nIn the Source Config section of the Add New Data Source page, do the following:\n\nDefault Dataset ID (optional): the schema name if you are interested in only one schema.\nProject ID: the labeled company ID whose data you would like to sync.\nCredentials JSON: the contents of the Service Account key JSON file.\n\nData-type mapping\nThe BigQuery source does not alter the schema present in your database. Depending on the destination connected to this source, however, the schema may be altered. See the destination's documentation for more details.\nThe BigQuery data types mapping:\nBigQuery TypeResulting TypeNotesBOOLBooleanINT64NumberFLOAT64NumberNUMERICNumberBIGNUMERICNumberSTRINGStringBYTESStringDATEStringIn ISO8601 formatDATETIMEStringIn ISO8601 formatTIMESTAMPStringIn ISO8601 formatTIMEStringARRAYArraySTRUCTObjectGEOGRAPHYString\nFeatures\nFeatureSupportedNotesFull Refresh SyncYesIncremental SyncYesChange Data CaptureNoSSL SupportYesUpdated 13 days ago AWS AthenaClickHouseTable of Contents\n\n🐕‍🦺 Setup guide\n\n🤔 What is a Service Account?\nSetup the BigQuery source in Zenskar\n\nData-type mapping\n\nFeatures\n\n"
  },
  {
    "id": "chunk_9",
    "document": "Billable metrics.txt",
    "chunk_index": 0,
    "content": "Billable metrics\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceBillable metricsSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Billable metricsIntroduction\n\n🚧PrerequisitesYou must configure a data source or a usage events before trying to create billable metrics.\nExample raw-metric schema\nThis example-based guide uses a raw metric named telephone usage and the following schema. We are selling call minutes, SMS, and internet data.\nJSON{\n  \"data\": {\n    \"sms\": \"int\",\n    \"data\": \"float\",\n    \"call_minutes\": \"float\"\n  },\n  \"timestamp\": \"timestamp\",\n  \"customer_id\": \"string\"\n}\nExample raw metric data\nThe following example events will be used in the guide.\ndata.smsdata.datadata.call_minutestimestampcustomer_id433.756.02024-04-16 11:33:38.0008578d067-b019-471c-b28c-5a3f35a3d05a122.023.02024-04-17 11:25:02.0008578d067-b019-471c-b28c-5a3f35a3d05a161.834.02024-04-18 11:25:43.0008578d067-b019-471c-b28c-5a3f35a3d05a\nExample customer\nThe customer ID 8578d067-b019-471c-b28c-5a3f35a3d05a belongs to a fictional customer named John Doe.\nFig. 2: John Doe, the example customer.\n\nAdd new billable metric\n\nNavigate to Metering > Billable Metrics in the left side panel.\nOn the Billable Metrics page, click on the + ADD NEW BILLABLE METRIC button.\n\nOn the Add New Billable Metric page, there are two ways to add a new billable metric:\n\nVisual Builder: a wizard that helps you build a billable-metric query.\nSQL Builder: a SQL-based tool that helps you handcraft a billable-metric query.\n\nFig. 5: Visual Builder and SQL Builder tools on the Add New Billable Metric page.\n\nCreate the desired billable-metric query using either the visual builder or the SQL builder.\nClick on the CREATE BILLABLE METRIC button.\n\nAdd a billable metric using the visual builder\nThe wizard-based Visual Builder presents four main steps:\n\nSelect tables and filters\nMap customer\nSet date field\nSet billable metric over\n\nStep 1: select tables and filters\nThere are two ways you can let Zenskar access your customers' data:\n\ndata source\nraw metrics\n\nSelect data source\n\nSelect the table that contains usage data.\nIf the table you selected is related to a data source, the Data Source tag will appear below the Table Name drop-down.\n\nFig. 5: Select data table: data source.\nSelect raw metrics\n\nSelect the table that contains usage data.\nIf the table you selected is related to a raw metric, the Raw Metric tag will appear below the Table Name drop-down.\n\nFig. 6: Select data table: raw metric.\nIn this guide, we will use the telephone usage raw metric.\n📚NOTEYou must add and configure raw metrics (or data sources) like telephone usage. Zenskar will transform all raw metrics (or data sources) into database tables like telephone_usage.\nFig. 7: The example raw-metric data table: telephone_usage.\nSelect filters\nThe raw-metric schema of telephone usage results in the following columns when Zenskar creates a SQL table:\nColumnscustomer_idtimestampdata.smsdata.call_minutesdata.data\nFilters can be created using any of these columns. The conditions available are dependent on the data type of the column selected. The data type--condition mapping is shown below:\nData typeConditionsInt64 \nFloat64 \nDecimalis \nis not \nless than \ngreater than \nis empty \nis not emptyBoolis \nis not \nis empty \nis not emptyDate32 \nDateTime64is \nis not \nis before \nis after \nis empty \nis not emptyString \nUUIDis \nis not \ncontains \ndoes not contain \nstarts with \nends with \nis empty \nis not empty\nThe data type of the column is determined by the schema you defined while creating a raw metric. A sample raw metric with all available data types is shown below:\nJSON{\n    \"customer_id\": \"String\",\n    \"timestamp\": \"DateTime64\",\n    \"data\": {\n        \"a_string_field\": \"String\",\n        \"an_int64_field\": \"Int64\",\n        \"a_float64_field\": \"Float64\",\n        \"a_date32_field\": \"Date32\",\n        \"a_datetime64_field\": \"DateTime64\",\n        \"a_UUID_field\": \"UUID\",\n        \"a_bool_field\": \"Bool\",\n        \"a_decimal_field\": \"Decimal\"\n    }\n}\n\nA simple filter\nFor the example data mentioned above, a simple filter based on timestamp can be created:\nColumnConditionValuetimestampis before2024-04-18\nFig. 8: A simple filter.\nThis filter will yield the following result:\ncustomer_idtimestampdata.call_minutesdata.smsdata.data8578d067-b019-471c-b28c-5a3f35a3d05a2024-04-17 11:25:02.00023.0122.08578d067-b019-471c-b28c-5a3f35a3d05a2024-04-16 11:33:38.00056.0433.7\nAll the raw-metric data that you sent to Zenskar for the customer 8578d067-b019-471c-b28c-5a3f35a3d05a whose timestamp is before the date 2024-04-18 is returned as the result.\nFig. 9: A simple filter that fetches all data based on the timestamp database table column: customer is 8578d067-b019-471c-b28c-5a3f35a3d05a and the timestamp is before the date 2024-04-18.\nA complex AND filter\nFor the example data mentioned above, a complex filter based on timestamp AND data.call_minutes can be created:\nColumnConditionValuetimestampis before2024-04-18data.call_minutesgreater than30\nThis filter will yield the following result:\ncustomer_idtimestampdata.call_minutesdata.smsdata.data8578d067-b019-471c-b28c-5a3f35a3d05a2024-04-16 11:33:38.00056.0433.7\nAll the raw-metric data that you sent to Zenskar for the cusotmer 8578d067-b019-471c-b28c-5a3f35a3d05a before the date 2024-04-18 ANDwhere data.call_minutes is greater than 30 is returned as the result.\nFig. 10: A complex AND-based filter\nA complex OR filter\nSimply clicking on the AND condition will change it to OR and vice versa, as shown below.\n\nFor the example data mentioned above, a complex filter based on timestamp OR data.call_minutes can be created:\nColumnConditionValuetimestampis before2024-04-18data.call_minutesgreater than30\nThis filter will yield the following result:\ncustomer_idtimestampdata.call_minutesdata.smsdata.data8578d067-b019-471c-b28c-5a3f35a3d05a2024-04-17 11:25:02.00023.0122.08578d067-b019-471c-b28c-5a3f35a3d05a2024-04-18 11:25:43.00034.0161.88578d067-b019-471c-b28c-5a3f35a3d05a2024-04-16 11:33:38.00056.0433.7\nAll the raw-metric data that you sent to Zenskar for the cusotmer 8578d067-b019-471c-b28c-5a3f35a3d05a before the date 2024-04-18 ORwhere data.call_minutes is greater than 30 is returned as the result.\n\nStep 2: map customer\nYou must select a column in your table that can uniquely identify your customers.\n\nThis can also be your customer's email ID\n\nYou must map this column to one of the following columns in Zenskar:\n\nemail\nexternal_id: this is usually a unique identifier (UUID) that your system generates or is generated by your CRM.\ncustomer name\n\n🚧NoteThe Zenskar columns email, external_id, and customer name are created when you add your customer to Zenskar.\n\nStep 3: set date field\n\nStep 4: set billable metric over\n🚧NoteRefer the documentation on data processing to understand how billable metrics work.\n\nSelect the aggregation method:\n\nAggregateDescriptionCOUNTreturns the number of items found in a columnSUMreturns the sum of all the values, or only the DISTINCT values, in the column. SUM can be used with numeric columns only. Null values are ignored.MAXreturns the maximum value in a column.MINreturns the minimum value in a column.AVGreturns the average of the values in a column ignoring null values.UNIQUE COUNT\n\nSelect the column over which the aggregation must be performed.\n\nCOUNT\nFor the example data mentioned above, COUNT will return 3 for any column.\n\nSUM\nFor the example data mentioned above, SUM will return the following values:\nBillable-metric typeBillable metric returneddata.call_minutes113.0data.sms71data.data7.5\n❗️NOTEThe SUM aggregate must be performed over columns of numeral data type: int, float, bigint, double, tinyint, smallint. Trying to SUM column of any other data type will result in the following error:\n\nMAX\nFor the example data mentioned above, MAX will return the following values:\nBillable-metric typeBillable metric returneddata.call_minutes56.0data.sms43data.data3.7\n❗️NOTEThe MAX aggregate must be performed over columns of numeral data type: int, float, bigint, double, tinyint, smallint. Trying to run MAX aggregate over a column of any other data type will result in the following error:\n\nMIN\nFor the example data mentioned above, MIN will return the following values:\nBillable-metric typeBillable metric returneddata.call_minutes23.0data.sms12data.data1.8\n❗️NOTEThe MIN aggregate must be performed over columns of numeral data type: int, float, bigint, double, tinyint, smallint. Trying to run MIN aggregate over a column of any other data type will result in the following error:\nAVG\nFor the example data mentioned above, AVG will return the following values:\nBillable metric typeBillable metric returneddata.call_minutes37.666668data.sms23.666666666666668data.data2.5\n❗️NOTEThe AVG aggregate must be performed over columns of numeral data type: int, float, bigint, double, tinyint, smallint. Trying to run AVG aggregate over a column of any other data type will result in the following error:\n\nUNIQUE COUNT\nFor the example data mentioned above, UNIQUE COUNT will return the following values:\nBillable-metric typeBillable-metric returnedNotescustomer_id1In the example data mentioned above, there exists only one customer with 8578d067-b019-471c-b28c-5a3f35a3d05a as ID.timestamp3In the example data mentioned above, there exist three unique timestamps.data.call_minutes3In the example data mentioned above, there exist three unique call-minute entries.data.sms3In the example data mentioned above, there exist three unique SMS entries.data.data3In the example data mentioned above, there exist three unique internet-data-usage entries.\n\nSQL builder\nYou can build raw SQL queries using the SQL builder. You can choose the SQL builder:\n\nas an alternative to the visual builder to create billable-metric queries\nto edit queries built by visual builder\n\n🚧NOTEYou can switch to the SQL builder to edit a billable-metric query built using the visual builder. However, this switch is permanent, and you will not be able to switch back to the visual builder.\n\nFeatures of the SQL builder\n\nSyntax highlighting\nCode completion\n\nTable browser: select the table you are interested in to list all columns. The column names can be copied and used in the SQL builder . The Zenskar variables that can be used in the SQL queries are also available below the table browser.\n\n👷Engineering effort requiredCreating raw SQL queries for complex scenarios is the job of an engineer proficient in SQL.\n\nTying it all together\nCreate billable metrics for the example data\nSelect database table and create filter\nFor the database table telephone_usage, create the following filter:\nColumnConditionValuedata.call_minutesgreater than0\n\nMap customer\n\nSet date field\n\nSet billable metric over the desired field\nWe will use the SUM aggregate to determine the total call minutes during the billing period.\n\nCreate billable metric\nProvide a name that describes your billable metric.\n\nCreate a billable metric for SMS and internet data usage\nCreate two more billable metrics for SMS and internet data usage. Repeat the steps you followed creating the billable metric for call minutes.\n\nNavigate to Metering > Billable Metrics to view all the billable metrics you created, as shown below.\n\nCreate products that use these billable metrics\nCreate a product for call minutes offered\n\nCreate a product for SMSes offered\n\nCreate a product for internet data offered\n\nCreate a contract that uses these products\nUpdated 14 days ago Manual: use Zenskar's web form to upload dataSQL-query templatesTable of Contents\n\nIntroduction\n\nExample raw-metric schema\nExample raw metric data\nExample customer\n\nAdd new billable metric\n\nAdd a billable metric using the visual builder\n\nStep 1: select tables and filters\nStep 2: map customer\nStep 3: set date field\nStep 4: set billable metric over\n\nSQL builder\n\nFeatures of the SQL builder\n\nTying it all together\n\nCreate billable metrics for the example data\nCreate a billable metric for SMS and internet data usage\nCreate products that use these billable metrics\nCreate a contract that uses these products\n\n"
  },
  {
    "id": "chunk_10",
    "document": "Business entities.txt",
    "chunk_index": 0,
    "content": "Business entities\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceBusiness entitiesSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Business entitiesA business entity is a company wholly controlled by another company called a holding company or parent.📚DefinitionIn Zenskar, a business entity is a company wholly controlled by another company called a holding company or parent. A business entity is also known as a subsidiary.In Zenskar, an organization is the holding company or parent that wholly controls all business entities.\nAn organization in Zenskar\nAn organization is created in Zenskar when you create an account. To view the organization details, do the following:\n\nClick on the drop-up menu with your name, as shown below.\n\nClick on the Settings option.\nThe organization details are shown in the General tab of the Settings page, as shown below.\n\nBusiness entities in Zenskar\nA default business entity is created for every organization.\n\nView business entities\n\nOn the Settings page, move to the Business Entity tab.\nAll business entities will be listed, as shown below.\n\n🚧NoteA newly customer is automatically assigned to the default business entity.\nAdd a business entity\n\nOn the Settings page, move to the Business Entity tab.\nClick on the + ADD BUSINESS ENTITY button.\n\nFill in the following details:\n\nEntity name (required)\nEmail of the entity (required)\nPhone number\nAddress, including city, state, and zip code\nCountry (required): United Sates (USA) is the default\nSet as default business entity\n\nClick ADD.\n\nEdit a business entity\n\nOn the Settings page, move to the Business Entity tab.\nClick on the kebab menu located at the end of the row containing the business entity you are interested in, as shown below.\n\nEdit any of the following details:\n\nEntity name (required)\nEmail of the entity (required)\nPhone number\nAddress, including city, state, and zip code\nCountry (required): United Sates (USA) is the default\nSet as default business entity\n\nSet up payment instructions for business entities\n\nOn the Settings page, move to the Payment Instructions tab.\nClick on + ADD PAYMENT INSTRUCTIONS.\nAdd the following details:\n\nEntity: from the drop-down menu, select the entity to which you desire to add payment instructions.\nCurrency: from the drop-down menu, select the currencies for which you would like to use this payment instruction.\nTitle: enter the title of the payment instructions.\nDescription  (optional): enter a description for the payment instructions.\nSet as default business entity\nBank details: add bank details in label–value form. These details will be displayed on the invoice.\n\nBank name: enter the bank name.\nAccount number: enter the bank account number.\nClick on + ADD FIELDS to add more\n\nOnce added, all payment instructions can be viewed in the Payment Instructions tab.\n\nEntity details and payment instructions displayed on the invoice\nUpdated 17 days ago Customer-facing portalFlat-fee pricingTable of Contents\n\nAn organization in Zenskar\n\nBusiness entities in Zenskar\n\nView business entities\nAdd a business entity\nEdit a business entity\n\nSet up payment instructions for business entities\n\nEntity details and payment instructions displayed on the invoice\n\n"
  },
  {
    "id": "chunk_11",
    "document": "ClickHouse.txt",
    "chunk_index": 0,
    "content": "ClickHouse\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceClickHouseSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by ClickHouse\n🚧Prerequisites\nClickHouse version 21.3.10.1 or later.\nA dedicated read-only Zenskar user with access to all tables needed for replication.\n\n🐕‍🦺 Setup guide\n⚙️ Step 1: make your database accessible to Zenskar\nThe steps needed are dependent on your networking setup. The easiest way to verify if Zenskar is able to connect to your ClickHouse instance is by configuring a data source in the UI.\n⚙️ Step 2: create a dedicated read-only user with access to the relevant tables (optional but recommended)\nThis step is optional but highly recommended to allow for better permission control and auditing. Alternatively, you can use an existing user in your database.\nTo create a dedicated database user, run the following commands against your database:\nSQLCREATE USER 'zenskar'@'%' IDENTIFIED BY 'your_password_here';\nThen give it access to the relevant schema:\nSQLGRANT SELECT ON <database name>.* TO 'zenskar'@'%';\nYou can limit this grant down to specific tables instead of the whole database. Your database user should now be ready for use with Zenskar.\n⚙️ Step 3: set up data source and type\n\nLog into your Zenskar account.\nIn the left navigation bar, click Metering > Data Sources.\nIn the top-right corner, click + ADD DATA SOURCE.\nIn the Set Up Source section of the Add New Data Source page, enter a name for the ClickHouse data source connection.\nSelect ClickHouse from the Source Type drop-down menu.\n\n⚙️ Step 4: configure data source\nIn the Source Config section of the Add New Data Source page, fill in the following details:\n\nHost: the host name or address of the server hosting ClickHouse.\nPort: the port number of the SQL interface of the server hosting ClickHouse.\nDatabase: the database name.\nUsername: the username to be used to connect with the database.\nPassword: the password of the user.\nJDBC URL Parameters (Advanced): refer this.\nSSH Tunnel Method: choose No Tunnel if you do not want to connect via SSH tunneling.\n\n⚙️ Step 5: configure connection via SSH tunnel method\nYou can connect to a ClickHouse server via an SSH tunnel.\nWhen using an SSH tunnel, you are configuring Zenskar to connect to an intermediate server (also called a bastion or a jump server) that has direct access to the database. Zenksar connects to the bastion and then asks the bastion to connect directly to the server.\nTo connect to a ClickHouse server via an SSH tunnel, do the following:\n\nChoose Key Authentication if you wish to use an RSA private key as your secret for establishing the SSH tunnel.\nChoose Password Authentication if you wish to use a password for establishing the SSH tunnel.\n\nKey authentication\n\nSSH Tunnel Jump Server Host: the hostname or IP address of the bastion server that Zenskar will connect to.\nSSH Connection Port: the port on the bastion server to establish the SSH connection. The default port for SSH connections is 22. Unless you have explicitly changed the SSH port, go with the default.\nSSH Login Username: the username that Zenskar should use to connect with the bastion server.\n\n🚧NoteThe SSH Login Username is not the same as the ClickHouse database username.\n\nSSH Private Key: the RSA private key that you wish to use to establish the SSH connection.\n\nPassword authentication\n\nSSH Tunnel Jump Server Host: the hostname or IP address of the bastion server that Zenskar will connect to.\nSSH Connection Port: the port on the bastion server to establish the SSH connection. The default port for SSH connections is 22. Unless you have explicitly changed the SSH port, go with the default.\nSSH Login Username: the username that Zenskar should use to connect with the bastion server.\n\n🚧NoteThe SSH Login Username is not the same as the ClickHouse database username.\n\nPassword: the password of the user that Zenskar should use to connect with the bastion server\n\n🚧NoteThe Password is not the same as the ClickHouse database password.\nGenerating a private key for SSH Tunneling\nThe connector expects an RSA key in PEM format. To generate this key:\nShellssh-keygen -t rsa -m PEM -f myuser_rsa\nThis produces the private key in pem format, and the public key remains in the standard format used by the authorized_keys file on your bastion host. The public key should be added to your bastion host to whichever user you want to use with Zenskar. The private key is provided via copy-and-paste to the Zenskar connector configuration screen, so it may log in to the bastion.Updated 17 days ago BigQueryCockroachDBTable of Contents\n\n🐕‍🦺 Setup guide\n\n⚙️ Step 1: make your database accessible to Zenskar\n⚙️ Step 2: create a dedicated read-only user with access to the relevant tables (optional but recommended)\n⚙️ Step 3: set up data source and type\n⚙️ Step 4: configure data source\n⚙️ Step 5: configure connection via SSH tunnel method\n\n"
  },
  {
    "id": "chunk_12",
    "document": "CockroachDB.txt",
    "chunk_index": 0,
    "content": "CockroachDB\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceCockroachDBSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by CockroachDBOverview\nThe CockroachDB source supports both Full Refresh and Incremental syncs. You can choose if the Zenskar's CockroachDB connector will copy only the new or updated data or all rows in the tables and columns you set up for replication, every time a sync is run.\nResulting schema\nData-type mapping\nCockroachDb data types are mapped to the following data types when synchronizing data:\nCockroachDb TypeResulting TypeNotesbigintintegerbitbooleanbooleanbooleancharacterstringcharacter varyingstringdatestringdouble precisionstringenumnumberinetstringintintegerjsonstringjsonbstringnumericnumbersmallintintegertextstringtime with timezonestringmay be written as a native date type depending on the destinationtime without timezonestringmay be written as a native date type depending on the destinationtimestamp with timezonestringmay be written as a native date type depending on the destinationtimestamp without timezonestringmay be written as a native date type depending on the destinationuuidstring\n🚧NoteArrays for all the above types as well as custom types are supported, although they may be de-nested depending on the destination.\nFeatures\nFeatureSupportedNotesFull Refresh SyncYesIncremental SyncYesChange Data CaptureNoSSL SupportYes\n🐕‍🦺 Setup guide\n🚧Prerequisites\nCockroachDb v1.15.x or above\nAllow connections from Zenskar to your CockroachDb database\nCreate a dedicated read-only Zenskar user with access to all tables needed for replication\n\nAllow Zenskar to access the database\nThis is dependent on your networking setup. The easiest way to verify if Airbyte is able to connect to your CockroachDb instance is via the check connection tool in the UI.\nCreate a dedicated read-only user with access to the relevant tables\nThis step is optional but highly recommended to allow for better permission control and auditing. Alternatively, you can use Zenskar with an existing user in your database.\nTo create a dedicated database user, run the following commands against your database:\nSQLCREATE USER zenskar PASSWORD 'your_password_here';\nThen give it access to the relevant schema:\nSQLGRANT USAGE ON SCHEMA <schema_name> TO zenskar\n📖You can re-run the above command to grant access to all the relevant schemas. However, you must set up multiple data source connections to the same CockroachDB database to replicate data from multiple schemas.\nGrant the user read-only access to the relevant tables:\nSQLGRANT SELECT ON ALL TABLES IN SCHEMA <schema_name> TO zenskar;\nALTER DEFAULT PRIVILEGES IN SCHEMA <schema_name> \nGRANT SELECT ON TABLES TO zenskar;\n⚙️ Set up CockroachDB as data source in Zenskar\n⚙️ Set up data source and type\n\nLog into your Zenskar account.\nIn the left navigation bar, navigate to Metering > Data Sources. In the top-right corner, click + ADD DATA SOURCE.\nIn the Set Up Source section of the Add New Data Source page, enter a name for the CockroachDB data source connection.\nSelect CockroachDB from the Source Type dropdown.\n\n⚙️ Configure data source\nIn the Source Config section of the Add New Data Source page, do the following:\n\nConnect using SSL: Select Yes if you need an SSL connection.\nHost: The host name or address of a CockroachDB node or load balancer.\nPort: The port number of the SQL interface of the CockroachDB node or load balancer. The default port number for CockroachDB is 26257. Use this value when in doubt.\nDB Name: A database name to use as current database. Defaults to defaultdb when using cockroach client commands. Drivers and ORMs may have different defaults.\nPassword: The user's password.\nUser: The user's password. It is not recommended to pass the password in the URL directly.\nJDBC URL Parameters (Advanced): Refer this.\nUpdated 13 days ago ClickHouseDatabricks LakehouseTable of Contents\n\nOverview\n\nResulting schema\nData-type mapping\nFeatures\n\n🐕‍🦺 Setup guide\n\nAllow Zenskar to access the database\nCreate a dedicated read-only user with access to the relevant tables\n⚙️ Set up CockroachDB as data source in Zenskar\n\n"
  },
  {
    "id": "chunk_13",
    "document": "CoinAPI.txt",
    "chunk_index": 0,
    "content": "CoinAPI\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceCoinAPISearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by CoinAPIUpdated 17 days ago Configure Zenskar's Snowflake connectorZenskar IPs\n\n"
  },
  {
    "id": "chunk_14",
    "document": "Configure Zenskar's Snowflake connector.txt",
    "chunk_index": 0,
    "content": "Configure Zenskar's Snowflake connector\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceConfigure Zenskar's Snowflake connectorSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Configure Zenskar's Snowflake connectorConfiguration settings for the connector.🐕‍🦺 Setup guide\nThis guide will help you configure Zenskar's Snowflake connector. Consequently, you can use Snowflake as a data source in Zenskar.\n🚧PrerequisitesBefore configuring Zenskar's Snowflake connector, ensure that you have set up your Snowflake account for integration.\n⚙️ Set up data source and type\n\nLog into your Zenskar account.\nIn the left navigation bar, click Metering > Data Sources. In the top-right corner, click + ADD DATA SOURCE.\nIn the Set Up Source section of the Add New Data Source page, enter a name for the Snowflake data source connection.\nSelect Snowflake from the Source Type dropdown.\n\n⚙️ Configure data source\nIn the Source Config section of the Add New Data Source page, add the following details:\nFieldDescriptionAuthorization MethodSelect Username and Password from the drop-down menu.auth_typeThe phrase username/password will be prepopulated. Do not change.UsernameEnter the username you created.PasswordEnter the password associated with the username.HostEnter the host domain of the Snowflake instance (must include the account, region, cloud environment, and end with snowflakecomputing.com). For example, accountname.us-east-2.aws.snowflakecomputing.com.RoleEnter the role you created.WarehouseEnter the warehouse you created.DatabaseEnter the database you created.SchemaEnter the default schema used as the target schema for all statements issued from the connection that do not explicitly specify a schema name.JDBC URL Params (Optional)Enter the additional properties to pass to the JDBC URL string when connecting to the database formatted as key=value pairs separated by the symbol &. For example, key1=value1&key2=value2&key3=value3\nSelect tables and columns to sync\nSelect tables to sync\nIf the connector is configured correctly, you will be asked to select the tables to sync:\n\nSelect columns to sync\nA table can be expanded to select the columns to sync.\n\nA cursor can be set against a column.\nA column can be set as the primary key.\n\nSelect sync frequency\nA sync frequency can also be configured.\n\nFinally, click on the FINISH SETUP button to save the connector.\nUpdated 17 days ago Set up Snowflake for integration with ZenskarCoinAPITable of Contents\n\n🐕‍🦺 Setup guide\n\n⚙️ Set up data source and type\n⚙️ Configure data source\nSelect tables and columns to sync\n\n"
  },
  {
    "id": "chunk_15",
    "document": "Consolidating invoices.txt",
    "chunk_index": 0,
    "content": "Consolidating invoices\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceConsolidating invoicesSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Consolidating invoicesZenskar can help you to consolidate invoices. This guide will help you understand the feature.\nWhy consolidate invoices?\nImagine an organization with multiple departments. You may wish to generate department-level invoices for each department. You may also wish to have an organization-level invoice that consolidates the department-level invoices.\n🚧NoteThe invoice consolidation is an advanced feature used rarely. Therefore, this feature can be enabled only by sending a request to [email protected].\nHow to consolidate invoices\nStep 1: Create a parent customer\n\nCreate a customer that will act as a parent. This could be your organization.\nThere is no setting you need to enable.\nAssign a contract to the parent customer.\n\nFig. 1: Contract assigned to the fictitious An Amazing Company\nStep 2: Create children customers\n\nCreate one or more customers that will act as a children. These could be your departments.\nThere is no setting you need to enable.\nAssign a contract to the children customer.\n\nFig. 2: Contract assigned to An Amazing Department of the An Amazing Company\nFig. 3: Contract assigned to Another Amazing Department of the An Amazing Company\nStep 3: Contact Zenskar support\nOnce the parent and child customers have been created, contact [email protected] to enable invoice-consolidation feature for them. The Zenskar support team will enable the necessary backend and frontend settings.\nGenerate invoices\nGenerate invoices for the parent and the child customers.\nConsolidate invoices\n\nNavigate to Invoices in the side panel.\nThe invoices generated for the parent and child customers will be in the   state.\n\n🚧NoteFor regular customers, new invoices are assigned the  state. For parent and child customers involved in the invoice-consolidation feature, new invoices will be assigned the  state\nFig. 4: New invoices are generated in the upcoming state\n\nSelect the invoices you wish to consolidate.\nClick on the CONSOLIDATE link.\n\nFig. 5: Consolidate invoices\n\nThe final consolidated invoice will be generated.\nUpdated 17 days ago Integrating your ERP software with ZenskarAnalyticsTable of Contents\n\nWhy consolidate invoices?\n\nHow to consolidate invoices\n\nStep 1: Create a parent customer\nStep 2: Create children customers\nStep 3: Contact Zenskar support\nGenerate invoices\nConsolidate invoices\n\n"
  },
  {
    "id": "chunk_16",
    "document": "Contract renewal.txt",
    "chunk_index": 0,
    "content": "Contract renewal\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceContract renewalSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Contract renewalContract renewal can be optionally automated in Zenskar. This helps you to streamline contract management by reducing manual efforts.\nContract renewal policies\nYou can choose one of the following renewal policies:\n\nDon't renew automatically: the contract will not be renewed.\nRenew with same contract terms: the contract gets renewed while preserving all customization applied to the original template.\nRenew without customer-specific prices: the contract gets reset to default template values before renewal.\n\n🚧NoteA contract is created using a template. Optional customization may be applied to the template while defining the contract.\nEnabling contract renewal policy\nAt the time of contract creation\nA contract renewal policy can be applied at the time of contract creation.\n\nAt organization level\n\nClick on the bottom-left drop-up menu with your name.\nNavigate to Settings > Contract & Invoices.\nTurn on .\nSet the contract renewal policy:\n\n🚧NoteAn organization-level contract renewal policy will be applicable to all contracts.\nHow it works\nAll contracts that expired in the past 25 hours are examined. For all expired contracts, the following steps are are taken:\n\nIf a contract renewal policy was applied during the creation of the contract, the said policy will be applied.\nIf the contract doesn't have a renewal policy, the organization-level contract renewal policy is applied.\nIf no organisation-level renewal policy exists, the contract is not renewed.\n\nUpdated 17 days ago PlansInvoicesTable of Contents\nContract renewal policies\n\nEnabling contract renewal policy\n\nHow it works\n\n"
  },
  {
    "id": "chunk_17",
    "document": "Contracts.txt",
    "chunk_index": 0,
    "content": "Contracts\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceContractsSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by ContractsOverview\nYou offer services and products to your customers based on certain mutually agree-upon rules. The usage is also billed based on mutually agreed-upon rules. This guide helps you understand how Zenskar automates the cumbersome billing process using the concepts of contract and contract plans.\nContract\nWhat is a contract\n🔖ContractA contract, in general, is a formal and legally binding agreement between you and your customer. This is an all-encompassing document that defines how you and your customer will conduct business. However, in Zenskar, the concept of a contract refers only to a subset of the general contract and contains data related to usage, pricing models, and other billing determinants.\nComponents of a contract\nA contract has two components:\n\nFeatures\nProducts\n\nFeatures\n\nFeatureDescriptionTaxChoose this feature if you would like to handle the collection of taxes.\nAvaTax⚠️ Choose this feature only if you have a properly configured Avalara AvaTax account. Avalara AvaTax uses automation to make tax determination faster, easier, and more accurate.Avalara tax codes can be found here . The Avalara tax codes determine the taxability of the goods and services you sell.\nDiscountA contract-level discount applicable on the overall invoice value.\nPayment termsChoose this feature to assign due date. A due date can be assigned based on invoice creation or invoice approval date:\nMinimum commitmentA minimum amount that you can charge even if the products and services are not availed during the billing period. Custom currency!\nProducts\n🔖ProductIn Zenskar, a product is any service or product you sell to your customer as part of a contract.\nIn a metered product, you measure customer activity or consumption of resources.\nIn a non-metered product, you do not measure customer activity or consumption of resources. You charge the customer based on the number of units purchased.\n\nRefer the products documentation to know more.\nPlan\nWhat is a plan\n🔖PlanA plan is a reusable contract pattern that contains product and feature definitions.\nA plan can be used as a guide to make tangible Zenskar contracts.\nA contract that is based on a plan will inherit all the products and features of the plan it is based on. You can override the plan values to create customized contracts.\n\nRefer the plan documentation to know more.\nHow to create a contract\nNavigate to Contracts > Contracts and click on the + ADD NEW CONTRACT button. The following form will be displayed.\n\nYou can create a contract in two ways:\n\nBuild a contract from scratch \nSelect a reusable contract template as a base and apply optional customization \n\nOther details\n\nContract name: a unique name for the contract.\nCustomer: assign the contract to a customer. For this to work, you must already have added your customers' details in Zenskar.\nStart/End date: the dates the contract starts and ends.\nDescription: a brief description of the contract.\nCurrency\nBilling cycle start\nRenewal policy: refer contract renewal documentation.\n\nThe page above lists the products and their prices, which can be changed and updated in the contract. After updating the contract, a draft invoice is created, which needs to be approved and sent to the customer.Updated 17 days ago SQL-query templatesProduct, sub-product, add-on, and product catalogTable of Contents\n\nOverview\n\nContract\n\nWhat is a contract\nComponents of a contract\n\nPlan\n\nWhat is a plan\n\nHow to create a contract\n\nOther details\n\n"
  },
  {
    "id": "chunk_18",
    "document": "Create your own Flow.txt",
    "chunk_index": 0,
    "content": "Create your own Flow\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceCreate your own FlowSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Create your own FlowYou can use Package Components to create Flows tailored to your Workflows and Setup. The following includes examples, Apex Actions, and Apex Classes that can be utilized to design these Flows.Some example Flows\nThese are a few example flows that you can refer to while creating your own custom flows.\nSyncing Customers to Zenskar\n\nGet records from the Account object.\n\nMap account details to the ZenskarCustomer object.\n\n📘Note: There are custom fields available in package, you show them on layout and use that in flows. Check Layout Section in Account Object in SF after package install\n\nAdd fields of Transformed Data to Zenskar Sync Customer Apex Action.\n\nUpdate Zenskar Customer ID to Related Object so Updates can be synced.\n\nNote: You can use provided custom field for storing Zenskar Customer ID\nSyncing Contracts\n\nRetrieve all Opportunity Line Items for the triggering Opportunity.\n\nGet Related Account for Triggering Opportunity.\n\nLoop over Opportunity Line Item and Get PriceBookEntry for each Opportunity Line Item. Add Pricebookentry’s Link ID(Zenskar) to a Collection of String (ReferenceIDs List).\n\nConvert the Salesforce Opportunity to a ZenskarContract object.\n\nAdd Zenskar Sync Contract Apex Action and Use Data from Transformer(Convert SF to Zenskar Contract).\n\nUpdate the Opportunity with the ZenskarContractId.\n\nSync with Zenskar\n\nClose the Opportunity as ‘Won’ to automatically create and sync data to Zenskar.\n\nFor managing Pricebooks and Products, see Manage Price Books.\nPackage components\nApex Actions\nThese actions are provided in our Salesforce package to sync data from Salesforce to Zenskar.\nZenskar Customer sync\nCreates or updates a customer on Zenskar. This action is required to create a contract.\nInputs\nFieldDescriptionCustomerExternalIDID of the customer in your systemCustomerNameName of the customer (required)CustomerEmailEmail of the customerBillingAddressCustomer's billing addressShippingAddressCustomer's shipping addressCustomerPhoneNumberCustomer's phone numberIsAutoChargeEnabledEnable auto-charge on ZenskarIsCommunicationEnabledEnable communication on ZenskarTagsCustomer tagsZenskarCustomerIdExisting Zenskar Customer ID (for updates)\nOutput\nFieldDescriptionZenskarCustomerIdID of the customer on Zenskar\n\nZenskar Contract Sync\nCreates or updates a contract on Zenskar.\nInputs\nFieldDescriptionContractNameContract name (required)CustomerIdCustomer ID (required)ContractIdCan be null for a new contractContractStartDateStart date (required)ContractEndDateCan be null for a perpetual contractTagsOptional Zenskar tagsRenewalPolicyDefaults to \"Do not Renew\"pricingListList of pricing IDsReferenceIdListAlternative to pricingListStatusDefaults to \"Active\"\nOutput\nFieldDescriptionZenskarContractIdID of the contract on Zenskar\n\nZenskar Get Contract\nFetches a contract from Zenskar.\nInput\nFieldDescriptionContractIDValid Zenskar Contract ID\nOutput\nFieldDescriptionZenskarContractZenskar contract object\n\nZenskar Get Customer\nFetches a customer from Zenskar.\nInput\nFieldDescriptionCustomerIDValid Zenskar Customer ID\nOutput\nFieldDescriptionZenskarCustomerZenskar customer object\n\nZenskar Create Product\nCreates or updates a product on Zenskar.\nInputs\nFieldDescriptionZenskarProductIdProduct ID for updatesNameProduct nameSKUProduct SKUDescriptionProduct descriptionIsActiveSet product status to active\nOutput\nFieldDescriptionZenskarProductIdID of the created/updated product\n\nZenskar Get Pricing\nFetches pricing from Zenskar.\nInput\nFieldDescriptionReferenceIDPricing reference IDPricingIdPricing IDProductIdProduct ID\nOutput\nFieldDescriptionZenskarPricingZenskar pricing objectProductIDID of the associated productPricePrice amount for per-unit or flat fee pricing\n\nZenskar Create Pricing\nCreates per-unit pricing on Zenskar.\nInputs\nFieldDescriptionPricingObjectContains pricing detailsPerUnitPricingDetailsContains per-unit amount detailsZenskarProductIdProduct ID for the pricing\nOutput\nFieldDescriptionSame as inputEnriched data with additional information\n\nApex classes\nYou can use Apex classes to store data.\nZenskarAddress\nJavapublic class ZenskarAddress {\n    public String line1;\n    public String line2;\n    public String line3;\n    public String city;\n    public String state;\n    public String zipcode;\n    public String country;\n}\nZenskarBillingPeriod\nJavapublic class ZenskarBillingPeriod {\n    public String every;  // 1, 2, 3, etc.\n    public String cadence;  // Day, Week, Month, Year\n    public String offset;  // prepaid/postpaid\n}\nZenskarContract\nJavapublic class ZenskarContract {\n    public String contractName;\n    public String customerId;\n    public DateTime startDate;\n    public DateTime endDate;\n    public List<String> link;\n    public List<ZenskarPricingAndProductId> pricingandProductId;\n    public List<ZenskarTags> tags;\n    public String status;  // draft, active, expired\n    public String renewalPolicy;\n}\nZenskarCustomer\nJavapublic class ZenskarCustomer {\n    public String externalID;\n    public String customerName;\n    public String customerEmail;\n    public ZenskarAddress customerBillingAddress;\n    public ZenskarAddress customerShippingAddress;\n    public String customerPhoneNumber;\n    public Boolean customerAutoChargeEnabled;\n    public Boolean customerCommunicationEnabled;\n    public List<String> tags;\n}\nZenskarDiscountFeature\nJavapublic class ZenskarDiscountFeature {\n    public String unit;  // percentage of discount\n}\nZenskarPerUnitPricing\nJavapublic class ZenskarPerUnitPricing {\n  public Decimal unitAmount;\n}\nZenskarPricing\nJavapublic class ZenskarPricing {\n    public String zenskarPricingId;\n    public String Name;\n    public String Description;\n    public Boolean isRecurring;\n    public String linkID;\n    public ZenskarBillingPeriod billingPeriod;\n    public ZenskarQuantity quantity;\n    public String pricingType;  // per_unit, flat_fee\n    public List<ZenskarDiscountFeature> discounts;\n    public String oppLineItemId;\n}\nZenskarPricingAndProductId\nJavapublic class ZenskarPricingAndProductId {\n    public String productID;\n    public String pricingID;\n    public String oppLineItemId;\n}\nZenskarProduct\nJavapublic class ZenskarProduct {\n    public String zenskarProductId;\n    public String name;\n    public String sku;\n    public String description;\n}\nZenskarQuantity\nJavapublic class ZenskarQuantity {\n    public Decimal quantity;\n    public String unit;\n}\nZenskarTags\nJavapublic class ZenskarTags {\n    public String label;\n    public String value;\n}\n\n \nFor more on Apex classes, see Apex Developer Guide.\n\nCustom Fields Summary\nAccount\n\nAutoCharge Invoice (Zenskar)\nCustomerID (Zenskar)\nExternal ID (Zenskar)\n\nOpportunity\n\nContract End Date (Zenskar)\nContract Renew Policy (Zenskar)\n\nProduct\n\nProductID (Zenskar)\n\nPriceBookEntry\n\nLinkID (Zenskar)\n\nFor details on creating custom fields, refer to Salesforce Custom Fields.Updated 17 days ago Use default FlowNetSuiteTable of Contents\n\nSome example Flows\n\nSyncing Customers to Zenskar\nSyncing Contracts\n\nPackage components\n\nApex Actions\nZenskar Create Product\n\nApex classes\n\nZenskarAddress\nZenskarBillingPeriod\nZenskarContract\nZenskarCustomer\nZenskarDiscountFeature\nZenskarPerUnitPricing\nZenskarPricing\nZenskarPricingAndProductId\nZenskarProduct\nZenskarQuantity\nZenskarTags\n\nCustom Fields Summary\n\nAccount\nOpportunity\nProduct\nPriceBookEntry\n\n"
  },
  {
    "id": "chunk_19",
    "document": "Credit notes.txt",
    "chunk_index": 0,
    "content": "Credit notes\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceCredit notesSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Credit notesA credit note is a document issued by a seller to a buyer, indicating a reduction in the amount that the buyer owes to the seller.\n🔖Note\nApproved, partially paid, and paid invoices cannot be edited. Therefore, credit notes must be issued to amend such invoices.\nDraft invoices can be directly edited. Therefore, credit notes do not apply to draft invoices.\nRefer to the documentation on the life cycle of a invoice for more details.\nSome prominent reasons for issuing a credit note are listed below:\n\nBilling errors: if the buyer was overcharged (e.g., an incorrect amount was invoiced), a credit note corrects the error.\nDiscounts: sometimes, sellers issue credit notes as a result of post-sale discounts or price adjustments.\nReturns: if the buyer returns goods or products, the seller issues a credit note to reduce the amount owed.\nDamaged goods: if goods received by the buyer are damaged or defective, the seller may issue a credit note to reflect the compensation or price reduction.\n\nCreate a credit note\n\nNavigate to the Invoices page in the left side panel.\nSelect the approved, partially paid, or paid invoice against which you wish to issue a credit note.\n\nOn the View Invoice page, click on the ISSUE CREDIT NOTE button, as shown below:\n\nFill in the credit note details, and click on the Submit button on the Issue Credit Note form, as shown below:\n\nA new invoice will be generated. The credit note will appear as a line item in the new invoice.\n\nView credit notes\nTo view all credit notes issued against a specific invoice, navigate to the Credit Notes tab of the View Invoice page  of the invoice you are interested in.\n\nTo view all credit notes Navigate to Invoices > Credit Notes in the left side panel.\nUpdated 14 days ago Generate invoicesPaymentsTable of Contents\nCreate a credit note\nView credit notes\n\n"
  },
  {
    "id": "chunk_20",
    "document": "Credits.txt",
    "chunk_index": 0,
    "content": "Credits\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceCreditsSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by CreditsWith Zenskar, every customer in your account has a dedicated credit balance that enables you to issue credit and debit adjustments. Adjustments in the credit balance could be a credit (meaning you owe them money) or a debit (meaning they owe you money). You can do these credit/debit adjustments from the customers page.\n\nThe flexibility to make these adjustments empowers you to handle various scenarios, such as refunds, promotional credits, or outstanding payments seamlessly. The balance on the customer's account, derived from the credit and debit adjustments, can be seamlessly applied to future invoices. This simplifies the billing process, allowing you to automatically utilise the available credit balance, reducing manual effort, and streamlining the payment cycle.\n\nThese are adjustments, represented as a ledger of transactions. This serves as an immutable audit trail for every customer. It captures all the credit and debit adjustments, ensuring transparency and accountability.Updated 17 days ago Hierarchy of default accountsRevenue recognition\n\n"
  },
  {
    "id": "chunk_21",
    "document": "Custom currency.txt",
    "chunk_index": 0,
    "content": "Custom currency\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceCustom currencySearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Custom currencyThe default currency used for invoice generation in Zenskar is the US Dollar (USD). However, Zenskar helps you generate invoices in a currency of your choice using the custom currency  feature.\n📚NoteMinimum commitment can be applied at the level of a product and\\or at the level of the contract.\nYou can add a payment terms feature node to the contract by clicking on the + Custom Currency button.\n\nCurrency codes\nCountryCurrencyCodeAFGHANISTANAfghaniAFNALBANIALekALLALGERIAAlgerian DinarDZDAMERICAN SAMOAUS DollarUSDANDORRAEuroEURANGOLAKwanzaAOAANGUILLAEast Caribbean DollarXCDANTARCTICANo universal currencyANTIGUA AND BARBUDAEast Caribbean DollarXCDARGENTINAArgentine PesoARSARMENIAArmenian DramAMDARUBAAruban FlorinAWGAUSTRALIAAustralian DollarAUDAUSTRIAEuroEURAZERBAIJANAzerbaijanian ManatAZNBAHAMAS (THE)Bahamian DollarBSDBAHRAINBahraini DinarBHDBANGLADESHTakaBDTBARBADOSBarbados DollarBBDBELARUSBelarussian RubleBYNBELGIUMEuroEURBELIZEBelize DollarBZDBENINCFA Franc BCEAOXOFBERMUDABermudian DollarBMDBHUTANNgultrumBTNBHUTANIndian RupeeINRBOLIVIA (PLURINATIONAL STATE OF)BolivianoBOBBOLIVIA (PLURINATIONAL STATE OF)MvdolBOVBONAIRE, SINT EUSTATIUS AND SABAUS DollarUSDBOSNIA AND HERZEGOVINAConvertible MarkBAMBOTSWANAPulaBWPBOUVET ISLANDNorwegian KroneNOKBRAZILBrazilian RealBRLBRITISH INDIAN OCEAN TERRITORY (THE)US DollarUSDBRUNEI DARUSSALAMBrunei DollarBNDBULGARIABulgarian LevBGNBURKINA FASOCFA Franc BCEAOXOFBURUNDIBurundi FrancBIFCABO VERDECabo Verde EscudoCVECAMBODIARielKHRCAMEROONCFA Franc BEACXAFCANADACanadian DollarCADCAYMAN ISLANDS (THE)Cayman Islands DollarKYDCENTRAL AFRICAN REPUBLIC (THE)CFA Franc BEACXAFCHADCFA Franc BEACXAFCHILEUnidad de FomentoCLFCHILEChilean PesoCLPCHINAYuan RenminbiCNYCHRISTMAS ISLANDAustralian DollarAUDCOCOS (KEELING) ISLANDS (THE)Australian DollarAUDCOLOMBIAColombian PesoCOPCOLOMBIAUnidad de Valor RealCOUCOMOROS (THE)Comoro FrancKMFCONGO (THE DEMOCRATIC REPUBLIC OF THE)Congolese FrancCDFCONGO (THE)CFA Franc BEACXAFCOOK ISLANDS (THE)New Zealand DollarNZDCOSTA RICACosta Rican ColonCRCCROATIAEuroEURCUBAPeso ConvertibleCUCCUBACuban PesoCUPCURAÇAONetherlands Antillean GuilderANGCYPRUSEuroEURCZECH REPUBLIC (THE)Czech KorunaCZKCÔTE D'IVOIRECFA Franc BCEAOXOFDENMARKDanish KroneDKKDJIBOUTIDjibouti FrancDJFDOMINICAEast Caribbean DollarXCDDOMINICAN REPUBLIC (THE)Dominican PesoDOPECUADORUS DollarUSDEGYPTEgyptian PoundEGPEL SALVADOREl Salvador ColonSVCEL SALVADORUS DollarUSDEQUATORIAL GUINEACFA Franc BEACXAFERITREANakfaERNESTONIAEuroEURETHIOPIAEthiopian BirrETBEUROPEAN UNIONEuroEURFALKLAND ISLANDS (THE) [MALVINAS]Falkland Islands PoundFKPFAROE ISLANDS (THE)Danish KroneDKKFIJIFiji DollarFJDFINLANDEuroEURFRANCEEuroEURFRENCH GUIANAEuroEURFRENCH POLYNESIACFP FrancXPFFRENCH SOUTHERN TERRITORIES (THE)EuroEURGABONCFA Franc BEACXAFGAMBIA (THE)DalasiGMDGEORGIALariGELGERMANYEuroEURGHANAGhana CediGHSGIBRALTARGibraltar PoundGIPGREECEEuroEURGREENLANDDanish KroneDKKGRENADAEast Caribbean DollarXCDGUADELOUPEEuroEURGUAMUS DollarUSDGUATEMALAQuetzalGTQGUERNSEYPound SterlingGBPGUINEAGuinea FrancGNFGUINEA-BISSAUCFA Franc BCEAOXOFGUYANAGuyana DollarGYDHAITIGourdeHTGHAITIUS DollarUSDHEARD ISLAND AND McDONALD ISLANDSAustralian DollarAUDHOLY SEE (THE)EuroEURHONDURASLempiraHNLHONG KONGHong Kong DollarHKDHUNGARYForintHUFICELANDIceland KronaISKINDIAIndian RupeeINRINDONESIARupiahIDRINTERNATIONAL MONETARY FUND (IMF) SDR (Special Drawing Right)XDRIRAN (ISLAMIC REPUBLIC OF)Iranian RialIRRIRAQIraqi DinarIQDIRELANDEuroEURISLE OF MANPound SterlingGBPISRAELNew Israeli SheqelILSITALYEuroEURJAMAICAJamaican DollarJMDJAPANYenJPYJERSEYPound SterlingGBPJORDANJordanian DinarJODKAZAKHSTANTengeKZTKENYAKenyan ShillingKESKIRIBATIAustralian DollarAUDKOREA (THE DEMOCRATIC PEOPLE’S REPUBLIC OF)North Korean WonKPWKOREA (THE REPUBLIC OF)WonKRWKUWAITKuwaiti DinarKWDKYRGYZSTANSomKGSLAO PEOPLE’S DEMOCRATIC REPUBLIC (THE)KipLAKLATVIAEuroEURLEBANONLebanese PoundLBPLESOTHOLotiLSLLESOTHORandZARLIBERIALiberian DollarLRDLIBYALibyan DinarLYDLIECHTENSTEINSwiss FrancCHFLITHUANIAEuroEURLUXEMBOURGEuroEURMACAOPatacaMOPMADAGASCARMalagasy AriaryMGAMALAWIKwachaMWKMALAYSIAMalaysian RinggitMYRMALDIVESRufiyaaMVRMALICFA Franc BCEAOXOFMALTAEuroEURMARSHALL ISLANDS (THE)US DollarUSDMARTINIQUEEuroEURMAURITANIAOuguiyaMRUMAURITIUSMauritius RupeeMURMAYOTTEEuroEURMEMBER COUNTRIES OF THE AFRICAN DEVELOPMENT BANK GROUPADB Unit of AccountXUAMEXICOMexican PesoMXNMEXICOMexican Unidad de Inversion (UDI)MXVMICRONESIA (FEDERATED STATES OF)US DollarUSDMOLDOVA (THE REPUBLIC OF)Moldovan LeuMDLMONACOEuroEURMONGOLIATugrikMNTMONTENEGROEuroEURMONTSERRATEast Caribbean DollarXCDMOROCCOMoroccan DirhamMADMOZAMBIQUEMozambique MeticalMZNMYANMARKyatMMKNAMIBIANamibia DollarNADNAMIBIARandZARNAURUAustralian DollarAUDNEPALNepalese RupeeNPRNETHERLANDS (THE)EuroEURNEW CALEDONIACFP FrancXPFNEW ZEALANDNew Zealand DollarNZDNICARAGUACordoba OroNIONIGER (THE)CFA Franc BCEAOXOFNIGERIANairaNGNNIUENew Zealand DollarNZDNORFOLK ISLANDAustralian DollarAUDNORTHERN MARIANA ISLANDS (THE)US DollarUSDNORWAYNorwegian KroneNOKOMANRial OmaniOMRPAKISTANPakistan RupeePKRPALAUUS DollarUSDPALESTINE, STATE OFNo universal currencyPANAMABalboaPABPANAMAUS DollarUSDPAPUA NEW GUINEAKinaPGKPARAGUAYGuaraniPYGPERUNuevo SolPENPHILIPPINES (THE)Philippine PesoPHPPITCAIRNNew Zealand DollarNZDPOLANDZlotyPLNPORTUGALEuroEURPUERTO RICOUS DollarUSDQATARQatari RialQARREPUBLIC OF NORTH MACEDONIADenarMKDROMANIARomanian LeuRONRUSSIAN FEDERATION (THE)Russian RubleRUBRWANDARwanda FrancRWFRÉUNIONEuroEURSAINT BARTHÉLEMYEuroEURSAINT HELENA, ASCENSION AND TRISTAN DA CUNHASaint Helena PoundSHPSAINT KITTS AND NEVISEast Caribbean DollarXCDSAINT LUCIAEast Caribbean DollarXCDSAINT MARTIN (FRENCH PART)EuroEURSAINT PIERRE AND MIQUELONEuroEURSAINT VINCENT AND THE GRENADINESEast Caribbean DollarXCDSAMOATalaWSTSAN MARINOEuroEURSAO TOME AND PRINCIPEDobraSTNSAUDI ARABIASaudi RiyalSARSENEGALCFA Franc BCEAOXOFSERBIASerbian DinarRSDSEYCHELLESSeychelles RupeeSCRSIERRA LEONELeoneSLESINGAPORESingapore DollarSGDSINT MAARTEN (DUTCH PART)Netherlands Antillean GuilderANGSISTEMA UNITARIO DE COMPENSACION REGIONAL DE PAGOS \"SUCRE\"SucreXSUSLOVAKIAEuroEURSLOVENIAEuroEURSOLOMON ISLANDSSolomon Islands DollarSBDSOMALIASomali ShillingSOSSOUTH AFRICARandZARSOUTH GEORGIA AND THE SOUTH SANDWICH ISLANDSNo universal currencySOUTH SUDANSouth Sudanese PoundSSPSPAINEuroEURSRI LANKASri Lanka RupeeLKRSUDAN (THE)Sudanese PoundSDGSURINAMESurinam DollarSRDSVALBARD AND JAN MAYENNorwegian KroneNOKSWAZILANDLilangeniSZLSWEDENSwedish KronaSEKSWITZERLANDWIR EuroCHESWITZERLANDSwiss FrancCHFSWITZERLANDWIR FrancCHWSYRIAN ARAB REPUBLICSyrian PoundSYPTAIWAN (PROVINCE OF CHINA)New Taiwan DollarTWDTAJIKISTANSomoniTJSTANZANIA, UNITED REPUBLIC OFTanzanian ShillingTZSTHAILANDBahtTHBTIMOR-LESTEUS DollarUSDTOGOCFA Franc BCEAOXOFTOKELAUNew Zealand DollarNZDTONGAPa’angaTOPTRINIDAD AND TOBAGOTrinidad and Tobago DollarTTDTUNISIATunisian DinarTNDTURKEYTurkish LiraTRYTURKMENISTANTurkmenistan New ManatTMTTURKS AND CAICOS ISLANDS (THE)US DollarUSDTUVALUAustralian DollarAUDUGANDAUganda ShillingUGXUKRAINEHryvniaUAHUNITED ARAB EMIRATES (THE)UAE DirhamAEDUNITED KINGDOM OF GREAT BRITAIN AND NORTHERN IRELAND (THE)Pound SterlingGBPUNITED STATES MINOR OUTLYING ISLANDS (THE)US DollarUSDUNITED STATES OF AMERICA (THE)US DollarUSDUNITED STATES OF AMERICA (THE)US Dollar (Next day)USNURUGUAYUruguay Peso en Unidades Indexadas (URUIURUI)UYIURUGUAYPeso UruguayoUYUUZBEKISTANUzbekistan SumUZSVANUATUVatuVUVVENEZUELA (BOLIVARIAN REPUBLIC OF)BolivarVEFVENEZUELA (BOLIVARIAN REPUBLIC OF)BolivarVEDVIET NAMDongVNDVIRGIN ISLANDS (BRITISH)US DollarUSDVIRGIN ISLANDS (U.S.)US DollarUSDWALLIS AND FUTUNACFP FrancXPFWESTERN SAHARAMoroccan DirhamMADYEMENYemeni RialYERZAMBIAZambian KwachaZMWZIMBABWEZimbabwe DollarZWLÅLAND ISLANDSEuroEURUpdated 14 days ago Minimum commitmentPlansTable of Contents\nCurrency codes\n\n"
  },
  {
    "id": "chunk_22",
    "document": "Customer-facing portal.txt",
    "chunk_index": 0,
    "content": "Customer-facing portal\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceCustomer-facing portalSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Customer-facing portalProvides your customers complete information about their accounts.The customer-facing portal is designed to provide your customers complete information about their accounts. They can access historical data regarding invoices, payments, and entitlements.\n🔜Coming soonWork is in progress to add the following features to the customer portal:\nreports\ncontracts\nbilling information\ndefault payment methods\nbranding: logo and color options\n\nAccessing customer portal\n\nUse the left-side panel to navigate to the Customers page..\n\nClick on the user you are interested in to move to the customer-details page.\nClick on the kebab-menu located on the top-right corner, as shown in the image below.\nClick on the View Customer Portal option to view the customer portal.\n\n👍Customer portal can be embedded in your websiteTo help your customers to login and access the customer portal from your website, you can embed the customer portal in your website using an API provided by Zenskar.\nCustomer portal features\nInvoices\nAll the invoices associated with a customer are shown here with the following details: Invoice ID, Status, Invoice Total, Due Date, Amount Due, Billing Period, and Generated On.\n\nPayments\nPayments tab contains the history of transactions (for example, invoice payments, refunds).\n\nEntitlements\nEntitlements tab contains the list of entitlements associated with a customer.\n\nEdit Profile\nYour customer can access their Profile page by clicking on the profile drop-down menu located at the top-right corner. They can view or edit their profile.\n\nUse Zenskar API to fetch customer-portal URL for a given customer\n\nGet your API key to authenticate your API requests.\nMake an HTTP POSTAPI request with the following details:\n\nParameterValueURLhttps://api.zenskar.com/customer/sessionorganisationNavigate to Settings > General.\nX-API-KEYGet your API key  to authenticate your API requests.customer_id1. Click on Customers in the left sidebar.\n2. Click on the row containing the customer you are interested in.\n3. On the page that displays the customer's details, copy the UUID from the URL, as shown below:\nreturn_urlThis is the URL where your customers will be returned to when they click on your logo on the customer portal. In the example below, the return_url is https://zenskar.com.idle_timeoutDuration of inactivity, in seconds, after which the customer portal session will expire. In the example below, idle_timeout is 86400seconds (24 hours).\nA sample API request made using the cURL tool is shown below:\ncURLcurl --location --request POST 'https://api.zenskar.com/customer/session' \\\n-H 'organisation: c3b949f8-633f-4fec-9105-e2b3a4d06b98' \\\n-H 'X-API-KEY: <your-api-key>' \\\n-H 'Content-Type: application/json' \\\n--data-raw '{\"customer_id\":\"063f8b97-f795-4f0b-89b4-88b114c83f44\",\"return_url\":\"https://zenskar.com\",\"idle_timeout\":86400}'\nA sample response is shown below:\n{\n    \"redirect_url\": \"https://customer.zenskar.com/session/c3b949f8-633f-4fec-9105-e2b3a4d06b98_063f8b97-f795-4f0b-89b4-88b114c83f44_xW7oVSJj3tIkmHX5XjSybRsxTvOqoHWNhR0Cf-Pe0aI?return_url=https://zenskar.com\"\n}Updated 17 days ago Webhook alertsBusiness entitiesTable of Contents\n\nAccessing customer portal\n\nCustomer portal features\n\nInvoices\nPayments\nEntitlements\n\nUse Zenskar API to fetch customer-portal URL for a given customer\n\n"
  },
  {
    "id": "chunk_23",
    "document": "Customers.txt",
    "chunk_index": 0,
    "content": "Customers\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceCustomersSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by CustomersOverview\nTo automate your billing process, you must add your customers' details to Zenskar.\nThere are three ways to add a customer in Zenskar:\n\nManually\n\n👨‍🔧 Add customers manually, one at a time\n🗈 Add customer(s) by uploading a CSV\n\n🌐 Zenskar APIs\n🔌 Connectors\n\n⚙️ Add a customer\nAdd customers manually, one at a time\n\nNavigate to the Customers page, and click on the ADD CUSTOMER button.\n\nFill all the necessary details in the Add Customer form.\n\nCustomer information\nFieldDescriptionNameFull name of the customerCustomer IDUnique ID assigned to the customer: this could be the ID assigned in the system from where the customer details are being imported (eg., CRM).EmailEmail address of the user.\nShipping address\nYou must fill in the complete address, zip code, city, state, country, and phone number.\n🚧ImportantEnsure that the customer details entered in these fields are exactly the same as the details in the other systems from where they are being imported.\nBusiness entity\nAssociate a business entity  with the customer.\n\nTax information\nManage tax-related data such as tax codes, exemptions, and rates for proper tax calculation and compliance with local tax laws. Add goods and services tax (GST) and value-added tax (VAT) related IDs applicable to the customers in the following jurisdictions:\nIndiaIND (GST)USAUSA (VAT)AustraliaAUS (GST)European UnionEU (VAT)SingaporeSG (VAT)FranceFR (VAT)\n\nCustom data\nYou can add custom JSON data. Custom data is additional customer metadata which can be used when creating custom aggregate queries.\n\nFor example, if one of your customers, the fictitious ACME corporation, has multiple users signed up for your product, you can generate a single bill for the multiple users and assign it to the company.\nJSON{\n  \"users\": [\n    \"[email protected]\",\n    \"[email protected]\"\n  ]\n}\nFor another example, if you want to store information about a customer's preferred method of communication and their time zone, you could do the following:\nJSON{\n  \"additional_info\": \n  \t{\n      \"preferred_communication\": \"email\", \"timezone\": \"PST\"\n    }\n}\nYou can exempt a customer from taxation by adding the following JSON:\nJSON{\n  \"exempt_tax\":true\n}\n\nAuto charge invoices\nAllow customers to configure payment settings, such as auto-charge options, for convenient and automated payment processing.\n\n🚧NoteYou must have a fully-configured and functioning payment gateway.\nEmail communications\nEnabling this setting will let your senders send emails to your customers.\n\nAdd customer(s) by uploading a Zenskar-compatible CSV\nYou can add a single customer or customers in bulk by uploading a Zenskar-compatible CSV file.\n\nNavigate to the Customers page, and click on the down arrow present on the + ADD CUSTOMER button.\nClick on the Upload CSV button.\nThe Upload CSV dialog pops up.\n\nUse the Click to upload or drag and drop card to upload the CSV file containing your customers' data.\n\n🚧NoteThe CSV has to be in a Zenskar-compatible format.\n\nClick on the IMPORT CSV DATA button to add your customers' data to Zenskar.\n\nSample CSV file\n\nYou can download a sample Zenskar-compatible CSV file by clicking the Download sample CSV file card on the Upload CSV dialog.\n\nYou can add your customers' data to this CSV file.\n\n🚧NoteRemember to remove the example John Doe user from the sample CSV before adding your data.\nAdd a customer using the Zenskar APIs\nYou can add your customers' details to Zenskar using the create customer REST API.\nAdd a customer using Zesnkar connectors\nZenskar's third-party integrations will help you perform two-way sync of your customers' data. Zenskar provides connectors for many well-known CRM, CPQ, and ERP software systems.\n\nNavigate to Integrationsto view the list of connectors available. Follow the third-party-specific documentation to establish a connection.\n\n🔖Did not find the connector you were looking for?Contact [email protected]. to raise a request for a new connector.\n🔍 View customer details\n\nNavigate to Customers in the left side panel.\nClick on the row containing the customer you are interested in.\nOn the View Customerpage, you can view details such as invoices, contracts, entitlements, payments, journal entries, monitoring, email logs, integrations, wallet details, and child customers.\n\nView and add secondary contacts\n📖DefinitionYou manage multiple contacts associated with a customer as secondary contacts. You can choose what type of communication is sent to each secondary contact.\n\nNavigate to Customers in the left side panel.\nClick on the row containing the customer you are interested in.\nOn the View Customerpage, click on the kebab menu located beside the Edit button to reveal the Manage Secondary Contacts menu option, as shown below.\n\nOn the Manage Secondary Contacts form, click on the + ADD CONTACT button to add a new secondary contact.\n\nOn the Edit Customer form, fill in the required details.\n\nWallet\nCredits can be given to a customer for promotional or other purposes. These credits are added to their wallet. Customers can use these credits to reduce their invoice due amount.\nCreate wallet\n\nNavigate to Customers in the left side panel.\nClick on the row containing the customer you are interested in.\nOn the View Customerpage, move to the Wallet Details tab.\nClick on the +ADD CUSTOMER CREDIT WALLET button to reveal the Add New Wallet form.\nFill in the details, and click on the ADD button.\n\n🚧NoteOnly one wallet can be added for each currency.\n\nAdjust wallet balance\n\nNavigate to Customers in the left side panel.\nClick on the row containing the customer you are interested in.\nOn the View Customerpage, move to the Wallet Details tab.\nClick on the Adjust link.\nFill in the details in the Adjust Balance form, and click APPLY button.\n\nAdd to customer balance: give customer more credits for promotional or other purposes.\nDeduct from customer balance: deduct credits for products or services provided or to settle invoice.\nCustomer-facing portal\nRefer customer-facing portal documentation for more details.Updated 16 days ago AnalyticsMeteringTable of Contents\n\nOverview\n\n⚙️ Add a customer\n\nAdd customers manually, one at a time\nAdd customer(s) by uploading a Zenskar-compatible CSV\nAdd a customer using the Zenskar APIs\nAdd a customer using Zesnkar connectors\n\n🔍 View customer details\n\nView and add secondary contacts\nWallet\nCustomer-facing portal\n\n"
  },
  {
    "id": "chunk_24",
    "document": "Data ingestion.txt",
    "chunk_index": 0,
    "content": "Data ingestion\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceData ingestionSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Data ingestionData ingestion is the process of moving or replicating data from data sources to destination.\nData-ingestion methodDetailsData ingestion via data-source connectorsZenskar can pull usage data from your data infrastructure using data-source-specific connectors. Zenskar connects with your data sources, such as databases, data warehouses, comma-separated-value files, and spreadsheets. Subsequently, we move or replicate (pull) the data on our data infrastructure (destination) for further processing.Data ingestion via APIsYou can push usage data to Zenskar by creating data-ingestion APIs in Zenskar and integrating these APIs in your application workflow. Further, Zenskar exposes APIs to view or manipulate other kinds of data, such as customers, contracts, and invoices.Upload Zenskar-compatible CSVZenskar allows you to upload a Zenskar-compatible CSV.Web formZenskar provides you a web form to enter raw metrics manually.\n📚NoteZenskar stores all ingested data in the form of RDBMS tables. This is true irrespective of the ingestion method: push or pull.Tables are database objects that contain all the data in a database. In tables, data is logically organized in a row-and-column format similar to a spreadsheet.Updated 17 days ago MeteringData sources: sync data to Zenskar\n\n"
  },
  {
    "id": "chunk_25",
    "document": "Data migration and integration options.txt",
    "chunk_index": 0,
    "content": "Data migration and integration options\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceData migration and integration optionsSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Data migration and integration optionsData migration: for historical data\nDatasetMigrating historical data (sales-led and product-led motions)CustomersThe following options are available:• Migrate customer data using Zenskar's third-party-software connectors.\n• Push customer data to Zenskar using Zenskar's customer-data-ingestion APIs.\n• Upload Zenskar-compatible CSV containing customer data.\n• Create customers manually in the Zenskar application.Usage dataThe following options are available:• Let Zenskar pull usage data from your data sources.\n• Push usage data to Zenskar using Zenskar's usage-data-ingestion APIs.\n• Upload a Zenskar-compatible CSV containing usage data.ContractsThe following options are available:• Migrate contract data using Zenskar's CRM connector.\n• Push contract data to Zenskar using Zenskar's contract-data-ingestion APIs.\n• Create contracts or plans manually in the Zenskar application.\n• Upload a Zenskar-compatible CSV containing contract data.\nData integration: for contemporary data\nDatasetSales-led motionProduct-led motionCustomers\n\n*Recommended**:\n• Sync customer data using Zenskar's third-party-software connectors.\n• Create customers manually  in the Zenskar application.\\\n\n*Available**:\n•  Push customer data to Zenskar using Zenskar's customer-data-ingestion APIs .\\\n\n*Available but not recommended**:\n• Upload Zenskar-compatible CSV containing customer data.\n\nPush_ customer data to Zenskar using Zenskar's customer-data-ingestion APIs.\nUsage data\n\n*Recommended**:\n• Let Zenskar pull usage data from your data sources.\n• Push usage data to Zenskar using Zenskar's usage-data-ingestion APIs.\\\n\n*Available but not recommended**:\n• Upload a Zenskar-compatible CSV containing usage data.\n\n*Recommended**:\n• Let Zenskar pull usage data from your data sources .\n• Push usage data to Zenskar using Zenskar's usage-data-ingestion APIs .\\\n\n*Available but not recommended**:\n• Upload a Zenskar-compatible CSV containing usage data.\n\nContracts\n\n*Recommended**:\n• Sync contract data using Zenskar's CRM connector.\n• Create contracts or plans manually in the Zenskar application.\\\n\n*Available**:\n• Push contract data to Zenskar using Zenskar's contract-data-ingestion APIs.\\\n\n*Available but not recommended**:\n• Upload a Zenskar-compatible CSV containing contract data.\n\n• Push contract data to Zenskar using Zenskar's contract-data-ingestion APIs, and receive notifications via webhooks.\n👍 Pros and 👎 cons of various data-ingestion methods\nData-ingestion methodPros and cons of letting Zenskar pull usage data from your data sources.Pros and cons of using data-ingestion APIs to push data to Zenskar.Pros and cons of manually uploading a Zenskar-compatible CSV.Pros and cons of manually entering events in the web form.\nImportant third-party software integrations\nThe following table lists all the available third-party\nConnectorTypeCustomersContractsProductsInvoicesPaymentsCredit notesJournal entriesTaxAvalara AvaTaxTaxAutomates tax calculations in invoices.HubSpotCRM• Import only\n• Export only\n• Import and export• Import only\n• Export only\n• Import and export• Import only\n• Export only\n• Import and exportNetSuiteERPExport onlyExport onlyQuickBooksERPExport onlyExport onlyExport onlyExport onlyExport onlySalesforceCPQExport onlyExport onlyStripePayment Gateway• Import only\n• Export only\n• Import and exportWhen a customer clicks on the PAY ONLINE link in an  invoice, a Stripe checkout session is created for the customer to complete the payment.XeroERPExport onlyExport onlyExport onlyExport onlyExport onlyZoho BooksERPExport onlyExport onlyExport only\nUpdated 17 days ago What does Zenskar implementation entail?Integrating your ERP software with ZenskarTable of Contents\nData migration: for historical data\nData integration: for contemporary data\n👍 Pros and 👎 cons of various data-ingestion methods\nImportant third-party software integrations\n\n"
  },
  {
    "id": "chunk_26",
    "document": "Data sources_ query remote data sources.txt",
    "chunk_index": 0,
    "content": "Data sources: query remote data sources\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceData sources: query remote data sourcesSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Data sources: query remote data sourcesOverview\nZenskar's data-source connectors are convenient tools for transporting data from your data infrastructure to Zenskar's data infrastructure. However, transporting large amounts of data is costly. Querying your data sources remotely simplifies workflows.\n🚧Prerequisites\nYou must set up a database user with read permissions.\nYou must allow Zenskar appropriate network access.\n\n🐕‍🦺 Set up guide\n\nFollow the instructions provided in the related documentation to set up a data-source connector that supports remote queries. Zenskar can query remotely the following data sources:\n\nSupported data sourcesAmazon AthenaDatabricksMySQLPostgreSQLRedShift\n\nIn the Source Access section of the Add New Data Source page, select Directly from Source:\n\n🚧NoteIf you would like Zenskar to ingest your existing data and sync periodically, select the Sync to Zenskar option in the Source Access section of the Add New Data Source page.\n👍 Pros and 👎 cons\n👍 Pros👎 ConsData is always fresh because there is only one source of data and no sync latency.Zenskar will depend on your data infrastructure to perform various actions, such as invoice generation and modifying journal entries. Therefore, a downtime in your data infrastructure will disrupt Zenskar's workflow.Ideal for large databases that contain more than 30 GB.Since there is only one source of truth for data, the audit trail is simplified.Real-time invoicing is possible.Existing SQL queries will work without any modifications.Updated 17 days ago Data sources: sync data to ZenskarUsage events: data-ingestion APIsTable of Contents\nOverview\n🐕‍🦺 Set up guide\n👍 Pros and 👎 cons\n\n"
  },
  {
    "id": "chunk_27",
    "document": "Data sources_ sync data to Zenskar.txt",
    "chunk_index": 0,
    "content": "Data sources: sync data to Zenskar\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceData sources: sync data to ZenskarSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Data sources: sync data to ZenskarZenskar connects with your data source, such as a database, data warehouse, comma-separated-value file, or spreadsheet.Overview\nData ingestion is the process of moving or replicating data from data source to destination. Zenskar connects with your data source, such as a database, data warehouse, comma-separated-value file, or spreadsheet. Subsequently, we move or replicate the data on our data infrastructure (destination) for further processing, as shown in the figure below.\n👍SecurityZenskar takes the security of your data seriously. All connection details and credentials are stored in a secure encrypted vault.\nFig. 1: Raw metrics or aggregates ingested via configured data sources.\n\nZenskar's data-source-specific connectors\nZenskar uses data-source-specific connectors to connect with your data sources and ingest data.\n👷Engineering effort requiredThe details needed for this step are source-type dependent. Therefore, some technical knowledge is expected to complete this step.\nTo set up a connector, do the following:\n\nSet Up Source: Provide a Source Name and select a Source Type from the drop-down. The list of available Zenskar connectors is given below.\nSource Config: Provide credentials and other configuration details to establish a connection with the data source. Refer the documentation of the connector you are interested in to know the configuration details.\n\n📚NoteIrrespective of the data source type, Zenkar stores all ingested data in the form of RDBMS tables.Tables are database objects that contain all the data in a database. In tables, data is logically organized in a row-and-column format similar to a spreadsheet.\nZenskar connectors\nData sourceDescriptionAuth0Auth0 is a flexible, drop-in solution to add authentication and authorization services to your applications.BigQueryBigQuery is a serverless and cost-effective enterprise data warehouse that works across clouds and scales with your data.CockroachDBA distributed SQL database designed for speed, scale, and survival.Google SheetsAn online spreadsheet editor from Google.LookerYour unified business intelligence platform. Self-service. Governed. Embedded.MetabaseAn open-source business intelligence platform.MongoDBCross-platform document-oriented database.MySQLAn open-source relational database management system.PostgreSQLPostgreSQL is a powerful, open source object-relational database system with over 35 years of active development that has earned it a strong reputation for reliability, feature robustness, and performance.QuickBooksAn online accounting software for small businesses.SnowflakeData platform as a self-managed service.RedshiftAmazon Redshift is a data warehouse product which forms part of the larger cloud-computing platform Amazon Web Services.\n\nAn example: using the Google Sheets connector to let Zenskar ingest data from your data source\nLet us assume:\n\nYou are a telecom provider who sells call minutes, SMSes, and internet data\nYou store raw metrics related to a customer's daily usage in a Google Sheets sheet\nYour Google Sheets sheet has the following schema:\n\nCustomer IDTimestampCall MinutesSMSData8578d067-b019-471c-b28c-5a3f35a3d05a2024-04-16 11:33:38.00056.0433.78578d067-b019-471c-b28c-5a3f35a3d05a2024-04-17 11:25:02.00023.0122.08578d067-b019-471c-b28c-5a3f35a3d05a2024-04-18 11:25:43.00034.0161.8\nFig. 2: The Google Sheets data source.\nStep 1: add a new Google Sheets data source connector\n\nTo add and configure a connector, navigate to Metering > Data Sources in the left sidebar.\nClick on the + ADD DATA SOURCE button to land on the Add New Data Source page.\nProvide a descriptive name for the data source in the Source Name.\nProvide the necessary configuration details.\nClick on the VALIDATE SOURCE button.\n\nFig. 3: Google Sheets data source connector set up.\n\nYou will be automatically be taken to a page where you can select the tables and columns based on which you wish Zenskar to ingest data.\n\nThe destination table schema and name are derived from the schema and name, respectively, of the sheet\nColumns in the sheet become columns in Zenskar's table\n\nFig. 4: Sheets in the source Google Sheets become tables in Zenskar.\nFig. 5: Select tables you wish Zenskar to ingest data into.\nFig. 6: Call_SMS_Data_Usage table has been selected for data ingestion.\nFig. 7: Select columns in the Call_SMS_Data_Usage table.\n\nIf you make any changes to the Google Sheets schema, during or after configuring the connector, you can use the REFRESH SOURCE button to refresh the schema information in Zenskar.\n\nFig. 8: Refresh schema information in Zenskar.\n\nYou can select a sync frequency. Zenskar will periodically sync data based on this frequency.\n\nFig. 9: Configuring sync frequency.\n\nClick the FINISH SETUP button to save the configuration and exit.\n\nStep 2: data processing to extract usage aggregates\n📚NoteIrrespective of the data source type, Zenkar stores all ingested data in the form of RDBMS tables.Tables are database objects that contain all the data in a database. In tables, data is logically organized in a row-and-column format similar to a spreadsheet.\nThe ingested raw data must be processed to derive billing determinants that will help Zenskar generate invoices. Zenskar uses SQL to derive aggregates from the raw data.\n\nTo set up a usage aggregate, navigate to Metering > Usage Aggregatesin the left sidebar.\nClick on the + ADD NEW AGGREGATE button to land on the Add New Aggregate page.\nSelect the destination table that Zenskar has created to ingest data from your data source.\n\nDestination table nameStructure of the destination table namegooglesheets-_customer_daily_usage.call_sms_data_usage{Data_source_connector_name}.{table_name}\n\nRefer the documentation on usage aggregates to understand how to use the visual builder and the SQL builder to create aggregation queries.\n\n👍 Pros and 👎 cons\n👍 Pros👎 ConsNo engineering bandwidth is required for integrating Zenskar with your system.Initial data sync can take some time, depending on the size of the data.Invoices can be generated quickly.Data-ingestion frequency depends on the sync schedule. This does not matter if you are only interested in periodic billing.Zenskar allows you to edit usage data that has been synced.Viewing usage data is not supported.\n🔖NoteIf data ingestion via Zenskar's data-source connectors does not suit your needs, you may look at the following options:\nData ingestion via APIs\nData ingestion via Zenskar-compatible CSV file\nData ingestion via Zenskar's web form\nUpdated 17 days ago Data ingestionData sources: query remote data sourcesTable of Contents\n\nOverview\n\nZenskar's data-source-specific connectors\n\nZenskar connectors\n\nAn example: using the Google Sheets connector to let Zenskar ingest data from your data source\n\nStep 1: add a new Google Sheets data source connector\nStep 2: data processing to extract usage aggregates\n\n👍 Pros and 👎 cons\n\n"
  },
  {
    "id": "chunk_28",
    "document": "Databricks Lakehouse.txt",
    "chunk_index": 0,
    "content": "Databricks Lakehouse\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceDatabricks LakehouseSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Databricks Lakehouse\n🐕‍🦺 Setup guide\nZenskar's Databricks data-source connector syncs data with Delta Lake on Databricks Lakehouse. Each stream is written to its own Delta table.\n🚧NoteYou must use Unity Catalog to use this connector.\n⚙️ Step 1: set up data source and type\n\nLog into your Zenskar account.\nIn the left navigation bar, click Metering > Data Sources.\nIn the top-right corner, click + ADD DATA SOURCE.\nIn the Set Up Source section of the Add New Data Source page, enter a name for the Databricks data source connection.\nSelect Databricks from the Source Type drop-down menu.\n\n⚙️ Step 2: configure data source\nIn the Source Config section of the Add New Data Source page, fill in the following details:\n\nDatabricks Access Token: refer the Databricks authentication section.\nWorkspace Hostname: the hostname of the Databricks workspace. Refer the Section Retrieve Databricks workspace details section.\n\nA workspace is a Databricks deployment in a cloud service account. It provides a unified environment for working with Databricks assets for a specified set of users.\n\nPort Number: refer the Retrieve Databricks workspace details section.\nHTTP Path: refer the Retrieve Databricks workspace details section.\n\nRetrieve Databricks workspace details\n\nOpen the workspace console.\nOpen your SQL warehouse:\n\nOpen the Connection Details tab:\n\nDatabricks authentication\nGenerate access token\n\nOpen your workspace console.\nClick on the named drop-down menu at the top-right corner, and click on Settings option.\nNavigate to User Settings > Developer, and click on Generate new token, as shown below.\n\nEnter a description for the token and its lifetime. You can leave blank Lifetime (days) blank for a permanent token:\n\nSupported sync modes\nSync modeNotesFull refresh sync⚠️ Warning: this mode deletes all previously synced data in the configured bucket path.Incremental: append syncIncremental: append + dedupedNamespacesUpdated 13 days ago CockroachDBGoogle SheetsTable of Contents\n\n🐕‍🦺 Setup guide\n\n⚙️ Step 1: set up data source and type\n⚙️ Step 2: configure data source\n\nRetrieve Databricks workspace details\n\nDatabricks authentication\n\nSupported sync modes\n\n"
  },
  {
    "id": "chunk_29",
    "document": "DealHub.txt",
    "chunk_index": 0,
    "content": "DealHub\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceDealHubSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by DealHubStreamline your quote-to-revenue process. Issue proposals, close deals, manage contracts, and automate your subscriptions and billing in one unified platform.Updated 17 days ago Prepaid subscription with postpaid overagesHubSpot\n\n"
  },
  {
    "id": "chunk_30",
    "document": "Default Payment Method.txt",
    "chunk_index": 0,
    "content": "Default Payment Method\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceDefault Payment MethodSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Default Payment MethodZenskar allows you to add multiple payment methods for each customer. You can choose one of these methods as the default payment method. The system automatically tries an alternative payment method if the default payment method fails. This feature helps ensure revenue by minimizing payment failures and reducing customer inconvenience in case of payment method issues.Updated 17 days ago Payment MethodsPayment Gateways\n\n"
  },
  {
    "id": "chunk_31",
    "document": "Discount.txt",
    "chunk_index": 0,
    "content": "Discount\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceDiscountSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by DiscountThe discount feature allows you to deduct a certain percentage or fixed value from the usual cost of a service or product.\nFig. 1: Percent discount.\nFig. 2: Fixed discount.\n📚NoteDiscount can be applied at the level of a product and\\or at the level of the contract.\nFig. 3: Discount applied at the level of a product.\nFig. 4: Discount applied at the level of a contract.\nUpdated 17 days ago CreditsAvaTax\n\n"
  },
  {
    "id": "chunk_32",
    "document": "Document templates.txt",
    "chunk_index": 0,
    "content": "Document templates\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceDocument templatesSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Document templatesDocument templates help you to create document attachments for emails tailored to meet the demands of your customers.\n📚 Types of document templates\nThere are four types of document templates available in Zenskar:\n\nInvoice\nPayment receipt\nRefund receipt\nContract document\n\n⚙️ Create a document template\n\nNavigate to Communications > Document Templates in the left side-panel.\nYou will arrive at Document Templates page.\nOn the Document Templates page, click on the + ADD NEW DOCUMENT TEMPLATE button to land on the Add New Document Template page.\nOn the Add New Document Template page, enter the following details:\n\nName: any user-defined string that describes the template.\nDocument input type: select from HTML and text.\nDocument output type: select from PDF and HTML.\nAdditional options: you can add Zenskar-compatible JSON key-value pairs or override sample JSON data.\nTemplate data: you can leave this empty if you do not have HTML data. Zenskar will generate a sample HTML for you once you save the template. You can edit this HTML.\nYou can click on the Show Sample Data button to view sample JSON data that is used to create the final HTML or PDF output.\n\nJSON{\n  \"seller\": {\n    \"id\": \"888ae523-8878-4ed7-85cc\",\n    \"name\": \"Zenskar\",\n    \"address\": \"Cupertino<br/>California<br/>10029<br/>United States\"\n  },\n  \"customer\": {\n    \"name\": \"Acme Inc\",\n    \"email\": \"[email protected]\",\n    \"address\": \"Acme Inc<br/>Missouri<br/>65616<br/>United States\"\n  },\n  \"invoice_data\": {\n    \"id\": \"4dfbv54\",\n    \"invoice_date\": \"3rd March 2023\",\n    \"due_by\": \"9rd March 2023\",\n    \"total\": \"200\",\n    \"amount_due\": 200,\n    \"period\": {\n      \"from\": \"January 1, 2023\",\n      \"to\": \"January 31, 2023\"\n    },\n    \"payment_link\": \"https://zenskar.com/\",\n    \"invoice_numbers\": \"INV-202112\"\n  },\n  \"logo\": \"https://uploads-ssl.webflow.com/5fe2c7874ee3c6c56889bbd2/64b627b5cf2b8b7a17afe170_646f4a2343cb308828d8d20a_zenskar_logo.png\",\n  \"billing_duration\": \"1-31 Jan 2023\",\n  \"name\": \"Zenskar\",\n  \"address\": \"Road Runner<br/>Missouri<br/>65616<br/>United States\",\n  \"document_lines\": [\n    {\n      \"item_name\": \"Free Units\",\n      \"templating_data\": {\n        \"free-units\": true,\n        \"formatted_unit_price\": \"$0/minute\",\n        \"formatted_amount\": \"$0.00\",\n        \"unit_price\": 0,\n        \"free_units_granted\": 100,\n        \"amount\": 0,\n        \"formatted_free_units_granted\": \"100 minutes\",\n        \"formatted_total_free_units\": \"200 minutes\",\n        \"indent_level\": 1\n      }\n    },\n    {\n      \"item_name\": \"Volume Pricing\",\n      \"templating_data\": {\n        \"volume-pricing\": true,\n        \"formatted_quantity\": \"200 GBs\",\n        \"formatted_unit_price\": \"$1/GB\",\n        \"formatted_amount\": \"$200.00\",\n        \"quantity\": 2000,\n        \"unit_price\": 1,\n        \"amount\": 2000,\n        \"indent_level\": 1\n      }\n    }\n  ],\n  \"ach_details\": {\n    \"bank_name\": \"TEST BANK\",\n    \"routing_number\": \"110000000\",\n    \"account_number\": \"test_5e3f52c6b3a3\",\n    \"swift_code\": \"TSTEZ122\"\n  },\n  \"payment_info\": {\n    \"id\": \"pi_3N1Oz5ITOeIKeOoD03XavSna\",\n    \"receipt_number\": \"4ac7-1\",\n    \"created_at\": \"February 27, 2023\",\n    \"payment_method\": \"visa - 4242\",\n    \"amount\": \"$200\"\n  },\n  \"payment_receipt\": {\n    \"receipt_number\": \"PR-109238\"\n  }\n}\n\n⚙️ Edit a document template\n\nNavigate to Communications > Document Templates in the left side-panel.\nYou will arrive at Document Templates page.\nClick on the template you wish to edit.\nMake the necessary edits and click the SAVE CHANGES button.\n\nPreview a document template\nYou can preview the output PDF or HTML by clicking the Preview button, as shown below.\n\nEdit the HTML of a document template\nYou can edit the document template HTML by clicking the Edit HTML button, as shown below.\n\n📚TipYou can edit the document template HTML directly in the Edit HML form. However, for a better editing experience, it is recommended that you copy the HTML from the form and paste it into your favorite code editor.\nCorresponding to the sample JSON data shown above, the following is the HTML generated by Zenskar. Use this HTML as a starting point for further customizations.\nHTML<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\n    <link\n      href=\"https://fonts.googleapis.com/css2?family=Figtree:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap\"\n      rel=\"stylesheet\"\n    />\n    <meta charset=\"utf-8\" />\n    <title>Invoice</title>\n    <style>\n      body {\n        font-family: 'Figtree', sans-serif;\n        margin: 0;\n        font-display: swap;\n      }\n\n      .invoice-box {\n        max-width: 1200px;\n        margin: auto;\n        border: 1px solid #eee;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.15);\n        font-size: 14px;\n        line-height: 24px;\n        color: #555;\n        width: 100%;\n      }\n\n      .invoice-box td.top-header {\n        width: 50% !important;\n      }\n\n      .invoice-box .float-right {\n        float: right;\n        padding-right: 50px;\n      }\n\n      .invoice-box table {\n        width: 100%;\n        text-align: left;\n        line-height: inherit;\n        border-collapse: collapse;\n      }\n\n      .invoice-box table td {\n        padding: 5px;\n        vertical-align: top;\n      }\n\n      .invoice-box table tr.top table td {\n        padding-bottom: 20px;\n      }\n\n      .invoice-box table tr.top table td.title {\n        font-size: 45px;\n        line-height: 45px;\n        color: #333;\n      }\n\n      .invoice-box table tr.information table td {\n        padding-bottom: 20px;\n      }\n\n      .invoice-box table tr.information table td:nth-child(2) {\n        padding-bottom: 20px;\n        padding-right: 100px !important;\n        text-align: left;\n      }\n\n      .invoice-box table tr.heading td {\n        background: #eee;\n        border-bottom: 1px solid #ddd;\n        font-weight: bold;\n      }\n\n      .invoice-box table td.header-row {\n        background: #eee;\n        border-bottom: 1px solid #ddd;\n        font-weight: bold;\n      }\n\n      .invoice-box table tr.details td {\n        padding-bottom: 20px;\n      }\n\n      /* .invoice-box table tr.item td {\n        border-bottom: 1px solid #eee;\n      } */\n\n      .invoice-box table tr.item.indent-0 {\n        border-top: 1px solid #eee;\n      }\n\n      .invoice-box table tr.item.last td {\n        border-bottom: none;\n      }\n\n      .invoice-box table tr.item td.row {\n        display: flex;\n      }\n\n      .invoice-box table tr.item td .col {\n        display: inline-block;\n        flex: 1;\n      }\n\n      .right-indent {\n        text-align: right;\n        padding-left: 10px !important;\n      }\n\n      .indent-2 {\n        padding-left: 75px !important;\n      }\n\n      .indent-1 {\n        padding-left: 50px !important;\n      }\n\n      .indent-0 {\n        padding-left: 25px !important;\n      }\n\n      .big-block {\n        width: 40% !important;\n      }\n\n      .small-block {\n        width: 20% !important;\n      }\n\n      .invoice-box table tr.item td .indent-1 {\n        white-space: nowrap;\n        padding-left: 50px;\n        text-align: left;\n      }\n\n      .invoice-box table tr.item td .indent-2 {\n        padding-left: 40px;\n      }\n\n      .invoice-box table tr.total {\n        border-top: 1px solid #ddd;\n      }\n\n      .invoice-box table tr.total td:nth-child(2) {\n        /* border-top: 2px solid #eee; */\n        font-weight: bold;\n      }\n\n      .invoice-box table tr.total td:nth-child(1) {\n        text-align: right;\n      }\n\n      @media only screen and (max-width: 600px) {\n        .invoice-box table tr.top table td {\n          width: 100%;\n          display: block;\n          text-align: center;\n        }\n\n        .invoice-box table tr.information table td {\n          width: 100%;\n          display: block;\n          text-align: center;\n        }\n      }\n\n      @media print {\n        .invoice-box {\n          max-width: unset;\n          box-shadow: none;\n          border: 0px;\n        }\n\n        .footer {\n          bottom: 0 !important;\n        }\n\n        .main-section {\n          min-height: 1100px;\n        }\n      }\n      @media print {\n        body {\n          -webkit-print-color-adjust: exact;\n        }\n      }\n      @media print {\n        .pagebreak {\n          page-break-before: always;\n        }\n      }\n    </style>\n    <style>\n      .invoice-header {\n        padding-top: 70px;\n        background-color: #f7f8f9;\n      }\n      .invoice-header-row {\n        height: 60px;\n        display: flex;\n      }\n      .invoice-header .title {\n        color: #1a1a1a;\n        font-weight: 800;\n        font-size: 40px;\n        text-transform: uppercase;\n        display: inline-block;\n        padding-left: 62px;\n        flex-grow: 1;\n        border-left: 8px solid #1a1a1a;\n      }\n      .invoice-header .logo {\n        height: 60px;\n        display: inline-block;\n        padding-right: 70px;\n      }\n      .primary-details {\n        padding: 35px 70px;\n        display: flex;\n      }\n      .details-col {\n        flex: 1;\n        margin: 0;\n      }\n      .details-row {\n        display: flex;\n      }\n      .details-col dt {\n        color: #707880;\n        display: inline-block;\n        flex-basis: 100px;\n        flex-shrink: 0;\n      }\n      .details-col dd {\n        color: #1a1a1a;\n        font-weight: bold;\n        display: inline-block;\n        margin: 0;\n        flex-grow: 1;\n      }\n      .main-section {\n        padding: 27px 70px 40px;\n      }\n      .secondary-details {\n        display: flex;\n        border-bottom: 2px solid #707880;\n        padding-bottom: 14px;\n      }\n      .address-header {\n        font-weight: bold;\n      }\n      .address {\n        padding-top: 7px;\n        padding-bottom: 7px;\n      }\n      b.customer-email {\n        color: #1a1a1a;\n      }\n      .bill-amount {\n        padding-top: 14px;\n        text-align: right;\n      }\n      .bill-amount .amount-due {\n        font-weight: 900;\n        font-size: 26px;\n        line-height: 32px;\n        color: #1a1a1a;\n      }\n\n      .bill-amount .due-date {\n        color: #707880;\n        font-weight: 600;\n      }\n\n      .bill-amount .payment-button {\n        display: inline-block;\n        border: 1px solid #5046e4;\n        border-radius: 2px;\n        width: 144px;\n        height: 32px;\n        line-height: 32px;\n        margin-top: 8px;\n        font-weight: bold;\n        font-size: 12px;\n        text-transform: uppercase;\n        color: #5046e4;\n        text-decoration: none;\n        text-align: center;\n      }\n      .bill-amount button {\n        width: 144px;\n        height: 32px;\n        margin-top: 12px;\n        /* UI Properties */\n        /* UI Properties */\n        background: #ffffff 0% 0% no-repeat padding-box;\n        border: 1px solid #5046e4;\n        border-radius: 2px;\n        opacity: 1;\n\n        /* text-align: left; */\n        font: normal normal bold 12px/24px Figtree;\n        letter-spacing: 0px;\n        color: #5046e4;\n        text-transform: uppercase;\n        opacity: 1;\n      }\n      .footer {\n        color: #e7e9eb;\n        background-color: #373741;\n        position: static;\n        width: 1200px;\n      }\n      .footer-content {\n        padding: 36px 70px 46px;\n        font-size: 12px;\n        line-height: 22px;\n        max-width: 434px;\n      }\n      .footer-header {\n        font-size: 14px;\n        font-weight: bold;\n      }\n      .bank-text {\n        padding-top: 4px;\n        padding-bottom: 10px;\n      }\n      .invoice-box table.bank-details td {\n        padding: 0;\n      }\n      .bank-details .field-name {\n        width: 150px;\n      }\n      .invoice-note-box {\n        display: flex;\n        margin-top: 50px;\n        flex-direction: column;\n        overflow-wrap: break-word;\n        text-wrap: pretty;\n      }\n      .invoice-note-box-title {\n        font-size: 14px;\n        font-weight: 700;\n      }\n      .invoice-note-box-note {\n        font-size: 14px;\n        white-space-collapse: preserve;\n      }\n    </style>\n  </head>\n\n  <body>\n    {{#summary.show_invoice_summary}}\n    <div class=\"invoice-box\">\n      <div class=\"top-margin\"></div>\n      <div class=\"invoice-header\">\n        <div class=\"invoice-header-row\">\n          <div class=\"title\">Invoice Summary</div>\n          <img class=\"logo\" src=\"{{logo}}\" alt=\"Logo\" />\n        </div>\n        <div class=\"primary-details\">\n          <dl class=\"details-col\">\n            <div class=\"details-row\">\n              <dt>Invoice No.</dt>\n              <dd>{{invoice_data.id}}</dd>\n            </div>\n            <div class=\"details-row\">\n              <dt>Billing period</dt>\n              <dd>{{billing_duration}}</dd>\n            </div>\n          </dl>\n          <dl class=\"details-col\">\n            <div class=\"details-row\">\n              <dt>Invoice Date</dt>\n              <dd>{{invoice_data.invoice_date}}</dd>\n            </div>\n            <div class=\"details-row\">\n              <dt>Due Date</dt>\n              <dd>{{invoice_data.due_by}}</dd>\n            </div>\n          </dl>\n          <dl class=\"details-col\">\n            {{#customer.tax_id}}\n            <div class=\"details-row"
  },
  {
    "id": "chunk_33",
    "document": "Document templates.txt",
    "chunk_index": 1,
    "content": "\">\n              <dt>TAX ID</dt>\n              <dd>{{.}}</dd>\n            </div>\n            {{/customer.tax_id}}\n          </dl>\n        </div>\n      </div>\n      <div class=\"main-section\">\n        <div class=\"secondary-details\">\n          <div class=\"details-col\">\n            <div class=\"address-header\">Bill To</div>\n            <div class=\"address\">\n              {{#customer.name}}{{.}}<br />{{/customer.name}}{{#customer.address}}{{{.}}}<br />{{/customer.address}}\n            </div>\n            <div>\n              {{#customer.email}}Email\n              <b class=\"customer-email\">{{.}}</b>{{/customer.email}}\n            </div>\n          </div>\n          <div class=\"details-col\">\n            <div class=\"address-header\">Bill From</div>\n            <div class=\"address\">\n              {{#seller.name}}{{.}}<br />{{/seller.name}}{{#seller.address}}{{{.}}}<br />{{/seller.address}}\n            </div>\n          </div>\n          <div class=\"details-col bill-amount\">\n            <div class=\"amount-due\">{{summary.amount_due}}</div>\n            <div class=\"due-date\">Due on {{invoice_data.due_by}}</div>\n            {{#invoice_data.payment_link}}\n            <a\n              target=\"_blank\"\n              class=\"payment-button\"\n              href=\"{{invoice_data.payment_link}}\"\n              >Pay Online</a\n            >\n            {{/invoice_data.payment_link}}\n          </div>\n        </div>\n\n        <table cellpadding=\"0\" cellspacing=\"0\">\n          <tr>\n            <td class=\"header-row big-block indent-0\">Date</td>\n            <td class=\"header-row small-block\">Amount Type</td>\n            <td class=\"header-row small-block\">Reference Id</td>\n            <td class=\"header-row small-block\">Remarks</td>\n            <td class=\"header-row small-block right-indent\">Amount</td>\n          </tr>\n          {{#summary.summary}}\n          <tr>\n            <td class=\"col big-block indent-0\">{{date}}</td>\n            <td class=\"col small-block\">{{amount_type}}</td>\n            <td class=\"col small-block\">{{reference_id}}</td>\n            <td class=\"col small-block\">{{remarks}}</td>\n            <td class=\"col small-block right-indent\">{{amount}}</td>\n          </tr>\n          {{/summary.summary}}\n\n          <tfoot>\n            <td colspan=\"4\" class=\"header-row indent-0\">\n              Amount Due for Invoice <b>{{invoice_data.id}}</b> as of\n              <b>{{summary.current_date}}</b>\n            </td>\n            <td class=\"header-row right-indent\">{{summary.amount_due}}</td>\n          </tfoot>\n        </table>\n      </div>\n      {{#ach_details}}\n      <div class=\"footer\">\n        <div class=\"footer-content\">\n          <div class=\"footer-header\">Pay with ACH or wire transfer</div>\n          <div class=\"bank-text\">\n            Bank transfers, also known as ACH payments, can take up to five\n            business days. To pay via ACH, transfer funds using the following\n            bank information.\n          </div>\n          <table class=\"bank-details\">\n            <tr>\n              <td class=\"field-name\">Bank name</td>\n              <td class=\"field-name\">{{bank_name}}</td>\n            </tr>\n            <tr>\n              <td>Routing number</td>\n              <td>{{routing_number}}</td>\n            </tr>\n            <tr>\n              <td>Account number</td>\n              <td>{{account_number}}</td>\n            </tr>\n            <tr>\n              <td>SWIFT code</td>\n              <td>{{swift_code}}</td>\n            </tr>\n          </table>\n        </div>\n      </div>\n      {{/ach_details}}\n    </div>\n    <div class=\"pagebreak\"></div>\n    {{/summary.show_invoice_summary}}\n    <div class=\"invoice-box\">\n      <div class=\"top-margin\"></div>\n      <div class=\"invoice-header\">\n        <div class=\"invoice-header-row\">\n          <div class=\"title\">Invoice</div>\n          <img class=\"logo\" src=\"{{logo}}\" alt=\"Logo\" />\n        </div>\n        <div class=\"primary-details\">\n          <dl class=\"details-col\">\n            <div class=\"details-row\">\n              <dt>Invoice No.</dt>\n              <dd>{{invoice_data.id}}</dd>\n            </div>\n            <div class=\"details-row\">\n              <dt>Billing period</dt>\n              <dd>{{billing_duration}}</dd>\n            </div>\n          </dl>\n          <dl class=\"details-col\">\n            <div class=\"details-row\">\n              <dt>Invoice Date</dt>\n              <dd>{{invoice_data.invoice_date}}</dd>\n            </div>\n            <div class=\"details-row\">\n              <dt>Due Date</dt>\n              <dd>{{invoice_data.due_by}}</dd>\n            </div>\n          </dl>\n          <dl class=\"details-col\">\n            {{#customer.tax_id}}\n            <div class=\"details-row\">\n              <dt>TAX ID</dt>\n              <dd>{{.}}</dd>\n            </div>\n            {{/customer.tax_id}}\n          </dl>\n        </div>\n      </div>\n      <div class=\"main-section\">\n        <div class=\"secondary-details\">\n          <div class=\"details-col\">\n            <div class=\"address-header\">Bill To</div>\n            <div class=\"address\">\n              {{#customer.name}}{{.}}<br />{{/customer.name}}{{#customer.address}}{{{.}}}<br />{{/customer.address}}\n            </div>\n            <div>\n              {{#customer.email}} Email<b class=\"customer-email\">{{.}}</b\n              >{{/customer.email}}\n            </div>\n          </div>\n          <div class=\"details-col\">\n            <div class=\"address-header\">Bill From</div>\n            <div class=\"address\">\n              {{#seller.name}}{{.}}<br />{{/seller.name}}{{#seller.address}}{{{.}}}<br />{{/seller.address}}\n            </div>\n          </div>\n          <div class=\"details-col bill-amount\">\n            <div class=\"amount-due\">{{invoice_data.invoice_amount_due}}</div>\n            <div class=\"due-date\">Due on {{invoice_data.due_by}}</div>\n            {{#invoice_data.payment_link}}\n            <a\n              target=\"_blank\"\n              class=\"payment-button\"\n              href=\"{{invoice_data.payment_link}}\"\n              >Pay Online</a\n            >\n            {{/invoice_data.payment_link}}\n          </div>\n        </div>\n\n        <table cellpadding=\"0\" cellspacing=\"0\">\n          <tr>\n            <td class=\"header-row big-block indent-0\">Item</td>\n            <td class=\"header-row small-block\">Service Period</td>\n            <td class=\"header-row small-block\">Price</td>\n            <td class=\"header-row small-block\">Quantity</td>\n            <td class=\"header-row small-block right-indent\">Amount</td>\n          </tr>\n\n          {{#document_lines}}\n          <tr>\n            <td class=\"col big-block indent-{{templating_data.indent_level}}\">\n              {{item_name}}\n            </td>\n            {{#templating_data.formatted_service_period}}\n            <td class=\"col small-block\">\n              {{templating_data.formatted_service_period}}\n            </td>\n            {{/templating_data.formatted_service_period}}\n            {{^templating_data.formatted_service_period}}\n            <td class=\"col small-block\"></td>\n            {{/templating_data.formatted_service_period}}\n            {{#templating_data.per-unit-pricing}}\n            <td class=\"col small-block\">\n              {{templating_data.formatted_unit_price}}\n            </td>\n            <td class=\"col small-block\">\n              {{templating_data.formatted_quantity}}\n            </td>\n            <td class=\"small-block right-indent\">\n              {{templating_data.formatted_amount}}\n            </td>\n            {{/templating_data.per-unit-pricing}}\n            {{#templating_data.custom_tiered_pricing}}\n            <td class=\"col small-block\">{{templating_data.price}}</td>\n            <td class=\"col small-block\">\n              {{templating_data.formatted_quantity}}\n            </td>\n            <td class=\"small-block right-indent\">\n              {{templating_data.formatted_amount}}\n            </td>\n            {{/templating_data.custom_tiered_pricing}}\n            {{#templating_data.package-pricing}}\n            <td class=\"col small-block\">\n              {{templating_data.formatted_package_price}}\n            </td>\n            <td class=\"col small-block\">\n              {{templating_data.formatted_quantity}}\n            </td>\n            <td class=\"small-block right-indent\">\n              {{templating_data.formatted_amount}}\n            </td>\n            {{/templating_data.package-pricing}}\n            {{#templating_data.custom_line_item_data}}\n            <td class=\"col small-block\"></td>\n            <td class=\"col small-block\"></td>\n            <td class=\"small-block right-indent\">\n              {{templating_data.formatted_amount}}\n            </td>\n            {{/templating_data.custom_line_item_data}}\n            {{#templating_data.subscription-with-proration}}\n            <td class=\"col small-block\"></td>\n            <td class=\"col small-block\"></td>\n            <td class=\"small-block right-indent\">\n              {{templating_data.formatted_amount}}\n            </td>\n            {{/templating_data.subscription-with-proration}}\n            {{#templating_data.prorated-fixed-charge}}\n            <td class=\"col small-block\"></td>\n            <td class=\"col small-block\"></td>\n            <td class=\"small-block right-indent\">\n              {{templating_data.formatted_amount}}\n            </td>\n            {{/templating_data.prorated-fixed-charge}}\n            {{#templating_data.minimum-amount-overages}}\n            <td class=\"col small-block\">\n              {{templating_data.formatted_quantity}}\n            </td>\n            <td class=\"col small-block\">\n              {{templating_data.formatted_minimum_amount}}\n            </td>\n            <td class=\"small-block right-indent\">\n              {{templating_data.formatted_amount}}\n            </td>\n            {{/templating_data.minimum-amount-overages}}\n            {{#templating_data.discount}}\n            <td class=\"col small-block\">\n              {{templating_data.formatted_quantity}}\n            </td>\n            <td class=\"col small-block\">\n              {{templating_data.formatted_discount_to_show}}\n            </td>\n            <td class=\"small-block right-indent\">\n              -{{templating_data.formatted_discount_given}}\n            </td>\n            {{/templating_data.discount}} {{#templating_data.tax}}\n            <td class=\"col small-block\">\n              {{templating_data.formatted_quantity}}\n            </td>\n            <td class=\"col small-block\">\n              {{templating_data.formatted_percent}}\n            </td>\n            <td class=\"small-block right-indent\">\n              {{templating_data.formatted_tax_amount}}\n            </td>\n            {{/templating_data.tax}} {{#templating_data.surcharge_data}}\n            <td class=\"col small-block\">\n              {{templating_data.formatted_quantity}}\n            </td>\n            <td class=\"col small-block\">\n              {{templating_data.surcharge_percent}}%\n            </td>\n            <td class=\"small-block right-indent\">\n              {{templating_data.surcharge_total}}\n            </td>\n            {{/templating_data.surcharge_data}}\n            {{#templating_data.volume-pricing}}\n            <td class=\"col small-block\">\n              {{templating_data.formatted_unit_price}}\n            </td>\n            <td class=\"col small-block\">\n              {{templating_data.formatted_quantity}}\n            </td>\n            <td class=\"small-block right-indent\">\n              {{templating_data.formatted_amount}}\n            </td>\n            {{/templating_data.volume-pricing}}\n            {{#templating_data.step-pricing}}\n            <td class=\"col small-block\">\n              {{templating_data.formatted_flat_fee}}\n            </td>\n            <td class=\"col small-block\">\n              {{templating_data.formatted_quantity}}\n            </td>\n            <td class=\"small-block right-indent\">\n              {{templating_data.formatted_amount}}\n            </td>\n            {{/templating_data.step-pricing}} {{#templating_data.free-units}}\n            <td class=\"col small-block\">\n              {{templating_data.formatted_unit_price}}\n            </td>\n            <td class=\"col small-block\">\n              {{templating_data.formatted_free_units_granted}}&sol;{{templating_data.formatted_total_free_units}}\n            </td>\n            <td class=\"small-block right-indent\">\n              {{templating_data.formatted_amount}}\n            </td>\n            {{/templating_data.free-units}} {{#templating_data.tiered-pricing}}\n            <td class=\"col small-block\">{{templating_data.no_tiers}} Tiers</td>\n            <td class=\"col small-block\">\n              {{templating_data.formatted_quantity}}\n            </td>\n            {{#templating_data.tiers}}\n          </tr>\n\n          <tr class=\"item\">\n            <td class=\"col big-block indent-{{templating_data.indent_level}}\">\n              {{tier_name}}\n            </td>\n            <td class=\"col small-block\">{{formatted_unit_price}}</td>\n            <td class=\"col small-block\">{{formatted_quantity}}</td>\n            <td class=\"small-block right-indent\">{{formatted_amount}}</td>\n          </tr>\n          {{/templating_data.tiers}} {{/templating_data.tiered-pricing}}\n          {{#templating_data.2d-tiered-pricing}}\n          {{#templating_data.column_tiers}}\n          <tr class=\"item\">\n            <td class=\"col big-block indent-{{indent_level}}\">\n              {{column_name}}\n            </td>\n            <td class=\"col small-block\">{{no_tiers}} Tiers</td>\n            <td class=\"col small-block\">{{formatted_column_quantity}}</td>\n          </tr>\n          {{#tiers}}\n          <tr class=\"item\">\n            <td class=\"col big-block indent-{{indent_level}}\">{{tier_name}}</td>\n            <td class=\"col small-block\">{{formatted_unit_price}}</td>\n            <td class=\"col small-block\">{{formatted_quantity}}</td>\n            <td class=\"small-block right-indent\">{{formatted_amount}}</td>\n          </tr>\n          {{/tiers}} {{/templating_data.column_tiers}}\n          {{/templating_data.2d-tiered-pricing}}\n          {{#templating_data.matrix-pricing}} {{#templating_data.tiers}}\n          <tr class=\"item\">\n            <td class=\"col big-block indent-{{templating_data.indent_level}}\">\n              {{tier_name}}\n            </td>\n            <td class=\"col small-block\">{{formatted_unit_price}}</td>\n            <td class=\"col small-block\">{{formatted_quantity}}</td>\n            <td class=\"small-block right-indent\">{{formatted_amount}}</td>\n          </tr>\n          {{/templating_data.tiers}} {{/templating_data.matrix-pricing}}\n          {{#templating_data.percent-pricing}}\n          <td class=\"col small-block\">{{templating_data.formatted_percent}}</td>\n          <td class=\"col small-block\">\n            {{templating_data.formatted_quantity}}\n          </td>\n          <td class=\"small-block right-indent\">\n            {{templating_data.formatted_amount}}\n          </td>\n          {{/templating_data.percent-pricing}} {{#templating_data.subscription}}\n          <td class=\"col small-block\"></td>\n          <td class=\"col small-block\"></td>\n          <td class=\"small-block right-indent\">\n            {{templating_data.formatted_amount}}\n          </td>\n          {{/templating_data.subscription}} {{#templating_data.max}}\n          <td class=\"col small-block\"></td>\n          <td class=\"col small-block\"></td>\n          <td class=\"small-block right-indent\">\n            {{templating_data.formatted_amount}}\n          </td>\n          {{/templating_data.max}} {{/document_lines}}\n          {{#discount_data.discount_data}}\n          <tr class=\"total\">\n            <td></td>\n            <td></td>\n            <td></td>\n            <td>Total Before Discount:</td>\n            <td class=\"small-block right-indent\">\n              {{discount_data.total_before_discount}}\n            </td>\n          </tr>\n          <tr class=\"total\">\n            <td></td>\n            <td></td>\n            <td></td>\n            <td>Discount ({{discount_data.discount_percent}}%):</td>\n            <td class=\"small-block right-indent\">\n              -{{discount_data.discount_total}}\n            </td>\n          </tr>\n          {{/discount_data.discount_data}} {{#surcharge_data.surcharge_data}}\n          <tr class=\"total\">\n            <td></td>\n            <td></td>\n            <td></td>\n            <td>Total Before Surcharge:</td>\n            <td class=\"small-block right-indent\">\n              {{surcharge_data.total_before_surcharge}}\n            </td>\n          </tr>\n          <tr class=\"total\">\n            <td></td>\n            <td></td>\n            <td></td>\n            <td>Surcharge ({{surcharge_data.surcharge_percent}}%):</td>\n            <td class=\"small-block right-indent\">\n              {{surcharge_data.surcharge_total}}\n            </td>\n          </tr>\n          {{/surcharge_data.surcharge_data}} {{#tax_data.tax_total}}\n          <tr class=\"total\">\n            <td></td>\n            <td></td>\n            <td></td>\n            <td>Total Before Tax:</td>\n            <td class=\"small-block right-indent\">\n              {{tax_data.total_before_tax}}\n            </td>\n          </tr>\n          <tr class=\"total\">\n            <td></td>\n            <td></td>\n            <td></td>\n            <td>{{tax_data.tax_item_name}} ({{tax_data.tax_percent}}%):</td>\n            <td class=\"small-block right-indent\">{{tax_data.tax_total}}</td>\n          </tr>\n          {{/tax_data.tax_total}}\n          {{#avalara_tax_data.formatted_amount_after_tax}}\n          <tr class=\"total\">\n            <td></td>\n            <td></td>\n            <td></td>\n            <td>{{avalara_tax_data.tax_item_name}}</td>\n            <td class=\"small-block right-indent\">\n              {{avalara_tax_data.formatted_tax_amount}}\n            </td>\n          </tr>\n          {{/avalara_tax_data.formatted_amount_after_tax}} {{#custom_data}}\n          <tr class=\"total\">\n            <td></td>\n            <td></td>\n            <td></td>\n            <td>{{item_name}}:</td>\n            <td class=\""
  },
  {
    "id": "chunk_34",
    "document": "Document templates.txt",
    "chunk_index": 2,
    "content": "small-block right-indent\">{{formatted_amount}}</td>\n          </tr>\n          {{/custom_data}}\n\n          <tr class=\"total\">\n            <td></td>\n            <td></td>\n            <td></td>\n            <td>Total:</td>\n            <td class=\"small-block right-indent\">{{invoice_data.total}}</td>\n          </tr>\n          {{#customer_balance.balance_is_non_zero}}\n          <tr class=\"total\">\n            <td></td>\n            <td></td>\n            <td></td>\n            <td>Applied Balance:</td>\n            <td class=\"small-block right-indent\">\n              {{customer_balance.balance}}\n            </td>\n          </tr>\n          <tr class=\"total\">\n            <td></td>\n            <td></td>\n            <td></td>\n            <td>Amount Due:</td>\n            <td class=\"small-block right-indent\">\n              {{customer_balance.amount_due}}\n            </td>\n          </tr>\n          {{/customer_balance.balance_is_non_zero}}\n          {{^customer_balance.balance_is_non_zero}}\n          {{#invoice_data.show_applied_balance}}\n          <tr class=\"total\">\n            <td></td>\n            <td></td>\n            <td></td>\n            <td>Applied Balance:</td>\n            <td class=\"small-block right-indent\">\n              {{invoice_data.applied_balance}}\n            </td>\n          </tr>\n          {{/invoice_data.show_applied_balance}}\n          <tr class=\"total\">\n            <td></td>\n            <td></td>\n            <td></td>\n            <td>Amount Due:</td>\n            <td class=\"small-block right-indent\">\n              {{invoice_data.invoice_amount_due}}\n            </td>\n            {{/customer_balance.balance_is_non_zero}}\n          </tr>\n        </table>\n        {{#invoice_note}}\n        <div class=\"invoice-note-box\">\n          <!-- need CSS reset to use <p> without margins -->\n          <span class=\"invoice-note-box-title\">{{invoice_note.title}}</span>\n          <span class=\"invoice-note-box-note\"\n            >{{#invoice_note.note}}{{{.}}}<br />{{/invoice_note.note}}</span\n          >\n        </div>\n        {{/invoice_note}}\n      </div>\n      {{#ach_details}}\n      <div class=\"footer\">\n        <div class=\"footer-content\">\n          <div class=\"footer-header\">Pay with ACH or wire transfer .</div>\n          <div class=\"bank-text\">\n            Bank transfers, also known as ACH payments, can take up to five\n            business days. To pay via ACH, transfer funds using the following\n            bank information.\n          </div>\n          <table class=\"bank-details\">\n            <tr>\n              <td class=\"field-name\">Bank name</td>\n              <td class=\"field-name\">{{bank_name}}</td>\n            </tr>\n            <tr>\n              <td>Routing number</td>\n              <td>{{routing_number}}</td>\n            </tr>\n            <tr>\n              <td>Account number</td>\n              <td>{{account_number}}</td>\n            </tr>\n            <tr>\n              <td>SWIFT code</td>\n              <td>{{swift_code}}</td>\n            </tr>\n          </table>\n        </div>\n      </div>\n      {{/ach_details}} {{^ach_details}} {{#payment_instructions}}\n      <div class=\"footer\">\n        <div class=\"footer-content\">\n          <div class=\"footer-header\">{{title}}</div>\n          <div class=\"bank-text\">{{description}}</div>\n          <table class=\"bank-details\">\n            {{#details_list}}\n            <tr>\n              <td>{{key}}</td>\n              <td>{{value}}</td>\n            </tr>\n            {{/details_list}}\n          </table>\n        </div>\n      </div>\n      {{/payment_instructions}} {{/ach_details}}\n    </div>\n  </body>\n</html>\n\nUpdated 13 days ago Usage alertsSegmentsTable of Contents\n\n📚 Types of document templates\n\n⚙️ Create a document template\n\n⚙️ Edit a document template\n\nPreview a document template\nEdit the HTML of a document template\n\n"
  },
  {
    "id": "chunk_35",
    "document": "Email alerts.txt",
    "chunk_index": 0,
    "content": "Email alerts\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceEmail alertsSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Email alertsConfigure automated email alerts for segments of customers.This guide will help you configure automated email alerts for a segment of customers. A segment of customers share certain common attributes. For example, you may segment your customers based on the following criteria:\n\npay by card\npay using Stripe\nlive in a particular geography\n\nYou can configure automated email alerts based on events. For example, you can send email alerts reminding the customer of:\n\nthe approaching due date  in the event of generation of an invoice\nan overdue payment in the event of passing of the due date\n\nHow to create an email alert\n\n🚧LimitationsCurrently, Zenskar supports creation of the following two types of email alerts:\nbefore due date: when an invoice is generated, remind customers about the approaching due date\nafter due date: alert customers that the invoice payment is overdue\nAlso, alerts can be sent only to one segment of customers: all customers.\n\nNavigate to Communication > Email Alerts.\nClick \n\nBefore due date: remind customers about the approaching due date\n\nClick on ADD REMINDER button under the INVOICE GENERATED section.\nFill in the details in the following form.\nClick SAVE ALERT.\n\nFieldValue to enterSend email before due (days)Enter the number of days before the due date when you would like Zenskar to send automated email alerts to your customers to remind them of the approaching due date.SenderSelect the sender on whose behalf you would like Zenskar to send mails to your customers.Email templateThe drop-down will list all email templates of the type payment reminder.\nEmail attachmentRead-only field. Invoice is attached by default.Email subjectRead-only field that displays the subject of the template.Email bodyRead-only field that displays the body of the template.\nAfter due date: alert customer that the invoice payment is overdue\n\nClick on ADD REMINDER button under the DUE DATE section.\nFill in the details in the following form.\nClick SAVE ALERT.\n\nFieldValue to enterSend email after due (days)Enter the number of days after the due date when you would like Zenskar to send automated payment overdue reminder email alert to your customers.SenderSelect the sender on whose behalf you would like Zenskar to send mails to your customers.Email templateThe drop-down will list all email templates of the type payment reminder.\nEmail attachmentRead-only field. Invoice is attached by default.Email subjectRead-only field that displays the subject of the template.Email bodyRead-only field that displays the body of the template.Updated 17 days ago Email templatesUsage alertsTable of Contents\n\nHow to create an email alert\n\nBefore due date: remind customers about the approaching due date\nAfter due date: alert customer that the invoice payment is overdue\n\n"
  },
  {
    "id": "chunk_36",
    "document": "Email templates.txt",
    "chunk_index": 0,
    "content": "Email templates\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceEmail templatesSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Email templatesHow to create email templates\n\nNavigate to Communications > Email Templates and click on the  + ADD NEW EMAIL TEMPLATE button.\nSelect an email template type to create an email template based on your requirements. The following email template types are available:\n\nInvoice: to send invoice-related emails to customers.\nPayment Reminder: to send payment reminders to customers.\nUsage Report: to send usage reports based on latest aggregates to customers.\nRefund Receipt: to send refund receipts to customers.\nContract Document: to send contract documents to customers.\nCustom Email: flexible general-purpose templates.\nPayment Receipt: to send payment receipts to customers.\n\nFig. 1: Select an email template type\nInvoice email template\n\nEnter a name for the template.\nAdd an email attachment. Currently, Invoice, Payment Receipt, and Refund Receipt can be attached.\n\n🚧NoteEmail attachments are document templates. The Email Attachments drop-down will show all existing document templates. You must create document templates by navigating to Communications > Document Templates.\n\nInput template data: subject and body of the email. The Insert Variables drop-down can be used to add placeholders in the body of the email. The Zenskar backend will replace the placeholders with contextually relevant values when an email is sent.\nThe following variables are available:\n\nCustomer variablesNameIDExternal IDAddressEmail\nInvoice variablesNumberInvoice dateDue dateTotalDue amountPayment linkBilling cycle startBilling cycle endBilling duration\n\nThe email template editor allows you to add the following to your email template body:\n\nhyperlinks: select the word you wish to display as a hyperlink, and use the link tool  from the bottom toolbar to create a hyperlink to a location on the web.\nhidden elements: if you wish to include certain keywords in the emails that are invisible to your customers, you can use the hide tool . This gives you the ability to perform keyword-based searches in your mail client while not cluttering the emails you send.\nimages: you can use the image tool  to either insert an image URL or your organization's logo.\n\n🚧Organization logoNavigate to Settings > General, and click on the CHANGE LOGO button to upload your organization's logo.\n\nSave the template by clicking the ADD NEW EMAIL TEMPLATE button.\n\nAll existing email templates can be viewed by navigating to Communications > Email Templates.\n\nPayment receipt email template\nThe process is similar to invoice email template creation. Refer the invoice email template creation process.\nUsage report email template\nThe process is similar to invoice email template creation process with the following differences:\n\nEmail attachment option is not available.\nOption to add aggregates is available.\nEmails can be sent to customers anytime by clicking on the SEND EMAIL button on the email templates page.\n\n🚧NoteThe Insert Aggregate drop-down will show all existing aggregates. You must add aggregates by navigating to Metering >  Usage Aggregates.\n\nRefund receipt email template\nThe process is similar to invoice email template creation. Refer the invoice email template creation process.\nContract document email template\nThe process is similar to invoice email template creation. Refer the invoice email template creation process.\nCustom email template\nIf the above email template types do not meet your requirements, the flexibility of the custom email template may be what you are looking for.\nThe process is similar to invoice email template creation with the following differences:\n\nEmail attachment option is not available.\nEmails can be sent to customers anytime.\n\nSending emails\n\nNavigate to Communications > Email Templates.\nClick on the kebab menu at the end of the row you are interested in.\n\nSelect email recipients(s) using the Select Customers drop-down.\n\n❗️Note\nThe Select Customers drop-down will list all existing customers. You must add customers before exercising this option.\nThe CSV file must include either the external_id or customer_id to identify the recipients. If neither of these IDs is included, an error message will be displayed.\n\nIf needed, you can edit the email template before sending the mail.\nOnce you have ensured that correctness of all the data, click on the SEND EMAIL button.\n\nUpdated 17 days ago EntitlementsEmail alertsTable of Contents\n\nHow to create email templates\n\nInvoice email template\nPayment receipt email template\nUsage report email template\nRefund receipt email template\nContract document email template\nCustom email template\n\n"
  },
  {
    "id": "chunk_37",
    "document": "Entitlements.txt",
    "chunk_index": 0,
    "content": "Entitlements\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceEntitlementsSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by EntitlementsEntitlements refer to services or products that your customers are entitled to.What are entitlements?\nEntitlements refer to services or products that your customers are entitled to. Entitlements are generally used to store customer balances. Customer balances can be created in various ways. Some are listed below:\n\nQuantity-based entitlement (measured in units):\n\nYou sell 10 units of a service or product to a customer for $100. In this case, the customer is entitled to 10 units of said service or product.\nYou sell a subscription for $100 per month, and each month you offer the customer 50 free units to consume as a part of the subscription. If these free units are not consumed during the month, they are carried forward until the contract is active. In this case, the free units are tracked across billing cycles using entitlements.\n\nCredit-based entitlement (measured in currency): you sell $1000 worth of credits to a customer for $900. In this case, your customer is entitled to spend $1000 on your platform.\n\n🚧Entitlements vs free unitsFree units that expire at the end of product billing period need not be tracked across billing periods. Therefore, an entitlement is optional for such free units. For all other expiry conditions, an entitlement must be attached to the free units node.\n\nAdd an entitlement from the Entitlements module\n\nNavigate to Entitlements > Entitlements in the left side panel.\nOn the Entitlements page, click on the CREATE NEW ENTITLEMENT button.\n\nOn the Create New Entitlement page, fill the details:\n\nEntitlement information:\nEntitlement type\n\nSelect one option: Quantity (units) or Credits (currency)\nEnter a unit name: this is the name of the unit that will be displayed in the invoice.\n\nAdd an entitlement to a product\nAn entitlement can be added to a new or an existing product in the form of a:\n\nFree Units feature node\nCredits feature node\n\nParameters of the free units node\nType\nTypeDescriptionAddAdd free units to your customer's accountConsumeDeduct free units from your customer's accountAdd and consumeAdd or deduct free units from your customer's account based on calculations during invoice generation\nQuantity of free units\nEnter the quantity or credits that you wish to offer your customers.\nExpiry condition\nConditionDescriptionCustomThe free units are tracked as entitlements across billing cycles based on a cadence value (a number) and unit (days, weeks, months or years)NeverThe free units are tracked as entitlements even across contracts. For example, the free units are carried forward even when a new contract is signed with the customer.End of contractThe free units are tracked as entitlements until they expire when the contract ends. Free units are not tracked when a new contract is signedEnd of product billing periodThe free units expire at the end of product billing cycle and need no further tracking.\nGranting condition\nConditionDescriptionOn invoice approvalThe free units are granted when an invoice is moved from the draft to approved state.On Invoice creationThe free units are granted when an invoice is created.On payments successThe free units are granted when a successful payment is made against invoice.\n\nFree units name (entitlement)\nAn entitlement can be attached to the free-units node using the Free Units Name drop-down menu.\n\nA new entitlement can be created and attached to the free-units node by typing a new name.\n\nAdd an entitlement to a new product\n\nNavigate to Contracts > Products in the left side panel.\nClick on the + CREATE NEW PRODUCT.\nOn the Add New Product page, add a Free Units node.\nClick on the Free Units Name drop-down menu to select an entitlement.\n\nAlternatively, you may create a new entitlement by typing a new name, as shown below:\n\nOptionally, you may click on the Click here to charge overages link to automatically add another free units node that consumes free units to compensate for overages.\n\nClick on the ADD PRODUCT button.\n\nAdd an entitlement to an existing product\n\nNavigate to Contracts > Products in the left side panel.\nOn the Products page, click on the row containing the product you wish to edit.\nOn the Edit Product page, add a Free Units node.\nClick on the UPDATE button.\n\nAssign an entitlement to a customer\n\nClick on Customers in the left side panel.\nOn the Customers page, click on the row containing the customer name to whom you wish to assign an entitlement.\nOn the page showing customer details, click on the Entitlements tab, as shown below:\n\nClick on the + ADD ENTITLEMENT button.\nOn the entitlements form, click on the Select Entitlement drop-down menu, and select the desired entitlement.\nSelect a date.\nClick on the SAVE button.\n\nEdit or dissociate entitlement assigned to a customer\n\nClick on Customers in the left side panel.\nOn the Customers page, click on the row containing the customer name to whom you wish to assign an entitlement.\nOn the page showing customer details, click on the Entitlements tab, as shown below:\n\nClick on the kebab menu located at the end of the row containing the entitlement you wish to edit or dissociate.\nClick on Edit or Delete.\n\nDelete an entitlement\n\nNavigate to Entitlements > Entitlements in the left side panel.\nOn the Entitlements page, click on the kebab menu located at the end of the row containing the entitlement you wish to delete.\nClick on the Delete menu option.\n\nUpdated 17 days ago MonitoringCommunicationsTable of Contents\n\nWhat are entitlements?\n\nAdd an entitlement from the Entitlements module\n\nAdd an entitlement to a product\n\nParameters of the free units node\nAdd an entitlement to a new product\nAdd an entitlement to an existing product\n\nAssign an entitlement to a customer\n\nEdit or dissociate entitlement assigned to a customer\n\nDelete an entitlement\n\n"
  },
  {
    "id": "chunk_38",
    "document": "Flat-fee pricing.txt",
    "chunk_index": 0,
    "content": "Flat-fee pricing\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceFlat-fee pricingSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Flat-fee pricingOverview\nFlat-fee pricing is a model where a flat or fixed price is agreed upon in advance for delivering a specific product or service. The total cost, scope, and timeline are determined upfront, providing both parties with clear expectations and no surprises. This approach offers transparency and simplicity, making it easier for customers to understand the overall cost from the start.\nCommon use cases for flat-fee pricing\nIndustryDescriptionConsultingFixed fee for defined projects like market research, strategic plans, etc.Legal ServicesFlat fee for routine services such as drafting contracts, trademarks, or wills.Software DevelopmentFixed cost for well-defined projects like website development or custom apps.Web Design & Graphic DesignFlat fee for services like logo design, website creation, or branding.Marketing & AdvertisingFixed cost for defined campaigns such as social media management or content creation.\nUse flat-fee pricing in Zenskar\nPrerequisites\nContract documentationLearn how contracts contain data related to usage, pricing models, and other billing determinants.Product documentationLearn how products define services or products you sell to your customer as part of a contract.\nCreate a product based on flat-fee pricing\nThere are multiple ways to create a product based on flat-fee pricing:\nCreate an independent product based on flat-fee pricing\nNavigate to Contracts > Products  in the left side panel.\nClick + CREATE NEW drop-down menu at the top right of the Products page,.\nSelect the Product menu option.\n\nFill the relevant details on the Create Product form, and click on the SAVE & PROCEED button.\nOn the Edit Product page, click on the + ADD PRICE button.\nOn the Add Pricing Details form, click on the Pricing Models drop-down menu, and select Flat Fee option.\n\nUpdate an existing contract by adding a new product based on flat-fee pricing\nNavigate to Contracts > Contracts  in the left side panel.\nSelect the contract you wish to update.\nOn the Summary tab of the Edit Contract page, click on the + ADD PRODUCT link.\n\nOn the Add Product form, click on the + CREATE NEW PRODUCT button.\nOn the Create Product form, fill the relevant details, and click on the SAVE & PROCEED button.\nClick on the +ADD PRICE button, as shown below.\n\nOn the Add Pricing Details form, click on the Pricing Models drop-down menu, and select Flat Fee option.\n\nUpdated 4 days ago Business entitiesMatrix pricingTable of Contents\n\nOverview\n\nCommon use cases for flat-fee pricing\n\nUse flat-fee pricing in Zenskar\n\nPrerequisites\nCreate a product based on flat-fee pricing\n\n"
  },
  {
    "id": "chunk_39",
    "document": "Free units.txt",
    "chunk_index": 0,
    "content": "Free units\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceFree unitsSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Free unitsFree units is a feature available in products, sub-products, and add-ons. A free-units feature node can be added to a product by clicking on the + Free Units button.\n\nConceptDescriptionFree unitsThe number of free units that the customer is entitled to in each billing cycle.EntitlementsServices or products that your customers are entitled to. This includes free units that must be tracked across billing cycles using the concept of entitlements. There are two major types of entitlements:\nQuantity-based entitlement (measured in units)\nCredit-based entitlement (measured in currency)Free units feature helps with tracking quantity-based entitlements.\n📚NoteFree-units feature is available only at the level of products, sub-products, and add-ons. Free units feature is not available at the contract level.\nRefer this documentation to understand the various parameters of the free-units feature node.\nUpdated 17 days ago Product, sub-product, add-on, and product catalogCredits\n\n"
  },
  {
    "id": "chunk_40",
    "document": "Generate invoices.txt",
    "chunk_index": 0,
    "content": "Generate invoices\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceGenerate invoicesSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Generate invoicesFrom zero to invoice.Zenskar helps you manage billing at scale irrespective of the complexity of the pricing structures in your contracts. To generate an invoice, you must:\nStep 1: Create a customer\nAdd a customer.\n\nStep 2: Help Zenskar ingest usage data\n📖Raw metrics versus aggregatesMetrics represent all the data that you capture to analyze trends across your business and technology domains. Raw metrics are unfiltered data. Derived metrics, on the other hand, are generated when a certain combination of selection criteria (or filters) is applied on the raw metrics.Aggregates are derived metrics. Average, count, distinct, maximum, minimum, and sum are some selection criteria (or filters) applied on raw metrics to derive aggregates.\nFig. 1: Deriving aggregates from raw metrics by applying necessary filters\n\nData Sources: We pull usage data from your data infrastructure. This usage data can be either raw metrics or aggregates.\n\nData sourceDescriptionAuth0Auth0 is a flexible, drop-in solution to add authentication and authorization services to your applications.BigQueryBigQuery is a serverless and cost-effective enterprise data warehouse that works across clouds and scales with your data.CockroachDBA distributed SQL database designed for speed, scale, and survival.Google SheetsAn online spreadsheet editor from Google.LookerYour unified business intelligence platform. Self-service. Governed. Embedded.MetabaseAn open-source business intelligence platform.MongoDBCross-platform document-oriented database.MySQLAn open-source relational database management system.PostgreSQLPostgreSQL is a powerful, open source object-relational database system with over 35 years of active development that has earned it a strong reputation for reliability, feature robustness, and performance.QuickBooksAn online accounting software for small businesses.RedshiftAmazon Redshift is a data warehouse product which forms part of the larger cloud-computing platform Amazon Web Services.SnowflakeData platform as a self-managed service.\n\nRaw Metrics: You push usage data to Zenskar. This usage data can be either raw metrics or aggregates.\n\nAPICreate raw metricPost raw metric\n\nFinally, derive aggregates from raw metrics. There are two types of queries you can write:\n\nAggregate query: SQL query to create a intermediate aggregate table, aggregates, to hold billable aggregates for all customers in a given billing period. This query is optional if your data source contains aggregates (not raw metrics).\nCustomer-specific query: Mandatory SQL query to fetch customer-specific billable aggregates from the aggregates table.\n\nStep 3: Create products\n🔖ProductIn Zenskar, a product is any service or product you sell to your customer as part of a contract.In a metered product, you measure customer activity or consumption of resources in a given period.In a non-metered product, you do not measure customer activity or consumption of resources. The number of units purchased and the charges are defined in the contract.\nThe legal contract you sign with your customer contains details of:\n\nall products\npricing models associated with those products\n\nBased on your legal contract, create appropriate products in Zenskar. Common pricing models are listed below:\nPricing modelFlat feePer-unitVolumeTieredPackageMatrix\n\nStep 4: Create contracts\nPlan\nDo you want a reusable contract template that can be further customized for special cases? If yes, create a plan.\n🔖PlanA plan is a reusable contract pattern that contains product and feature definitions.A plan can be used as a guide to make tangible Zenskar contracts.\nA contract that is based on a plan will inherit all the products and features of the plan it is based on. You can override the plan values to create customized contracts.\n\nContract\nIf reusable contract templates are not needed, you can create a contract directly using products. Else, you can use a contract template as base to create customized contracts.\n🔖ContractA contract, in general, is a formal and legally binding agreement between you and your customer. This is an all-encompassing document that defines how you and your customer will conduct business. However, in Zenskar, the concept of a contract refers only to a subset of the general contract and contains data related to usage, pricing models, and other billing determinants.\nContract typesPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesDocumentation for many more contract types coming soon.\n\nStep 5: Generate invoices\nGenerate invoices.Updated 13 days ago Life cycle of an invoiceCredit notesTable of Contents\n\nStep 1: Create a customer\n\nStep 2: Help Zenskar ingest usage data\n\nStep 3: Create products\n\nStep 4: Create contracts\n\nPlan\nContract\n\nStep 5: Generate invoices\n\n"
  },
  {
    "id": "chunk_41",
    "document": "Google Sheets.txt",
    "chunk_index": 0,
    "content": "Google Sheets\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceGoogle SheetsSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Google Sheets🐕‍🦺 Setup guide\nThis guide will help you set up Google Sheets as a data source for Zenskar.\n🚧Prerequisites\nA Google Cloud Platform (GCP) project.\nGoogle Sheets API must be enabled in your GCP project\nYou must possess a Service Account Key with access to the Google Sheets spreadsheet you want to replicate\nURL of the Google spreadsheet you want to sync.\n\nSet up GCP\nCreate a service account\n\nOpen the Service Accounts page in your Google Cloud console.\nSelect an existing project, or create a new project.\n\nAt the top of the page, click + CREATE SERVICE ACCOUNT.\n\nEnter a name and description for the service account, then click CREATE AND CONTINUE.\n\nUnder Service account permissions, select the roles to grant to the service account, then click Continue. We recommend the Viewer role.\n\nGenerate a key\n\nGo to the APIs and services page and click on the email address of the service account you just created.\n\nIn the Keys tab, click the ADD KEY drop-down menu, and click on the Create new key option.\n\nSelect JSON as the key type, and click CREATE. This will generate and download the JSON key file that you'll use for authentication.\n\nEnable the Google Sheets API\n\nGo to the API Library page.\nEnsure that the correct project is selected at the top of the page.\nFind and select the Google Sheets API from the API library.\nClick ENABLE.\n\n📚NoteIf your spreadsheet is viewable by anyone with its link, no further action is needed. If not, give your Service Account access to your spreadsheet.\n⚙️ Set up data source and type\n\nLog into your Zenskar account.\nIn the left navigation bar, click Metering > Data Sources. In the top-right corner, click + ADD DATA SOURCE.\nIn the Set Up Source section of the Add New Data Source page, enter a name for the Google Sheets data source connection.\nSelect Google Sheets from the Source Type drop-down menu.\n\n⚙️ Configure data source\nConfigure the following options in the Source Config section of the Add New Data Source page:\n\nIn Row Batch Size, define the number of records you want the Google API to fetch at a time. The default value is 200.\n\n🚧NoteThe Google API rate limit is 100 requests per 100 seconds per user and 500 requests per 100 seconds per project. Zenskar respects these rate limits and batches requests to the API in order to efficiently pull data.\n\nSelect the Service Account Key Authentication option from the Authentication Type drop-down menu.\nIn the Service Account Information textbox, enter your service account key in JSON format.\n\n📚InformationZenskar's Google Sheets data-source connector pulls data from a single Google Sheets spreadsheet. To replicate multiple spreadsheets, set up multiple Google Sheets data sources.\n🚧PermissionsPlease make sure the Service Account has the Project Viewer permission.\n👍SecurityZenskar only accesses the spreadsheet you want to replicate. We do not access any other file in your Google Drive.\n\nIn the Spreadsheet Link textbox, enter the link to the Google Sheets spreadsheet. To get the link, go to the Google spreadsheet you want to sync, click Share in the top right corner, and click Copy link.\nClick on the SAVE SOURCE button.\nYou will be taken to the Sync Required Tables & Columns page where you can select the tables and columns you would like to sync with Zenskar.\n\nEach individual sheet in a Google Sheets spreadsheet is treated as a separate table in Zenskar's database.\n\nYou can choose which sheet to sync with Zenskar.\n\nAll columns within a sheet are treated as columns in corresponding tables in the destination database.\n\nYou can choose which columns to sync with Zenskar.\n\nClick on the FINISH SETUP button.\nUpdated 17 days ago Databricks LakehouseLookerTable of Contents\n\n🐕‍🦺 Setup guide\n\nSet up GCP\n⚙️ Set up data source and type\n⚙️ Configure data source\n\n"
  },
  {
    "id": "chunk_42",
    "document": "Hierarchy of default accounts.txt",
    "chunk_index": 0,
    "content": "Hierarchy of default accounts\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceHierarchy of default accountsSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Hierarchy of default accountsThe hierarchy of default accounts provided by Zenskar is described in this article.\n📚DefinitionIn Zenskar, a business entity (or entity) is a company wholly controlled by another company called a holding company or parent. A business entity is also known as a subsidiary.In Zenskar, an organization is the holding company or parent that wholly controls all business entities.\nAssets\n\nCash: a type of current asset account for all money owned by the entity.\nAccounts receivable: money that an entity expects to receive for services and products already delivered.\n\nPayment gateways: money than an entity expects to receive from payment gateways.\nCustomers: money that an entity expects to receive from its customers.\n\nUnbilled revenue: money that an entity has earned by providing services or products but has not billed its customers for.\n\nLiabilities\n\nCustomer wallet: balance that a customer can use as an offset against billed amount.\nAccounts payable: money that an entity must pay to its vendors. Typical payable items include supplier invoices, legal fees, contractor payments, and so on.\nDeferred revenue: also known as unearned revenue, deferred revenue is a type of contract liability that denotes money that an entity has billed its customers for but has not earned it yet by delivering the goods or services.\n\n🚧NoteDeferred revenue is considered a liability to the entity because there is a possibility that the service or product may not be delivered, or the customer might cancel the order.Deferred revenue is the opposite of unbilled revenue.\n\nSales tax: money that an entity must pay as taxes in appropriate tax jurisdictions.\nContra accounts receivable: in general, a contra account reduces the value of a related asset account. In Zenskar, contra account accounts for money that an entity must pay to other entities in the form of refunds, thereby reducing the value of cash account:\n\nCustomers: refund amount to be paid by an entity to its customers.\nPayment gateways: refund amount to be paid by an entity to a payment gateway.\n\nIncome\n\nSales and services revenue: the default revenue account for accrued revenue of the entity from its main activities like sales and services.\nOther revenue: the alternate revenue account for accrued revenue of the entity from side activities that is unrelated to the entity's day-to-day activities, such as dividend income or profiits from investments.\n\nExpenses\n\nSales returns and allowances: expenses due to sales returns or promotional allowances given to customers.\nTax withheld: tax paid by an entity on behalf of the customer.\nPayment gateway fees: expense incurred due to payment gateway charging some transaction fees.\nUpdated 17 days ago AccountingCreditsTable of Contents\nAssets\nLiabilities\nIncome\nExpenses\n\n"
  },
  {
    "id": "chunk_43",
    "document": "How to edit an invoice.txt",
    "chunk_index": 0,
    "content": "How to edit an invoice\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceHow to edit an invoiceSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by How to edit an invoice🚧Prerequisite\nOnly a draft invoice can be edited.\nOnly credit notes can be issued against approved, paid, and partially paid invoices.\n\nEdit a draft invoice\n\nIn the side panel, navigate to Invoices.\nClick on the draft invoice you would like to scrutinize.\n\n🔖NoteA draft invoice can be identified by the DRAFT suffix in the name or by its status tag in the Status column, as shown below.\n\nIn the Invoice Breakdown section, click on the Edit link available for each product in a contract.\n\nEdit the invoice. You may choose to edit one or more of the products. Further, there is no limit to the number of times you can edit a draft invoice.\n\nClick on the SAVE link.\nClick on the REGENERATE INVOICE button to generate a preview of the latest invoice.\n\nIssue credit notes against approved, paid, and partially paid invoices\n\nIn the side panel, navigate to Invoices.\nClick on the approved invoice you would like to scrutinize.\n\n🔖NoteAn approved invoice can be identified by its status tag in the Status column, as shown below.\n\nClick on the ISSUE CREDIT NOTE button on the Invoices page.\nA panel will emerge from the right side:\n\nEnter the credit note amount: any amount less than or equal to the invoice amount can be entered.\n\n🔖NoteIf you wish to issue a full refund, there are two conditions to be noted:\nNo credit notes were issues against the approved invoice earlier. In this case, enter an amount equal to the original invoice amount.\nOne or more credit notes not equaling in amount to the invoice amount were issued against the approved invoice earlier. In this case, enter an amount equal to the current invoice amount, which will be lesser than the original amount.\n\nClick on the Submit button.\n\nThe approved invoice will be marked as void. The credit notes will appear as invoice line items in the new invoice.\n\nUpdated 17 days ago SAML authenticationHow to edit historical dataTable of Contents\nEdit a draft invoice\nIssue credit notes against approved, paid, and partially paid invoices\n\n"
  },
  {
    "id": "chunk_44",
    "document": "How to edit historical data.txt",
    "chunk_index": 0,
    "content": "How to edit historical data\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceHow to edit historical dataSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by How to edit historical dataThe need for editing historical data\nEditing historical data can be necessary for several reasons:\n\nError correction: Mistakes in data entry or processing can lead to inaccuracies. Correcting these errors ensures the data reflects true events or values.\n\nCompliance and regulations: Certain industries have strict regulations that may require updates to historical data to remain compliant, especially if the data impacts financial reporting or legal obligations.\n\nImproved analysis: As new insights or methodologies emerge, historical data may need to be adjusted to ensure analyses are relevant and accurate, allowing for better decision-making.\n\nData quality enhancement: Over time, organizations may refine their data quality standards. Updating historical records can help align them with current standards.\n\nBusiness strategy changes: Shifts in business strategy might necessitate alterations in historical data for better reporting or strategic analysis.\n\nBy carefully managing these edits, you can ensure that the historical data remains a valuable asset for analysis and decision-making.\n🚧WarningEditing historical data in a database should be approached with caution, as it can affect data integrity and accuracy.\nHow to edit historical data\nHow you edit the data depends on how the data was ingested by Zenskar:\n\nIf you used usage event APIs to send data to Zenskar, refer to the section Edit historical data using usage-event APIs.\nIf you used data-source connectors, refer to the following sections conditionally:\n\nEdit historical data when data source supports remote querying\nEdit historical data when data source does not support remote querying\n\nEdit historical data using usage-event APIs\nEdit historical data when billable metrics are derived using the COUNT SQL aggregate function\nIn this example, you rent out your office space on a per day basis. The following data schema is used for sending usage events to Zenskar:\nJSON{\n  \"data\": {\n    \"Id\": \"string\",\n    \"was_office_space_used\": \"string\"\n  },\n  \"timestamp\": \"timestamp\",\n  \"customer_id\": \"string\"\n}\nLet us assume that the usage event APIs are used to send the following data to Zenskar:\ndata.Iddata.was_office_space_usedtimestampcustomer_idc01Yes2023-04-28T13:26:05.017000acc93335-aabb-43e9-aabb-138ac880b715c02Yes2023-04-29T13:26:05.017000acc93335-aabb-43e9-aabb-138ac880b715c03Yes2023-04-30T13:26:05.017000acc93335-aabb-43e9-aabb-138ac880b715\nThe billable metric, in this example, is the number of days the office space was used. The following SQL query uses COUNT aggregate function on the data.was_office_space_used column to calculate the billable metric.\nSQLSELECT \n\t\tCOALESCE(COUNT(CASE WHEN data.was_office_space_used = 'Yes' THEN 1 ELSE null END)) AS \"quantity\"FROM \n    your_table\nWHERE \n    DATE(\"timestamp\") >= DATE({{start_date}}) AND\n    DATE(\"timestamp\") <= DATE({{end_date}}) AND\n    \"customer_id\" = CAST({{customer.external_id}} AS String)\n\nBreakdown of the SQL query\nSELECT clause:\nSQLCOALESCE(COUNT(CASE WHEN data.was_office_space_used = 'Yes' THEN 1 ELSE null END)) AS \"quantity\"\n\nCOUNT: This function counts non-null values.\nCASE statement: checks if the column data.was_office_space_used has the value Yes. If it does, it returns 1; otherwise, it returns null.\nCOALESCE: this function returns the first non-null value in the list. If there are no instances where data.was_office_space_used is Yes, COUNT would return 0, and COALESCE ensures that it is treated as such.\n\nFROM clause:\nSQLFROM your_table\nReplace your_table with the actual name of the table containing your data.\nWHERE Clause:\nSQLWHERE  \n    DATE(\"timestamp\") >= DATE({{start_date}}) AND  \n    DATE(\"timestamp\") \\<= DATE({{end_date}}) AND  \n    \"customer_id\" = CAST({{customer.external_id}} AS String)\n\nDATE(\"timestamp\"): This converts the timestamp field to a date format, ensuring the comparison works with date values.\nDATE({{start_date}}) and DATE({{end_date}}): These placeholders represent the start and end dates for filtering.\ncustomer_id = CAST({{customer.external_id}} AS String): This checks if the customer_id in the table matches the provided external_id, which is also cast to a string to ensure type compatibility.\n\nMethod 1: modify the data schema by introducing a new data field\n🔖NoteThe examples given in this document are for reference only. The ideas given herein are guidelines and not rules. You must adapt the ideas given in this document as per your use case.\nYou realize that an error was made in data entry. To correct the error, you decide to introduce a new field in the data schema. In this example, we will use a boolean type.\nJSON{\n  \"data\": {\n    \"Id\": \"string\",\n    \"was_office_space_used\": \"float\",\n    \"deduct_from_count\": \"bool\"\n  },\n  \"timestamp\": \"timestamp\",\n  \"customer_id\": \"string\"\n}\nThe following is the database table schema that Zenskar will create.\ndata.Iddata.was_office_space_useddata.deduct_from_counttimestampcustomer_idc01Yes2023-04-28T13:26:05.017000acc93335-aabb-43e9-aabb-138ac880b715c02Yes2023-04-29T13:26:05.017000acc93335-aabb-43e9-aabb-138ac880b715c03Yes2023-04-30T13:26:05.017000acc93335-aabb-43e9-aabb-138ac880b715c04NoTrue2023-05-01T13:26:05.017000acc93335-aabb-43e9-aabb-138ac880b715\nThe following SQL query calculates the adjusted count of data.was_office_space_used column by taking into account the count of the newly introduced data.deduct_from_count column:\nSQLSELECT \n\t\tCOALESCE(COUNT(CASE WHEN data.was_office_space_used = 'Yes' THEN 1 ELSE null END)) - COUNT(NULLIF(data.deduct_from_count,'')) AS \"quantity\"\nFROM \n    your_table\nWHERE \n    DATE(\"timestamp\") >= DATE({{start_date}}) AND\n    DATE(\"timestamp\") <= DATE({{end_date}}) AND\n    \"customer_id\" = CAST({{customer.external_id}} AS String)\n\nBreakdown of the SQL query\nSELECT clause:\n\nCOALESCE(...): This function returns the first non-null value in its list of arguments. Here, it is used to ensure that if the result of the subtraction is null, which can happen if there are no rows, it will return 0 instead.\nCOUNT(data.was_office_space_used): This counts the number of non-null entries in the data.was_office_space_used column.\nCOUNT(NULLIF(data.deduct_from_count, '')): The NULLIF function returns NULL if data.deduct_from_count is an empty string (''), effectively counting only non-empty entries. So, this counts the number of non-empty entries in data.deduct_from_count. The entire expression calculates the difference between the count of data.was_office_space_used and the count of non-empty data.deduct_from_count.\n\nFROM clause specifies the table from which the data is being queried.\nWHERE clause:\n\nDATE(\"timestamp\") >= DATE({{start_date}}) AND DATE(\"timestamp\") <= DATE({{end_date}}): this filters the results to include only those records where the timestamp is within the specified date range, defined by the variables {{start_date}} and {{end_date}}.\n\"customer_id\" = CAST({{customer.external_id}} AS String): This filters the results to include only rows where the customer_id matches the external_id, after converting external_id to a string.\n\nMethod 2: introduce a new usage event for deduction\nLet us assume that you used the following data schema for sending usage events:\nJSON{\n  \"data\": {\n    \"Id\": \"string\",\n    \"Premises_used\": \"string\"\n  },\n  \"timestamp\": \"timestamp\",\n  \"customer_id\": \"string\"\n}\nLet us assume that the usage event APIs are used to send the following data to Zenskar:\ndata.Iddata.Premises_usedtimestampcustomer_idc01Yes2023-04-28T13:26:05.017000acc93335-aabb-43e9-aabb-138ac880b715c02Yes2023-04-29T13:26:05.017000acc93335-aabb-43e9-aabb-138ac880b715c03Yes2023-04-30T13:26:05.017000acc93335-aabb-43e9-aabb-138ac880b715\nYou may define another schema that can be used for deduction:\nJSON{\n  \"data\": {\n    \"Id\": \"string\",\n    \"Error\": \"string\"\n  },\n  \"timestamp\": \"timestamp\",\n  \"customer_id\": \"string\"\n}\nLet us assume that the usage event APIs are used to send the following data to Zenskar for deduction:\ndata.Iddata.Errortimestampcustomer_idc01Yes2023-05-15T13:26:05.017000acc93335-aabb-43e9-aabb-138ac880b715c02Yes2023-05-29T13:26:05.017000acc93335-aabb-43e9-aabb-138ac880b715\nSQLSELECT \n    (SELECT COUNT(data.was_office_space_used) FROM your_table) - \n    (SELECT COUNT(data.Error) FROM your_error_table) AS \"quantity\";\n\nEdit historical data when billable metrics are derived using the SUM aggregate function\nLet us assume that you used the following data schema for sending usage events:\nJSON{\n  \"data\": {\n    \"Id\": \"string\",\n    \"Usage\": \"float\"\n  },\n  \"timestamp\": \"timestamp\",\n  \"customer_id\": \"string\"\n}\nLet us assume that the usage event APIs are used to send the following data to Zenskar:\ndata.Iddata.Usagetimestampcustomer_idc01301.42023-04-28T13:26:05.017000acc93335-aabb-43e9-aabb-138ac880b715c025002023-04-29T13:26:05.017000acc93335-aabb-43e9-aabb-138ac880b715c03104.82023-04-30T13:26:05.017000acc93335-aabb-43e9-aabb-138ac880b715\nYou realize that for data.Id equaling c02 should be 475 and not 500. In this case, you can make another usage event API call to add another unique data.Id with a data.Usage of -25, as shown below.\ndata.Iddata.Usagetimestampcustomer_idc01301.42023-04-28T13:26:05.017000acc93335-aabb-43e9-aabb-138ac880b715c025002023-04-29T13:26:05.017000acc93335-aabb-43e9-aabb-138ac880b715c03104.82023-04-30T13:26:05.017000acc93335-aabb-43e9-aabb-138ac880b715c04-252023-05-01T13:26:05.017000acc93335-aabb-43e9-aabb-138ac880b715\nWhen aggregating using the SUM function, the negative entry in the data.Usage column will account for the data error.\nSQLSELECT \n    SUM(data.Usage) AS \"quantity\"\nFROM \n    your_table\nWHERE \n    DATE(\"timestamp\") >= DATE({{start_date}}) AND\n    DATE(\"timestamp\") <= DATE({{end_date}}) AND\n    \"customer_id\" = CAST({{customer.external_id}} AS String)\n\nEdit historical data when billable metrics are derived using the MAX, AVG, MIN, and UNIQUE COUNT aggregate functions\nTechniques similar to the ones mentioned for COUNT and SUM aggregate functions can be used for MAX, AVG, MIN, and UNIQUE COUNT` aggregate functions.\nEditing historical data using ROW_NUMBER() OVER (PARTITION BY) SQL function\nThe ROW_NUMBER() function in SQL is a window function that assigns a unique sequential integer to rows within a partition of a result set. It is often used to uniquely identify rows within groups of data. The PARTITION BY clause is used to define how the rows are divided into groups.\nBreakdown of ROW_NUMBER() OVER (PARTITION BY)\n\nROW_NUMBER(): generates a unique number for each row in the result set, starting from 1 for the first row in each partition.\nOVER: specifies the window over which the function operates. It can include:\nPARTITION BY: defines the groups (partitions) within the data. Each partition is treated independently when generating row numbers.\n\nLet us assume that the usage event APIs are used to send the following data to Zenskar:\ndata.Iddata.Usagetimestampcustomer_idc01301.42023-04-28T13:26:05.017000acc93335-aabb-43e9-aabb-138ac880b715c025002023-04-29T13:26:05.017000acc93335-aabb-43e9-aabb-138ac880b715c03104.82023-04-30T13:26:05.017000acc93335-aabb-43e9-aabb-138ac880b715\nYou realize that for data.Id equaling c02, data.Usage should be 475 and not 500. In this case, you can make another usage event API call to add a row with data.Id equaling c02,  data.Usage of 475, and latest timestamp, as shown below.\ndata.Iddata.Usagetimestampcustomer_idc01301.42023-04-28T13:26:05.017000acc93335-aabb-43e9-aabb-138ac880b715c025002023-04-29T13:26:05.017000acc93335-aabb-43e9-aabb-138ac880b715c024752023-05-01T13:26:05.017000acc93335-aabb-43e9-aabb-138ac880b715c03104.82023-04-30T13:26:05.017000acc93335-aabb-43e9-aabb-138ac880b715\nThe following query deduplicates the readings based on the most recent timestamp.\nSQLWITH DeduplicatedReadings AS (\n    SELECT \n        data.Id,\n        data.Usage,\n        timestamp,\n        customer_id,\n        ROW_NUMBER() OVER (PARTITION BY data.Id ORDER BY timestamp DESC) AS rn\n    FROM \n        device_readings\n)\nSELECT \n \t\t\t\tdata.Id,\n        data.Usage,\n        timestamp,\n        customer_id,\nFROM \n    DeduplicatedReadings\nWHERE \n    rn = 1;\n\nThe above SQL query will give the following result:\ndata.Iddata.Usagetimestampcustomer_idc01301.42023-04-28T13:26:05.017000acc93335-aabb-43e9-aabb-138ac880b715c024752023-05-01T13:26:05.017000acc93335-aabb-43e9-aabb-138ac880b715c03104.82023-04-30T13:26:05.017000acc93335-aabb-43e9-aabb-138ac880b715\n\nEdit historical data using data-source connectors\nEdit historical data when data source supports remote querying\nEdit data in your database and let Zenskar take care of the rest of the workflow.\nEdit historical data when data source does not support remote querying\nEdit data in your database and let the periodic sync take care of the syncing the updated data with Zenskar.Updated 13 days ago How to edit an invoiceHow to manage API keysTable of Contents\n\nThe need for editing historical data\n\nHow to edit historical data\n\nEdit historical data using usage-event APIs\n\nEdit historical data when billable metrics are derived using the COUNT SQL aggregate function\n"
  },
  {
    "id": "chunk_45",
    "document": "How to edit historical data.txt",
    "chunk_index": 1,
    "content": "Breakdown of the SQL query\nMethod 1: modify the data schema by introducing a new data field\nMethod 2: introduce a new usage event for deduction\nEdit historical data when billable metrics are derived using the SUM aggregate function\nEdit historical data when billable metrics are derived using the MAX , AVG , MIN , and UNIQUE COUNT aggregate functions\nEditing historical data using ROW_NUMBER() OVER (PARTITION BY) SQL function\nBreakdown of ROW_NUMBER() OVER (PARTITION BY)\n\nEdit historical data using data-source connectors\n\nEdit historical data when data source supports remote querying\nEdit historical data when data source does not support remote querying\n\n"
  },
  {
    "id": "chunk_46",
    "document": "How to manage API keys.txt",
    "chunk_index": 0,
    "content": "How to manage API keys\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceHow to manage API keysSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by How to manage API keysZenskar allows you to create API keys that can be used for authentication. A few scenarios where API key can be used for authentication are listed below:\n\nYou can authenticate an API request to Zenskar by adding API key to the x-api-key request header.\nThird-party software such as Salesforce require Zenskar's API key for integration.\n\nCreate an API key\n\nIn the side panel, click on the drop-up menu with your name.\n\nClick on the Settings option on the drop-up menu.\nOn the Settings page, navigate to the API Keys tab.\nClick on the + CREATE API KEY button.\nEnter a descriptive name for the key and click on the GENERATE API KEY button.\n\nFig. 1: Create a new API key.\n\nClick on the Copy button. Save the API key somewhere safe. The API key cannot be viewed or copied after this step.\n\nFig. 2: Copy the newly created API key.\nDelete an API key\n\nIn the side panel, click on the drop-up menu with your name.\nClick on the Settings option on the drop-up menu.\nOn the Settings page, navigate to the API Keys tab.\nClick on the kebab menu on the row containing the API key you wish to delete, and select the Delete option.\n\nUpdated 17 days ago How to edit historical dataTable of Contents\nCreate an API key\nDelete an API key\n\n"
  },
  {
    "id": "chunk_47",
    "document": "HubSpot.txt",
    "chunk_index": 0,
    "content": "HubSpot\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceHubSpotSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by HubSpot⚙️ Connect with HubSpot\n\nClick on the named drop-up menu located at the bottom of the side panel.\nClick on Setting menu option.\n\nFig. 1: Named drop-up menu\n\nOn the Settings page, move to the Connectors tab.\nClick on CRM category to access the HubSpot connector.\nClick on the Connect button on the HubSpot card, as shown in Fig. 1.\n\nFig. 1: Named drop-up menu\n\n⚙️ Connector setup\nThere are three Zenskar objects available for syncing with HubSpot:\n\nContract\nCustomers\nProducts\n\nThere are three sync modes available:\n\nImport only: a one-way sync in which data can be imported from HubSpot to Zenskar\nExport only: a one-way sync in which data can be exported from Zenskar to HubSpot\nImport & Export: a two-way sync of data between Zenskar and HubSpot\n\nYou must select the objects you wish to sync. You must also select the sync type.\n🚧NoteFor a contract, export works only if the contract was created in HubSpot.\nFig. 2: Modules and sync types\n\n🔁 Data mapping\nA customer object in Zenskar maps to a company object in HubSpot\nZenskar customer propertyHubSpot company propertyFront-end valuecustomer_namenameemailbilling_email__zenskar_Billing Email (Zenskar)external_idcompany_idCompany Idaddress.line1addressaddress.line2address2address.citycityaddress.statestateaddress.postal_codezipaddress.countrycountry\nA contract object in Zenskar maps to a deal object in HubSpot\nZenskar contract propertyHubSpot deal propertyFront-end valuenamedealnameDeal Namestart_date (refer the note below)contract_start_date__zenskar_Contract Start Date (Zenskar)end_date (refer the note below)contract_end_date__zenskar_Contract End Date (Zenskar)currencydeal_currency_codeCurrency (refer currency settings in HubSpot)\nWhen you create a deal in HubSpot, you must create two properties with the following labels for integration with Zenskar:\n\nContract Start Date (Zenskar)\n\nContract End Date (Zenskar)\n\nLabels are used in the HubSpot front end, as shown below:\n\nHubSpot uses labels to create internal names for integration partners like Zenskar. For the labels listed above, HubSpot creates the following internal names:\n\ncontract_start_date__zenskar_ for Contract Start Date (Zenskar)\n\ncontract_end_date__zenskar_ for Contract End Date (Zenskar)\n\n🚧NoteMake sure that you use the labels listed above without any modifications. Any modifications in the labels will result in internal names that are incompatible with Zenskar's requirements. Consequently, the integration will fail. Remember that an internal name is a unique identifier that is used when syncing with integration partners like Zenskar. Once created, an internal name cannot be edited.For example, HubSpot creates contract_start_date as internal name for the label Contract Start Date. However, Zenskar requires the the internal name contract_start_date__zenskar_ for integration to work, which is derived from the label Contract Start Date (Zenskar).\nCreate a new property labeled Contract Start Date (Zenskar)\n\nCreate a new property labeled Contract End Date (Zenskar)\n\nA product object in Zenskar maps to a product object HubSpot\nZenskar product propertyHubSpot product propertypricepricequantityquantitycurrencyhs_line_item_currency_codelink_idzenskar_link_id\n\nZenskar will always use the per-unit pricing model.\nZenskar will always use the prepaid billing type.\nDiscounts will be:\n\npercentage-based if the product in HubSpot offers percent discount (HubSpot internal name: hs_discount_percentage)\nfixed if the product in HubSpot offers unit discount (HubSpot internal name discount)\n\n📚NoteProduct properties that are required for billing but not for sales can stay in Zenskar product object,\nand mapping with HubSpot product object can be performed through zenskar_link_id.\nCreating a full-fledged test account in HubSpot\nYou can use test accounts to test an integration without affecting any real HubSpot data. Test accounts have access to Enterprise versions of the HubSpot Marketing, Sales, and Service Hubs, allowing you to test most HubSpot tools and APIs.\nTest accounts are created and managed within developer accounts. If you don’t already have a developer account, you can sign up for one here.\nOnce you sign in to your developer account, you'll have the option of creating an app or creating a test account.\n\nYou can also get to the Testing dashboard using the Testing link in the top navigation menu.\nOn the Testing dashboard, click the orange button that says “Create test account.” This page will also show any existing test accounts, their expiration date, and connected apps. Once your test account is created, you can install your integration.\n\nExpiration and renewal\nTest accounts expire after 90 days. They can be renewed in two ways:\nManually: Go to your developer account’s Testing dashboard and hover over the row for the test account you want to renew. Click the “Renew” button. (See above.) This resets the 90-day clock for your account. Accounts can be manually renewed up to 90 days after their original expiration date.\nUsing an API call: If your test account was authenticated using an OAuth access token, any API calls made to that account will automatically renew it.\n\nThis only applies to API requests made using OAuth tokens generated from an application in the same developer account as the test account you want to renew.\nRenewals must be made no more than 30 days before the test account’s expiration date\nAPI requests made using OAuth outside the 30-day window will not automatically renew the test account.\nUpdated 13 days ago DealHubMicrosoft Dynamics 365Table of Contents\n\n⚙️ Connect with HubSpot\n\n⚙️ Connector setup\n\n🔁 Data mapping\n\nA customer object in Zenskar maps to a company object in HubSpot\nA contract object in Zenskar maps to a deal object in HubSpot\nA product object in Zenskar maps to a product object HubSpot\n\nCreating a full-fledged test account in HubSpot\n\nExpiration and renewal\n\n"
  },
  {
    "id": "chunk_48",
    "document": "Installation and setup of Zenskar’s package for Salesforce.txt",
    "chunk_index": 0,
    "content": "Installation and setup of Zenskar’s package for Salesforce\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceInstallation and setup of Zenskar’s package for SalesforceSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Installation and setup of Zenskar’s package for SalesforceOverview\nSalesforce package provided by Zenskar allows you to sync your Salesforce account with Zenskar and the flexibility to automate your processes using Flow.\n\nPrerequisites\n\nYou must have permission to install packages in your Salesforce account.\nYou must obtain an API key from Zenskar. Refer to How to manage API keys for details.\nGet your organization Id by navigating to the General tab on the Settings page.\n\nInstallation\n\nReach out to [email protected] for the Salesforce package download link.\nYou will be redirected to the following screen. You can choose one of the following options:\n\nInstall for Admins Only\nInstall for All Users (recommended)\nInstall for Specific Profiles\n\n🚧NoteYou must login with an account credential that has the required permissions to install the package.\n\nConfiguration\nConfigure Zenskar API key and Organisation Id\n\nOn successful installation of the package, navigate to the Setup Page on Salesforce.\n\nSearch for Named Credentials, as shown below.\n\nIn Named Credentials you will see the following labels:\n\nZenskarEndpoint\nZenskarStagingEndpoint\n\nClick on the ZenskarEndpoint label.\nOn the ZenskarEndpoint page**,** click on the value under External Credentials in the Authentication section**.** The value must be Zenskar, if the package was successfully installed.\n\nOn the Zenskar named-credentials  page, under the Principals section, click on the Actions drop-down menu available for the ZenskarPrincipal parameter.\n\nSelect the Edit option from the Actions drop-down menu.\n\nIn the Edit Principal modal dialog, add the following:\n\nParameter NameSequence NumberAPIKey1Organisation2\n\nOnce added, click on the Save button to save the configuration.\n\nProvide permission to users for Zenskar External Principal\nFor more information\nRefer to thisSalesforce guide.\n\nOn the Setup page, search for Profiles\n\nOn the Profile page, search for System Administrator, as shown below.\nClick on the System Administrator profile.\n\nYou will arrive at the Profiles page. Click on Enabled External Credential Principal Access to go to the corresponding settings page.\n\nClick on the Edit button beside the Enabled External Credential Principal Access option, as shown below.\n\nSelect Zenskar - ZenskarPrincipal from the Available External Credential Principals list.\nClick on the Add button to move the selection from the Available External Credential Principals to Enabled External Credential Principals list, as shown below.\n\nOnce moved, click on the Save button to save the configuration. Your API keys and Organisation are now ready to use.\n\n🔖NoteYou can repeat the above steps to provide access to other users.\nSet up Salesforce object layout\nYou can enable Custom Fields on Objects Layout to allow seamless integration.\nAvailable custom fields\nAccountAutoCharge Invoice (Zenskar)CustomerID (Zenskar)Email (Zenskar)Email Communication (Zenskar)External ID (Zenskar)\nOpportunityContract End Date (Zenskar)Contract ID(Zenskar)Contract Renew Policy (Zenskar)Contract Start Date (Zenskar)\nProductProductID (Zenskar)\nPriceBookEntryLinkID (Zenskar)\n🔖NoteLinkID (Zenskar) acts as the Reference ID on Zenskar.\nNeeded only if creating per-unit pricing on SalesforceBilling Cadence Every (Zenskar)Billing Cadence Offset (Zenskar)Billing Cadence Period (Zenskar)Discount Percentage (Zenskar)Is Recurring(Zenskar)Pricing Unit (Zenskar)\n🔖NoteIf you choose to use Salesforce fields, update Flows accordingly.\n\nGo to the Setup Home page.\nClick on Object Manager and search for Account.\n\nClick on Account to arrive at the Account page.\n\nOn the accounts page, click on Page Layouts in the left sidebar.\nClick on Account Layout, as shown below**.**\n\nOn the Account Layout page, all available fields are shown in the Account Layout section, whereas the fields associated with account are shown in the Account Sample section.\n\nOn the Account Layout page, move all the fields with (Zenskar) suffix to Account Information section.\nOnce added, click on the Save button.\n\nSuccessful completion of this activity will make all Zenskar fields available when you create or edit an account on Salesforce.\n🔖NoteSteps 1-8 can be repeated to show custom fields in layout for Opportunity, Product, and PricebookEntry.\nOnce Account, Opportunity and PriceBookEntry layouts are updated, your Salesforce account is properly integrated with Zenskar.Updated 17 days ago SalesforceUse default FlowTable of Contents\n\nOverview\n\nPrerequisites\n\nInstallation\n\nConfiguration\n\nConfigure Zenskar API key and Organisation Id\nProvide permission to users for Zenskar External Principal\nSet up Salesforce object layout\n\n"
  },
  {
    "id": "chunk_49",
    "document": "Integrating your ERP software with Zenskar.txt",
    "chunk_index": 0,
    "content": "Integrating your ERP software with Zenskar\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceIntegrating your ERP software with ZenskarSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Integrating your ERP software with ZenskarDouble-entry accounting in Zenskar.Your accounting team may use enterprise resource planning (ERP) software, such as NetSuite and QuickBooks, for bookkeeping. Zenskar provides you the following two options for syncing data with your ERP/accounting software:\n\nYou may use Zenskar's accounting system to generate double-entry journal entries. These journal entries can be synced with the ERP software using Zenskar's ERP connectors.\nYou may use the accounting system of the ERP software to generate journal entries. Zenksar can send data related to invoices and payments (optional) to the ERP software as input.\n\n📚DefinitionDouble-entry accounting is a bookkeeping system in which each transaction affects at least two accounts and maintains a balance between debits and credits. This approach reduces the likelihood of accounting errors. Companies of all sizes use double-entry accounting to run their businesses.Double-entry accounting is required for all public companies, especially for businesses that rely on outside financing.\n\n📖 Zenskar–ERP integration\nZenskar can connect with the following ERP software:\nConnectorNetSuiteQuickBooksXeroZoho Books\n\n⚙️ Option 1: use Zenskar's accounting system to generate double-entry journal entries\nFig. 1: Using Zenskar's accounting system to generate journal entries.\nThe workflow for generating a double-entry journal entry is as follows:\n\nData related to business events, such as contract started, invoice finalized, and payment made, are needed as input by the accounting system. Any business-event data that affects the accounting system is passed into the accounting rules engine.\nThe rules engine converts these event data into double-entry journal entries that have a balanced set of debits and credits.\nThe ERP connector sends the journal entries to the ERP software.\n\n⚙️ Option 2: use the accounting system of the ERP software\nFig. 2: Using the accounting system of the ERP software to generate journal entries. The schematic of the ERP architecture is for reference only. The actual architecture of the ERP software and the way it handles journal entries may vary. Refer the documentation of the ERP software for detailed information.\nThe workflow for generating a double-entry journal entry is as follows:\n\nInvoice and payment data are needed as input by the ERP software. Zenksar uses the ERP connector to send invoice objects to the the ERP software.\n\n📚NoteZenksar may optionally send payment objects to the ERP software. You may choose to bypass Zenskar and send payment objects directly to the ERP software.\n\nInvoice and payment objects sent by Zenskar is consumed by the accounting rules engine of the ERP software.\nThe rules engine of the ERP software converts the invoice and payments objects into journal entries.\n\n📚NoteThe ERP software needs only the invoice and payment data to generate journal entries. Contract data is not necessary for this purpose and is not sent to the ERP software.Updated 17 days ago Data migration and integration optionsConsolidating invoicesTable of Contents\n📖 Zenskar–ERP integration\n⚙️ Option 1: use Zenskar's accounting system to generate double-entry journal entries\n⚙️ Option 2: use the accounting system of the ERP software\n\n"
  },
  {
    "id": "chunk_50",
    "document": "Introduction to Zenskar.txt",
    "chunk_index": 0,
    "content": "Introduction to Zenskar\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceIntroduction to ZenskarSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Introduction to Zenskar📚 What is Zenskar?\nZenskar helps you manage billing and revenue recognition at scale irrespective of the complexity of the pricing structures in your contracts. Zenskar supports simple and complex subscriptions and business models that depend on usage metering. Zenskar can ingest metering data from any data source to generate invoices. Zenskar can manage receivables and provide valuable analytics. Zenskar can help you automate any ASC 606/IFRS 15–compliant revenue recognition workflow. All this is configurable by non-technical as well as technical users.\n📚 How Zenskar does it\nZenskar has fundamentally re-imagined billing—contracts and metering—as a data engineering problem. This paradigm shift was necessary to solve a variety of hitherto unsolvable real-world problems we discovered while talking with companies, small and large.\n🖧 Third-party software integrations\nThird-party integrations refer to the process of connecting Zenskar with external software tools, services, or applications to exchange data, streamline workflows, and enhance functionality. These integrations allow Zenskar to seamlessly pull or push data from/to other platforms, creating a more comprehensive solution for businesses.\n\nPayment gatewaysERPCRM/CPQTaxStripeLearn how to use Stripe as your payment gateway.AdyenLearn how to use Adyen as your payment gateway.RazorpayLearn how to use Adyen as your payment gateway.\n🛢️Data sources\nData sources refer to the origins or locations from which data is collected, retrieved, or input into Zenksar. A data source would be any external system or tool that generates or holds relevant data for metering, billing, or revenue recognition purposes.\nZenskar supports the following data sources:\nAuth0Auth0 is a flexible, drop-in solution to add authentication and authorization services to your applications.AWS AthenaAnalyze petabyte-scale data where it lives with ease and flexibilityBigQueryBigQuery is a serverless and cost-effective enterprise data warehouse that works across clouds and scales with your data.ClickHouseClickHouse is a fast open-source column-oriented database management system that allows generating analytical data reports in real-time using SQL queries.CockroachDBCockroachDB is a cloud-native distributed SQL database designed to build, scale, and manage modern, data-intensive applications.Databricks LakehouseLakehouse architecture combines the best of data lakes and data warehouses to help you reduce costs and deliver any AI use case.Google SheetsGoogle Sheets is a spreadsheet application and part of the free, web-based Google Docs Editors suite offered by Google.LookerLooker is an enterprise platform for BI, data applications, and embedded analytics that helps you explore and share insights in real time.MetabaseMetabase is the easy, open-source way for everyone in your company to ask questions and learn from data.MongoDBMetabase is the easy, open-source way for everyone in your company to ask questions and learn from data.MySQLMySQL is an open-source relational database management system.PostgreSQLPostgreSQL is a powerful, open source object-relational database system.QuickBooksQuickBooks is an accounting software package developed and marketed by Intuit.RedshiftAmazon Redshift is a fast, fully managed cloud data warehouse that makes it simple and cost-effective to analyze all your data.ShopifyShopify is a proprietary e-commerce platform for online stores and retail POS (point-of-sale) systems.SnowflakeSnowflake Inc. is an American cloud-based data storage company.Updated 5 days ago Understanding ZenskarTable of Contents\n📚 What is Zenskar?\n📚 How Zenskar does it\n🖧 Third-party software integrations\n\n🛢️Data sources\n\n"
  },
  {
    "id": "chunk_51",
    "document": "Invoices.txt",
    "chunk_index": 0,
    "content": "Invoices\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceInvoicesSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by InvoicesOverview\nAn invoice is a document issued by a seller to a buyer that outlines the products or services provided, along with the amount due for payment. It serves as a formal request for payment, detailing the terms of the transaction, including the quantity, price, taxes, payment terms, and the total amount payable.\nZenskar ingests data from your data infrastructure to generate accurate invoices for you.\nGenerate invoice\n🚧PrerequisitesYou must create and configure contracts before generating invoices.\n\nFor active contracts, invoices are automatically generated at the end of each billing cycle.\nYou can manually generate an invoice for a contract from Contracts > select the desired contract(s) > Generate Invoice.\n\nView invoice\n\nNavigate to Invoices > Invoices in the left side panel.\nClick on the row containing the invoice you are interested in.\n\nLife cycle of an invoice\nLife cycle of an invoice refers to the stages that an invoice goes through from its creation to final payment. Refer to the documentation on the life cycle of an invoice.\nBranding invoices\nNavigate to Communications > Documents and add relevant artifacts to customize the invoices per your company's branding guidelines.\n/caUpdated 13 days ago Contract renewalLife cycle of an invoiceTable of Contents\nOverview\nGenerate invoice\nView invoice\nLife cycle of an invoice\nBranding invoices\n\n"
  },
  {
    "id": "chunk_52",
    "document": "Life cycle of an invoice.txt",
    "chunk_index": 0,
    "content": "Life cycle of an invoice\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceLife cycle of an invoiceSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Life cycle of an invoiceThe life cycle of an invoice refers to the stages that an invoice goes through from its creation to final payment. It includes several steps, from the initial agreement between buyer and seller to the closure of the transaction once payment is made. This guide helps you understand the typical life cycle of an invoice in Zenskar.\nLife cycle of an invoice\nThe following is a state diagram of an invoice in Zenskar.\n📚What is a state diagram?A state diagram, also known as a state machine diagram or state chart, is a visual representation used to model the various states an object or system can be in and how it transitions between those states.In this document, the object we are dealing with is an invoice.\n%%{\n  init: {\n    'theme': 'dark',\n    'themeVariables': {\n      'darkMode': 'true'\n    }\n  }\n}%%\n\nstateDiagram-v2\n  classDef voidEvent fill:#f00,color:white,font-weight:bold,stroke-width:2px,stroke:yellow\n  classDef deleteEvent fill:#f00,color:white,stroke-width:2px,stroke:red\n  classDef paidEvent fill:green,color:white,stroke-width:2px,stroke:green\n  classDef partiallyPaidEvent fill:#90EE90,color:black,stroke-width:2px,stroke:#90EE90\n  classDef approvedEvent fill:yellow,color:black,stroke-width:2px,stroke:yellow\n  classDef draftBlock fill:black,color:white,stroke-width:2px,stroke:black\n\n  [*] --> Draft:::draftBlock\n  Draft --> Approved: Draft approved\n  Draft --> Deleted:::deleteEvent: Draft deleted\n  note right of Deleted : Only a **draft** invoice can be deleted. Once an invoice moves to the **approved** state, it becomes a **formal record of the transaction**. As a result, it cannot be deleted.\n\n  Approved --> Paid:::paidEvent: Customer makes full payment\n  Approved:::approvedEvent --> PartiallyPaid:::partiallyPaidEvent: Customer makes partial payment\n  PartiallyPaid --> Paid:::paidEvent: Customer makes full payment\n  Paid --> [*]:Accounting\n  Approved --> Void:::voidEvent: Credit notes issued\n  Paid --> Void:::voidEvent: Credit notes issued\n  PartiallyPaid --> Void:::voidEvent: Credit notes issued\n  Void --> [*]:Accounting\n  note left of Void : If circumstances require a full refund to the customer, credit notes equal to the refund amount must be issued. As a result, an **approved**, **partially paid**, or **paid** invoice will move to the **void** state. Partial refunds also require credit notes, but the state of the invoice will remain unchanged.\n\nDraft📚 A newly generated invoice is called a draft invoice: a preliminary version that is open to modifications.\nApproved📚 Once you have reviewed the draft invoice and confirmed that the details are accurate, the draft invoice can be approved.  * Once you have verified all the details of a draft invoice, it can be approved by clicking on the Approve invoice button.🚧NoteOnce a draft invoice is approved, it becomes a formal record of a transaction between you and your customer. Relevant accounting entries are created. Therefore, unlike a draft invoice, an approved invoice cannot be edited. Once approved, any adjustments to the invoice can be made only by issuing credit notes. Therefore, it is important to scrutinize the draft invoice before approving it.\nPartially paid📚 When customers make a partial payment on an approved invoice, it becomes a partially paid invoice.\nPaid📚 When customers make a full payment on an approved invoice, it becomes a paid invoice.An approved invoice can become a paid invoice in the following ways:\nCustomer can make multiple partial payments amounting to the invoice due amount.\nCustomer can make one payment amounting to the invoice due amount.\n\nVoid📚 If circumstances require a full refund to the customer, credit notes equal to the refund amount must be issued. As a result, an approved, partially paid, or paid invoice will become void.\nIf an invoice has only been approved and no payments were made by the customer, relevant accounting adjustments are made.\nIf an invoice is already paid, then a refund is issued to the customer's source payment method.\nUpdated 13 days ago What’s NextLearn about refunds via credit notes.Credit NotesTable of Contents\nLife cycle of an invoice\n\n"
  },
  {
    "id": "chunk_53",
    "document": "Looker.txt",
    "chunk_index": 0,
    "content": "Looker\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceLookerSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by LookerOverview\nThe Looker source supports Full Refresh syncs. Zenskar will copy all rows in the tables and columns you set up for replication.\nOutput streams\nSeveral output streams are available from this source:\n\nColor Collections\nConnections\nContent Metadata\nContent Metadata Access\nDashboards\n\nDashboard Elements\nDashboard Filters\nDashboard Layouts\n\nDatagroups\nFolders\nGroups\nHomepages\nIntegration Hubs\nIntegrations\nLookml Dashboards\nLookml Models\nLooks\n\nRun Look\n\nProjects\n\nProject Files\nGit Branches\n\nQuery History\nRoles\n\nModel Sets\nPermission Sets\nPermissions\nRole Groups\n\nScheduled Plans\nSpaces\nUser Attributes\n\nUser Attribute Group Value\n\nUser Login Lockouts\nUsers\n\nUser Attribute Values\nUser Sessions\n\nVersions\nWorkspaces\n\nFeatures\nFeatureSupported?Full Refresh SyncYesIncremental SyncComing soonReplicate Incremental DeletesComing soonSSL connectionYesNamespacesNo\n🐕‍🦺 Setup guide\n⚙️ Set up the Looker data source in Zenskar\n⚙️ Set up data source and type\n\nLog into your Zenskar account.\nIn the left navigation bar, navigate to Metering > Data Sources. In the top-right corner, click + ADD DATA SOURCE.\nIn the Set Up Source section of the Add New Data Source page, enter a name for the Looker data source connection.\nSelect Looker from the Source Type dropdown.\n\n⚙️ Configure data source\nIn the Source Config section of the Add New Data Source page, do the following:\n\nDomain: the domain that is associated with the Looker instance.\nClient ID: the Client ID is first part of an API3 key that is specific to each Looker user\nClient Secret: the Client Secret is second part of an API3 key.\nLook IDs to Run: the IDs of any Looks to run\n\n📖Looker client Id and client secretAn API key is used to access the Looker API. API keys are created by Looker and consist of a Client ID and a Client Secret. Looker requires an API key to execute commands with the Looker API.Please read the API Key section in Looker's documentation for instructions on how to generate Client ID and a Client Secret.Updated 17 days ago Google SheetsMetabaseTable of Contents\n\nOverview\n\nOutput streams\nFeatures\n\n🐕‍🦺 Setup guide\n\n⚙️ Set up the Looker data source in Zenskar\n\n"
  },
  {
    "id": "chunk_54",
    "document": "Manual_ upload Zenskar-compatible CSV file.txt",
    "chunk_index": 0,
    "content": "Manual: upload Zenskar-compatible CSV file\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceManual: upload Zenskar-compatible CSV fileSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Manual: upload Zenskar-compatible CSV fileUpload a Zenskar-compatible CSV file\nZenskar lets you upload raw metrics manually in the form of Zenskar-compatible, comma-separated values (CSV) files.\n\nTo set up a data-ingestion API, navigate to Metering > Raw Metrics page.\nClick on the row containing the API you are interested in. You will be taken to the View Raw Metric page.\n\nOn the View Raw Metric page, click on the UPLOAD CSV button. The Upload CSV dialog pops up.\n\nOn the Upload CSV dialog, you can:\n\ndrag and drop or click to upload a Zenskar-compatible CSV file of maximum size 10 MB\ngenerate and download a sample Zenskar-compatible CSV of schema appropriate for the API\n\nOn the Upload CSV dialog, click on the IMPORT CSV DATA button.\n\n👍 Pros and 👎 cons\n👍 Pros👎 ConsYou do not need to allocate engineering bandwidth.Periodic manual effort is required.You can get started without setting up any data infrastructure.\n🔖NoteIf manual data ingestion via Zenskar-compatible CSV does not suit your needs, you may look at the following options:\nData ingestion via data-source connectors\nData ingestion via APIs\nData ingestion via Zenskar's web form\nUpdated 14 days ago Usage events: data-ingestion APIsManual: use Zenskar's web form to upload dataTable of Contents\nUpload a Zenskar-compatible CSV file\n👍 Pros and 👎 cons\n\n"
  },
  {
    "id": "chunk_55",
    "document": "Manual_ use Zenskar's web form to upload data.txt",
    "chunk_index": 0,
    "content": "Manual: use Zenskar's web form to upload data\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceManual: use Zenskar's web form to upload dataSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Manual: use Zenskar's web form to upload dataYou can use the web form to enter raw metrics manually.\n📚AssumptionAn example raw metric, telephone usage, with the following schema is used throughout this document.JSON{\n  \"data\": {\n    \"sms\": \"int\",\n    \"data\": \"float\",\n    \"call_minutes\": \"float\"\n  },\n  \"timestamp\": \"timestamp\",\n  \"customer_id\": \"string\"\n}\n\nNavigate to Metering > Raw Metrics.\nClick on the raw metric you are interested in.\n\n{\n  \"images\": [\n    {\n      \"image\": [\n        \"https://files.readme.io/42f09ff-image.png\",\n        null,\n        \"\"\n      ],\n      \"align\": \"center\",\n      \"border\": true\n    }\n  ]\n}\n\nOn the View Raw Metric page, click on the drop-down menu beside the UPLOAD CSV button to access the + Add a single event option.\n\n{\n  \"images\": [\n    {\n      \"image\": [\n        \"https://files.readme.io/4597951-image.png\",\n        null,\n        \"\"\n      ],\n      \"align\": \"center\",\n      \"border\": true\n    }\n  ]\n}\n{\n  \"images\": [\n    {\n      \"image\": [\n        \"https://files.readme.io/185ca8c-image.png\",\n        null,\n        \"\"\n      ],\n      \"align\": \"center\",\n      \"border\": true\n    }\n  ]\n}\n\nClick on the + Add a single event menu option.\nFill in the required details in the Add New Event form.\n\n{\n  \"images\": [\n    {\n      \"image\": [\n        \"https://files.readme.io/0b81551-image.png\",\n        null,\n        \"\"\n      ],\n      \"align\": \"center\",\n      \"border\": true\n    }\n  ]\n}\n🔖NoteThe input text boxes on Add New Event form will correspond to the raw-metric schema you are currently working with. In the current example, the text boxes sms, data, and call_minutes correspond to the schema of the telephone usage raw metric with the following schema.JSON{\n  \"data\": {\n    \"sms\": \"int\",\n    \"data\": \"float\",\n    \"call_minutes\": \"float\"\n  },\n  \"timestamp\": \"timestamp\",\n  \"customer_id\": \"string\"\n}\n\nClick on the ADD EVENT button. It may take a few seconds for your data to appear in the Events Table.\n\n{\n  \"images\": [\n    {\n      \"image\": [\n        \"https://files.readme.io/b5e8042-image.png\",\n        null,\n        \"\"\n      ],\n      \"align\": \"center\",\n      \"border\": true\n    }\n  ]\n}\n👍 Pros and 👎 cons\n👍 Pros👎 ConsYou can record and maintain usage data directly in Zenskar instead of a spreadsheet.Not ideal for large amounts of data.The main use case is where a only few events are periodically recorded. For example, a lawyer may record data directly in Zenskar rather than relying on a spreadsheet.\n🔖NoteIf manual data ingestion via Zenskar's web form does not suit your needs, you may look at the following options:\nData ingestion via data-source connectors\nData ingestion via APIs\nData ingestion via Zenskar-compatible CSV file\nUpdated 17 days ago Manual: upload Zenskar-compatible CSV fileBillable metricsTable of Contents\n👍 Pros and 👎 cons\n\n"
  },
  {
    "id": "chunk_56",
    "document": "Matrix pricing.txt",
    "chunk_index": 0,
    "content": "Matrix pricing\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceMatrix pricingSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Matrix pricingA pricing strategy where the cost of a product or service is dependent on multiple dimensions.In Zenskar, matrix pricing is a pricing strategy where the cost of a product or service is dependent on multiple dimensions. Region-based pricing is an example of matrix pricing: usage being the first dimension whereas the region of usage is the second dimension. Similarly, Zenskar also uses two dimensions: usage being the first dimension and a user-defined second dimension\nHow to add a product based on matrix pricing in Zenskar\n🔖ImportantRefer the products documentation to learn more about the concept of products in Zenskar.\nStep 1: Create a product based on matrix pricing\n\nNavigate to Contracts > Products, and click on the ADD PRODUCT button.\nSelect the Matrix Pricing from the drop-down.\nSelect or deselect Metered:\n\nIf the service or product is metered, select the appropriate usage aggregate from the drop-down.\nIf the service or product is not metered, enter the quantity.\n\nFill in all other details, and select all the desired features.\nSave the product.\n\nExample: metered product\nDetails:\n\nThe world-famous RO water purifiers are being sold every month.\nShipping charges depend on:\n\nthe number of RO water purifiers sold (first dimension):\nthe destination of shipment (second dimension)\n\nDestinationPrice (USD per unit)Domestic up to 500 miles10Domestic beyond 500 miles12International55\n\nWe are keeping track of the number of RO water purifiers sold in a given billing period using the RO Water Purifiers aggregate (metered product).\n\nUpdated 17 days ago Flat-fee pricingPackage pricingTable of Contents\nHow to add a product based on matrix pricing in Zenskar\n\nStep 1: Create a product based on matrix pricing\n\n"
  },
  {
    "id": "chunk_57",
    "document": "Metabase.txt",
    "chunk_index": 0,
    "content": "Metabase\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceMetabaseSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Metabase🐕‍🦺 Setup guide\nThis guide will help you set up Metabase as a data source for Zenskar.\n🚧PrerequisitesTo connect Metabase with Zenskar, you need:\nusername and password: credentials to authenticate with Metabase instance. This may be used to generate a new session_token, if necessary. An email from Metabase may be sent to the owner's account everytime this is being used to open a new session.\nsession_token: credential token to authenticate requests sent via Metabase API. A session token expires after 14 days by default.\ninstance_api_url: the URL to interact with Metabase instance API, that uses https.\n\n⚙️ Acquire a session token\nYou can find or create session tokens from Metabase by running the following command:\nShellcurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-d '{\"username\": \"[email protected]\", \"password\": \"sample_password\"}' \\\nhttp://localhost:3000/api/session\nIf you’re working with a remote server, you’ll need to replace localhost:3000 with your server address. This request will return a JSON object with a key called id and the token as value in the form of a UUID or GUID:\n{\"id\":\"38f4939c-ad7f-4cbe-ae54-78906daf1234\"}\nYou can use the received token as your session_token when configuring the connector.\n🚧Expiration of tokensCredential tokens expire after 14 days by default. You need to update your connector configuration with a new token when that happens.\nIf you are hosting your own Metabase instance, you can configure this session duration on your metabase server by setting the environment variable MAX_SESSION_AGE (in minutes).\n❗️Invalid or expired session token errorsThe connector will alert you of an invalid or expired session token by returning a 401 Unauthorized response status code.\nSupported streams\n\nCard\nCollections\nDashboard\nUser\nDatabases\nNative Query Snippet\nUpdated 17 days ago LookerMongoDBTable of Contents\n🐕‍🦺 Setup guide\n\n⚙️ Acquire a session token\n\nSupported streams\n\n"
  },
  {
    "id": "chunk_58",
    "document": "Metering.txt",
    "chunk_index": 0,
    "content": "Metering\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceMeteringSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by MeteringOverview\n📖DefinitionsMetrics represent all the data that you capture to analyze trends across your business and technology domains. Raw metrics are unfiltered data. Derived metrics, on the other hand, are generated when a certain combination of selection criteria (or filters) is applied on the raw metrics.Metering is the act of measuring customer activity or consumption of resources to collect the metrics needed to generate an invoice.Aggregates are derived metrics. Average, count, distinct, maximum, minimum, and sum are some selection criteria (or filters) applied on raw metrics to derive aggregates.\nYour application can be instrumented with specific metering capabilities to extract the metrics needed to generate an invoice. These metrics could be the number of messages sent or received, number of active users, or it could be some aggregate of resource consumption (CPU, memory, storage) that makes sense to your customers.\nMap of concepts\nGeneric nameName in ZenskarCommentsRaw metricsUsage EventsUsage events are the specific type of raw metrics we are interested in. For example, per-minute temperature readings from a sensor are also raw metrics. However, they are of no interest to our billing system.MeteringMeteringBillable metrics orBillable MetricsBillable metrics are the specific type of derived metrics we are interested in. For example, filtering out the highest temperature reading from raw metrics gathered from a sensor are also derived metrics. However, they too are of no interest to our billing system.AggregatesAggregates- A set of built-in SQL aggregate functions used for deriving billable metrics.  - Any other custom SQL query condition that you employ to filter your data.\nZenskar can be configured to connect with your data sources to ingest raw metrics or aggregates. Zenskar can ingest data from various data sources seamlessly. Alternatively, you can send us your usage events using our application programming interfaces (APIs) to generate an invoice, as shown in Fig. 1.\nVarious data sources that Zenskar can connect to and various ways customers can send raw metrics to Zenskar\n\nData ingestion\nRead the documentation on the various ways Zenskar can ingest your data.\n\nData processing\nRaw Metrics versus aggregates\nYou have seen how to configure data sources and data-ingestion APIs. There are two types of data that these sources can send: raw metrics and aggregates. It is important to remember that aggregates are actionable data derived from raw metrics. If the data ingested by Zenskar is raw metrics, further filtering is necessary to derive aggregates, as shown in Fig. 2.\n📖The Structured Query LanguageZenskar stores all the data in the form of RDBMS tables. Therefore, the power of the Structured Query Language (SQL) must be employed to derive and\\or retrieve aggregates from the databases. If the source data is raw metrics, SQL queries must be written to derive and retrieve specific aggregates for calculations. However, if the source data is aggregates, SQL queries must only retrieve specific aggregates for calculations.\nFig. 8: Deriving aggregates from raw metrics by applying necessary filters\nDeriving Aggregates from Raw Metrics\nZenskar provides you two ways to create SQL queries to derive and\\or retrieve aggregates. Once you pick your source, a list of relevant tables are displayed. You can define SQL queries on these tables to derive or retrieve the aggregates needed to generate an invoice. There are two ways to create SQL queries:\n\nVisual query builder\nSQL builder\nUpdated 14 days ago CustomersData ingestionTable of Contents\n\nOverview\n\nMap of concepts\n\nData ingestion\n\nData processing\n\nRaw Metrics versus aggregates\nDeriving Aggregates from Raw Metrics\n\n"
  },
  {
    "id": "chunk_59",
    "document": "Microsoft Dynamics 365.txt",
    "chunk_index": 0,
    "content": "Microsoft Dynamics 365\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceMicrosoft Dynamics 365SearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Microsoft Dynamics 365Updated 17 days ago HubSpotPipedrive\n\n"
  },
  {
    "id": "chunk_60",
    "document": "Minimum commitment.txt",
    "chunk_index": 0,
    "content": "Minimum commitment\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceMinimum commitmentSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Minimum commitmentThe minimum commitment feature helps you set contract terms that require the customers to consume a minimum amount. The customers will be charged extra to meet the minimum commitment if they do not spend enough by the end of the service period.\n📚NoteMinimum commitment can be applied at the level of a product and\\or at the level of the contract.\n\nUpdated 17 days ago Payment termsCustom currency\n\n"
  },
  {
    "id": "chunk_61",
    "document": "MongoDB.txt",
    "chunk_index": 0,
    "content": "MongoDB\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceMongoDBSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by MongoDB🐕‍🦺 Setup guide\nThis guide will help you set up MongoDB as a data source for your Zenskar account.\nPrerequisites\nCreate users\nRun mongo shell, switch to admin database and create a READ_ONLY_USER. READ_ONLY_USER will be used for Zenskar integration.\nmongouse admin;db.createUser({user: \"READ_ONLY_USER\", pwd: \"READ_ONLY_PASSWORD\", roles: [{role: \"read\", db: \"TARGET_DATABASE\"}]})\n🚧AccessPlease ensure that the user has appropriate access levels: read-only privileges. A user with higher or lower privileges may result in errors.\nEnable MongoDB authentication\nOpen /etc/mongod.conf and add/replace specific keys:\nnet:  \n\tbindIp: 0.0.0.0\n\nsecurity:  \n\tauthorization: enabled\n\nSetting bindIP to 0.0.0.0 will allow connections to database from any IP address.\nThe last line will enable MongoDB security: only authenticated users will be able to access the database.\n\nConfigure firewall\nMake sure that MongoDB is accessible from external servers. Specific commands will depend on the firewall you are using (UFW/iptables/AWS/etc). Please refer to appropriate documentation.\nYour READ_ONLY_USER should now be ready for use with Zenskar.\nTLS/SSL on a Connection\nIt is recommended to use encrypted connection. Connection with TLS/SSL security protocol for MongoDb Atlas Cluster and Replica Set instances is enabled by default. To enable TSL/SSL connection with Standalone MongoDb instance, please refer to MongoDb Documentation.\n⚙️ Set up MongoDB as data source in Zenskar\n⚙️ Set up data source and type\n\nLog into your Zenskar account.\nIn the left navigation bar, navigate to Metering > Data Sources. In the top-right corner, click + ADD DATA SOURCE.\nIn the Set Up Source section of the Add New Data Source page, enter a name for the MongoDB data source connection.\nSelect MongoDB from the Source Type dropdown.\n\n⚙️ Configure data source\nIn the Source Config section of the Add New Data Source page, do the following:\n\nUser: username to use when connecting\nDatabase Name: database name\nPassword: used to authenticate the user\nAuthentication Source: specifies the database that the supplied credentials should be validated against. Defaults to admin.\nMongoDb Instance Type\n\nStandalone MongoDb instance\n\nTLS: indicates whether to create encrypted connection\nHost: URL of the database\nPort: Port to use for connecting to the database\n\nReplica Set\n\nReplica Set: A replica set name\nServer addresses: the members of a replica set\n\nMongoDb Atlas Cluster\n\nCluster URL: URL of a cluster to connect to\n\nFor more information regarding configuration parameters, please see MongoDb Documentation.Updated 17 days ago MetabaseMySQLTable of Contents\n\n🐕‍🦺 Setup guide\n\nPrerequisites\n⚙️ Set up MongoDB as data source in Zenskar\n\n"
  },
  {
    "id": "chunk_62",
    "document": "Monitoring.txt",
    "chunk_index": 0,
    "content": "Monitoring\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceMonitoringSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by MonitoringYou can monitor various aspects of your customer's contract and usage.\nAdd a monitor\n\nClick on Monitoring in the left sidebar.\nClick on the ADD MONITOR button.\nFill in the following details:\n\nMonitor name: a descriptive name for the monitor.\nMonitor description: add a description for the monitor.\nMonitor source: choose from Contract and Usage Aggregate.\n\nSelect contract\n\nClick on the Select Contract dropdown.\nSelect the contract you would like to add monitors for.\n\nThe example contract, A Simple Contract, has only one flat-fee based product.\n\nClick on the newly added Select Item dropdown.\n\nSelect itmes:\n\nYou can add monitors for various aspects of the billing period, such as:\n\nend_date: end date of the billing period.\nstart_date: start date of the billing period.\ncycle_length: how many days/weeks/months/years does a billing cycle last.\ncycle_unit: unit of the cycle (day/week/month/year).\ncycle_start_date: start date of the billing cycle.\ncontract_start_date: start date of the contract.\n\nYou can add monitors for various aspects of a product. The aspects are dependent on the product.\n\nFor example, for a flat-fee-based product, amount, billed_amount, and billed_days can be selected.\nFor example, for a volume-pricing-based product, only amount can be monitored.\n\nYou can add a monitor for invoice by selecting invoice_total.\n\nSelect usage aggregate\n🚧Coming soon\nView a monitor\n\nClick on Monitoring in the left sidebar.\nAll available monitors will be listed on the Monitoring page.\n\nClick on the monitor you are interested in.\nA panel will appear on the right side. Select the following parameters to view the monitor:\n\nCustomer: select the customer.\nSelect date: select the date for which you want to view the monitor.\nNet or increment: The net value of the monitor or the increment compared to the previous day.\n\nUpdated 17 days ago What’s NextCheckout the API Docs section for our client facing APIs for integrating it in your Product/Analytics Dashboards.Table of Contents\n\nAdd a monitor\n\nSelect contract\nSelect usage aggregate\n\nView a monitor\n\n"
  },
  {
    "id": "chunk_63",
    "document": "MySQL.txt",
    "chunk_index": 0,
    "content": "MySQL\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceMySQLSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by MySQL\nZenskar's MySQL connector offers the following features:\n\nMultiple methods of syncing data, including Change Data Capture (CDC) using the binlog.\nAll available sync modes.\nCheckpointing and chunking of database reads for reliable replication at any table size with\n\n🐕‍🦺 Setup guide\n⚙️ Step 1: users and permissions\nCreate a dedicated read-only database user for replicating data. Alternatively, you may use an existing MySQL user in your database.\nSQLCREATE USER 'zenskar'@'%' IDENTIFIED BY 'your_password_here';\nFor CDC replication method, SELECT, RELOAD, SHOW DATABASES, REPLICATION SLAVE, REPLICATION CLIENT permissions are required.\nSQLGRANT SELECT, RELOAD, SHOW DATABASES, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'zenskar'@'%';\nFor STANDARD replication method (not recommended), only the SELECT permission is required.\nSQLGRANT SELECT ON <database name>.* TO 'zenskar'@'%';\nset global slave_net_timeout = 120;set global thread_pool_idle_timeout = 120;\n⚙️ Step 2: enable binary logging on your MySQL server\nYou must enable binary logging for MySQL replication using CDC. Most cloud providers (AWS, GCP, etc.) provide easy one-click options for enabling the binlog on your source MySQL database.\nIf you are self-managing your MySQL server, configure your MySQL server configuration file with the following properties:\n Configuring MySQL server config files to enable binlog server-id                  = 223344\nlog_bin                    = mysql-bin\nbinlog_format              = ROW\nbinlog_row_image           = FULL\nbinlog_expire_logs_seconds  = 864000\nserver-id : The value for the server-id must be unique for each server and replication client in the MySQL cluster. The server-id should be a non-zero value. If the server-id is already set to a non-zero value, you don't need to make any change. You can set the server-id to any value between 1 and 4294967295. For more information refer MySQL documentation\nlog_bin : The value of log_bin is the base name of the sequence of binlog files. If the log_bin is already set, you don't need to make any change. For more information refer MySQL documentation\nbinlog_format : The binlog_format must be set to ROW. For more information refer MySQL documentation\nbinlog_row_image : The binlog_row_image must be set to FULL. It determines how row images are written to the binary log. For more information refer MySQL documentation\nbinlog_expire_logs_seconds : This is the number of seconds for automatic binlog file removal. We recommend 864000 seconds (10 days) so that in case of a failure in sync or if the sync is paused, we still have some bandwidth to start from the last point in incremental sync. We also recommend setting frequent syncs for CDC.\n\n⚙️ Step 3: create a MySQL data source in Zenskar\nSet up data source\n\nLog into your Zenskar account.\nIn the left navigation bar, click Metering > Data Sources. In the top-right corner, click + ADD DATA SOURCE.\nIn the Set Up Source section of the Add New Data Source page, enter a name for the Google Sheets data source connection.\nSelect MySQL from the Source Type dropdown.\n\nConfigure data source\nIn the Source Config section of the Add New Data Source page, add the following details:\n\nSSL Connection: select Yes or No depending on whether you would like Zenskar to establish an SSL connection with the data source\nHost: database hosting server\nPort: the port at which MySQL listens for incoming requests\nDatabase: the database name\nPassword: the database password\nSSL Modes: select from prefer, require, verify-ca, and verify-full. Refer the section on SSL modes for more details.\nUsername: the read-only database user\nRefer the section on SSH tunneling for details on all SSH-related configuration parameters.\nReplication Method: select from Standard and Logical Replication (CDC). Refer the section on MySQL replication modes for more details.\n\n🚧NoteYou must allow inbound traffic from Zenskar IP addresses.\n📖 MySQL Replication Modes\nChange Data Capture (CDC)\nZenskar uses logical replication of the MySQL binlog to incrementally capture deletes. We recommend configure your MySQL source with CDC whenever possible, as it provides:\n\nA record of deletions, if needed.\nScalable replication to large tables (1 TB and more).\nA reliable cursor not reliant on the nature of your data. For example, if your table has a primary key but doesn't have a reasonable cursor field for incremental syncing (i.e. updated_at), CDC allows you to sync your table incrementally.\n\nStandard\nZenskar offers incremental replication using a custom cursor available in your source tables (e.g. updated_at). We generally recommend against this replication method, but it is well suited for the following cases:\n\nYour MySQL server does not expose the binlog.\nYour data set is small, and you just want snapshot of your table in the destination.\n\n📖 Connect with SSL or SSH Tunneling\nSSL Modes\nHere is a breakdown of available SSL connection modes:\n\ndisable to disable encrypted communication between Zenskar and the source\nallow to enable encrypted communication only when required by the source\nprefer to allow unencrypted communication only when the source doesn't support encryption\nrequire to always require encryption. Note: The connection will fail if the source doesn't support encryption.\nverify-ca to always require encryption and verify that the source has a valid SSL certificate\nverify-fullto always require encryption and verify the identity of the source\n\nConnect via SSH Tunnel\nYou can connect to a MySQL server via an SSH tunnel.\nWhen using an SSH tunnel, you are configuring Zenskar to connect to an intermediate server (also called a bastion or a jump server) that has direct access to the database. Zenksar connects to the bastion and then asks the bastion to connect directly to the server.\nTo connect to a MySQL server via an SSH tunnel:\n\nWhile setting up the MySQL source connector, from the SSH tunnel dropdown, select:\n\nSSH Key Authentication to use a private as your secret for establishing the SSH tunnel\nPassword Authentication to use a password as your secret for establishing the SSH Tunnel\n\nFor SSH Tunnel Jump Server Host, enter the hostname or IP address for the intermediate (bastion) server that Zenskar will connect to.\n\nFor SSH Connection Port, enter the port on the bastion server. The default port for SSH connections is 22.\n\nFor SSH Login Username, enter the username to use when connecting to the bastion server.\n\n🚧NoteThis is the operating system username and not the MySQL username.\n\nFor authentication:\n\nIf you selected SSH Key Authentication, set the SSH Private Key to the private key that you are using to create the SSH connection.\nIf you selected Password Authentication, enter the password for the operating system user to connect to the bastion server.\n\n🚧NoteThis is the operating system password and not the MySQL password.\nGenerating a private key for SSH Tunneling\nThe connector expects an RSA key in PEM format. To generate this key:\nShellssh-keygen -t rsa -m PEM -f myuser_rsa\nThis produces the private key in pem format, and the public key remains in the standard format used by the authorized_keys file on your bastion host. The public key should be added to your bastion host to whichever user you want to use with Zenskar. The private key is provided via copy-and-paste to the Zenskar connector configuration screen, so it may log in to the bastion.\n📖 Data-type mapping\nMySQL data types are mapped to the following data types when synchronizing data. You can check test example values here. If you can't find the data type you are looking for, feel free to add a new test. If you do not see a type in this list, assume that it is coerced into a string. We are happy to take feedback on preferred mappings.\nAny database or table encoding combination of charset and collation is supported. Charset setting however will not be carried over to destination and data will be encoded with whatever is configured by the destination. Please note that byte arrays are not yet supported.\n MySQL data-type mapping MySQL TypeResulting TypeNotesbit(1)booleanbit(>1)base64 binary stringbooleanbooleantinyint(1)booleantinyint(>1)numbertinyint(>=1) unsignednumbersmallintnumbermediumintnumberintnumberbigintnumberfloatnumberdoublenumberdecimalnumberbinarystringblobstringdatestringISO 8601 date string. ZERO-DATE value will be converted to NULL. If column is mandatory, convert to EPOCH.datetime, timestampstringISO 8601 datetime string. ZERO-DATE value will be converted to NULL. If column is mandatory, convert to EPOCH.timestringISO 8601 time string. Values are in range between 00:00:00 and 23:59:59.yearyear stringDocchar, varchar with non-binary charsetstringtinyblobbase64 binary stringblobbase64 binary stringmediumblobbase64 binary stringlongblobbase64 binary stringbinarybase64 binary stringvarbinarybase64 binary stringtinytextstringtextstringmediumtextstringlongtextstringjsonserialized json stringE.g. {\"a\": 10, \"b\": 15}enumstringsetstringE.g. blue,green,yellowgeometrybase64 binary stringUpdated 13 days ago MongoDBPostgreSQLTable of Contents\n\n🐕‍🦺 Setup guide\n\n⚙️ Step 1: users and permissions\n⚙️ Step 2: enable binary logging on your MySQL server\n⚙️ Step 3: create a MySQL data source in Zenskar\n\n📖 MySQL Replication Modes\n\nChange Data Capture (CDC)\nStandard\n\n📖 Connect with SSL or SSH Tunneling\n\nSSL Modes\nConnect via SSH Tunnel\nGenerating a private key for SSH Tunneling\n\n📖 Data-type mapping\n\n"
  },
  {
    "id": "chunk_64",
    "document": "NetSuite.txt",
    "chunk_index": 0,
    "content": "NetSuite\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceNetSuiteSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by NetSuitePrerequisites\nZenskar uses token-based authentication (TBA) for connecting with a NetSuite account. You must enable a few features in NetSuite before attempting to connect Zenskar with NetSuite:\n\nOn the NetSuite dashboard, go to Setup > Company > Enable Features.\nOn the horizontal menu, go to SuiteCloud. Now go to the SuiteTalk (Web Services) subsection and select REST WEB SERVICES.\n\nGo to the Manage Authentication subsection and select TOKEN-BASED AUTHENTICATION.\n\nSave the changes.\nCreate a new integration which will handle all requests from Zenskar. For creating a new integration, go to Setup > Integration > Manage Integrations > New.\nGive a suitable name to integration and leave the state as enabled. Now set the authentication settings, as shown below.\n\nSave the integration. After saving, you would be provided the consumer key and consumer secret for the integration. Please note this.\nIn the next step, we will issue an access token to a user which is already added to the client’s NetSuite account. Before issuing the access token, please ensure the user has all the necessary permissions to use Rest Web Services. More details about the user roles on Netsuite can be found here.\nFor issuing the access token, from the NetSuite homepage scroll down and in the bottom left corner you can find Settings. Go to Settings > Manage Access Tokens. Now choose the integration that was created in the previous setup and appropriate token name. Once done, you would be provided with the Token Id and Token Secret. Please note them as well.\nClients also need to note the NetSuite account id and company URL  which could be found inside the Setup > Company > Company Information. Account ID will be visible on this page. Go to the Company URLs sub tab to get the company URL. Please note the company URL corresponding to SUITETALK (SOAP AND REST WEB SERVICES).\n\nIntegrate NetSuite with Zenskar\nOption 1: use Zenskar's accounting system to generate double-entry journal entries\nYou may use Zenskar's accounting system to generate double-entry journal entries. These journal entries can be synced with NetSuite using Zenskar's NetSuite connector.\n\nOption 2: use the accounting system of the ERP software\nYou may use the accounting system of the ERP software to generate journal entries. Zenksar can send data related to invoices and payments (optional) to NetSuite as input.\n\nSet up Zenskar's NetSuite connector\n\nGo to Settings > Connectors and click on Connect button for the NetSuite connector card.\nEnter the following details:\n\nConfigure Customer Sync\n\nOnce NetSuite gets connected, click on the Manage button to configure the customers sync.\nTurn on the Customer Sync on the configuration page\n\nClick on Next. On this page the client needs to select the Company subsidiary in which all the customers from Zenskar will be created.\n\nClick on Configure and the customer sync is enabled for NetSuite.\nUpdated 17 days ago Create your own FlowQuickBooksTable of Contents\n\nPrerequisites\n\nIntegrate NetSuite with Zenskar\n\nOption 1: use Zenskar's accounting system to generate double-entry journal entries\nOption 2: use the accounting system of the ERP software\nSet up Zenskar's NetSuite connector\nConfigure Customer Sync\n\n"
  },
  {
    "id": "chunk_65",
    "document": "Package pricing.txt",
    "chunk_index": 0,
    "content": "Package pricing\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferencePackage pricingSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Package pricingA pricing strategy in which a service or product that is sold as a package.In Zenskar, package pricing is a pricing strategy in which a service or product is sold as a package. Package pricing works based two parameters: package size and package price.\nLet us assume that a product is sold as a package under the following conditions:\nPackage size (units)Package price (USD/package)1010\n\nIf the customer purchases 10 units, they will be billed for 10 units or 1 package or 10 USD.\nIf the customer purchases 11 units, they will be billed for 20 units or 2 packages or 20 USD.\n\nAdd a product based on package pricing\n🔖ImportantRefer the products documentation to learn more about the concept of products in Zenskar.\nStep 1: Add a product based on package pricing\n\nNavigate to Contracts > Products, and click on the ADD PRODUCT button.\nSelect the Package Pricing from the drop-down.\nSelect or deselect Metered:\n\nIf the service or product is metered, select the appropriate usage aggregate from the drop-down.\nIf the service or product is not metered, enter the quantity.\n\nFill in all other details, and select all the desired features.\nSave the product.\n\nExample: non-metered purchase\nDetails:\n🔖A short storyLet us assume that six malaria-injection vials are recommended as full course of medication. Also, let us assume that this full course of medication comes in a tamper proof package. Therefore, if someone needs a seventh vial (maybe, they broke a vial), a full package must be shipped.\n\nMalaria-injection vials are being sold as a package:\n\nPackage size (units)Package price (USD/package)6600\n\nThis is a one-time purchase (non-metered product).\n\nExample: metered purchase\n\nContinuing with the above story, let us assume that the customer requires continuous supply of malaria-injection vials.\nMaybe, they are in a tropical country with high rates of malaria infection.\nThis situation can be handled by turning the one-time purchase in to a recurring purchase (metered product).\nSince it is recurring, the number of purchases must be tracked. This process of tracking purchases is called metering.\n\nStep 2\nAdd product to new contract\n\nNavigate to Contracts > Contracts, and click on the + ADD NEW CONTRACT button.\nClick on the + ADD NEW PRODUCT button.\nSelect the product(s) based on package pricing for the contract.\n\nAdd product to new template\n\nNavigate to Contracts > Templates, and click on the + ADD NEW TEMPLATE button.\nClick on the + ADD NEW PRODUCT button.\nSelect the product(s) based on package pricing for the template.\nUpdated 17 days ago Matrix pricingPer-unit pricingTable of Contents\n\nAdd a product based on package pricing\n\nStep 1: Add a product based on package pricing\nStep 2\n\n"
  },
  {
    "id": "chunk_66",
    "document": "Payment Gateways.txt",
    "chunk_index": 0,
    "content": "Payment Gateways\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferencePayment GatewaysSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Payment GatewaysPayment gatewaysA payment gateway allows you to accept various forms of payments including credit cards, direct debit payments, and online wallet payments. Zenskar right now accepts payments via Stripe but we are working on adding support for other payment gateways. After obtaining a payment gateway and a merchant account (if required), the next step is to configure it in Zenskar. To configure your payment gateway, log in to the web interface and go to Settings > Connectors  and click on the payment gateway you want to integrate.Updated 17 days ago Default Payment MethodAccounting\n\n"
  },
  {
    "id": "chunk_67",
    "document": "Payment Methods.txt",
    "chunk_index": 0,
    "content": "Payment Methods\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferencePayment MethodsSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Payment MethodsType of Payment methods\nThe following is a list of various payment methods that can be used with Zenskar:\n\nCards - This payment method enables you to accept payments via credit, debit, and prepaid cards, provided you have an integration with a supported payment gateway and a merchant account in place.\nDirect Debit Payments - If you are based in the US, UK, or Europe, you can accept payments via direct debit, processed by methods such as ACH, BACS, SEPA, AutoGiro, BECS, and PADs.\nCredit Transfer - This is an electronic transfer of money from one account to another initiated by the payer.\nOffline Payments - This payment method is used for accepting payments via cash, cheque, or bank transfers.\nNetbanking - This payment method enables customers to complete online payments using their bank credentials, and is a popular option in India.\nUPI - This instant real-time payment system is developed by the National Payments Corporation of India and facilitates inter-bank peer-to-peer and person-to-merchant transactions.\nUpdated 17 days ago PaymentsDefault Payment MethodTable of Contents\nType of Payment methods\n\n"
  },
  {
    "id": "chunk_68",
    "document": "Payment terms.txt",
    "chunk_index": 0,
    "content": "Payment terms\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferencePayment termsSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Payment termsThe payment terms feature helps you to set a due date for payment. You can add a payment terms feature node to the contract by clicking on the + Payment Terms button.\n\n📚NotePayment terms can be applied only at the level of a contract.\nDue date can be start from:\n\nthe date of invoice approval\nthe date of invoice creation\n\nUpdated 17 days ago AvaTaxMinimum commitment\n\n"
  },
  {
    "id": "chunk_69",
    "document": "Payments.txt",
    "chunk_index": 0,
    "content": "Payments\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferencePaymentsSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Payments\nYou can collect payments using Zenskar's integrations with Payment Gateways like Stripe. These integrations help you automatically collect payments and keep track of which invoices are paid, partially paid, or yet to be paid. Any payments collected offline can be added using the \"Add New Payment\" button on the Payments page.\nThese payments flow into the Chart of Accounts and help maintain the pending receivables balance of your customers.Updated 17 days ago Credit notesPayment Methods\n\n"
  },
  {
    "id": "chunk_70",
    "document": "Per-unit pricing.txt",
    "chunk_index": 0,
    "content": "Per-unit pricing\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferencePer-unit pricingSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Per-unit pricingPer-unit pricing is a strategy in which you charge your customer for each unit of service or product you sell.\nHow to add a product priced per-unit in Zenskar\n🔖ImportantRefer the products documentation to learn more about the concept of products in Zenskar.\nStep 1: Create a product priced per-unit\n\nNavigate to Contracts > Products, and click on the ADD PRODUCT button.\nSelect the Per Unit Pricing from the drop-down.\nSelect or deselect Metered:\n\nIf the service or product usage is metered, select the appropriate usage aggregate from the drop-down.\nIf the service or product usage is not metered, enter the quantity.\n\nFill in all other details, and select all the desired features.\nSave the product.\n\nExample: metered product\nDetails:\n\nComputing resources are being sold at 0.01 USD per hour.\nOwing to the nature of consumption, this is a metered product.\nThe usage aggregate named Compute is being used to fetch consumption details for a given billing period.\n\nExample: non-metered product\nDetails:\n\nMotorcycles are being sold at 8800 USD per unit.\n100 units are being sold.\nThis is a non-metered product.\n\nFig. 2: Add new non-metered product based on per-unit pricing model\nStep 2\nAdd product to new contract\n\nNavigate to Contracts > Contracts, and click on the + ADD NEW CONTRACT button.\nClick on the + ADD NEW PRODUCT button.\nSelect the product(s) based on per-unit pricing for the contract.\n\nAdd product to new template\n\nNavigate to Contracts > Templates, and click on the + ADD NEW TEMPLATE button.\nClick on the + ADD NEW PRODUCT button.\nSelect the product(s) based on per-unit pricing for the template.\n\nUpdated 17 days ago Package pricingPercent pricingTable of Contents\n\nHow to add a product priced per-unit in Zenskar\n\nStep 1: Create a product priced per-unit\nStep 2\n\n"
  },
  {
    "id": "chunk_71",
    "document": "Percent pricing.txt",
    "chunk_index": 0,
    "content": "Percent pricing\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferencePercent pricingSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Percent pricingYou can bill your customers a percentage of the transaction value or of either metered or non-metered consumption by using percent pricing.In Zenskar, percent pricing is a pricing strategy in which a product is priced according to the following rules:\n\nCase 1: If the product is metered, it is priced at a percentage of the selected billable metric, measured in the currency configured in the contract. Refer to this section for details.\nCase 2: If the product is not metered, it is priced at a percentage of the quantity, measured in the currency configured in the contract. Refer to this section for details.\n\nCase 1: A metered percentage-based product\n\nLet us take Delivery charges as an example of a metered percentage-based product.\n\nLet us assume that a billable metric named Compute is attached to the product. Compute returns the number of units shipped in a given billing cycle.\n\nLet us calculate delivery charges as a percentage of the value returned by Compute.\nIn general, for metered percentage-based product, the following equation hold true:\nAmount contributed by the percentage-based product to the invoice = (Percent * Billable metric) / 100\n\nTherefore,\nDelivery charges (USD) = (Percent * Compute) / 100\n\nLet us assume that Compute reports 100 units being shipped in the given billing period.\n\nProduct namePercent (USD)Billable metric (units)Delivery charges5100\n\nThe delivery charges for the above example can be calculated as shown below:\nDelivery charges (USD) = (5 * 100) / 100 = USD 5\n\nCase 2: A non-metered percentage-based product\n\nLet us continue with Delivery charges as an example of a percentage-based product. However, in this example, Delivery charges is a non-metered product.\n\nDelivery charges being a non-metered product, the quantity is predefined in the product.\n\nLet us calculate delivery charges as a percentage of the predefined quantity configured in the product.\nIn general, for non-metered percentage-based product, the following equation hold true:\nAmount contributed by the percentage-based product to the invoice = (Percent * Quantity) / 100\n\nTherefore,\nDelivery charges (USD) = (Percent * Quantity) / 100\n\nLet us assume that a quantity of 100 units were shipped in a given billing period, per product definition.\n\nProduct namePercent (USD)Quantity (units)Delivery charges5100\n\nThe delivery charges for the above example can be calculated as shown below:\nDelivery charges (USD) = (5 * 100) / 100 = USD 5\nPercentage-based product in the invoice\nThe invoice for the above examples is shown below. The percentage-based product, Delivery charges, is highlighted:\n\nAdd a percentage-based product\n🔖ImportantRefer to the products documentation to learn more about the concept of products in Zenskar.\nStep 1: Add a percentage-based product\n\nNavigate to Contracts > Products, and click on the ADD PRODUCT button.\nSelect the Percent Pricing from the drop-down.\nSelect or deselect Metered:\n\nIf the service or product is metered, select the appropriate billable metric from the drop-down.\nIf the service or product is not metered, enter the quantity.\n\nFill in all other details, and select all the desired features.\nSave the product.\n\nStep 2\nAdd product to new contract\n\nNavigate to Contracts > Contracts, and click on the + ADD NEW CONTRACT button.\nClick on the + ADD NEW PRODUCT button.\nSelect the product(s) based on package pricing for the contract.\n\nAdd product to new template\n\nNavigate to Contracts > Templates, and click on the + ADD NEW TEMPLATE button.\nClick on the + ADD NEW PRODUCT button.\nSelect the product(s) based on package pricing for the template.\nUpdated 17 days ago Per-unit pricingStep pricingTable of Contents\n\nCase 1: A metered percentage-based product\n\nCase 2: A non-metered percentage-based product\n\nPercentage-based product in the invoice\n\nAdd a percentage-based product\n\nStep 1: Add a percentage-based product\nStep 2\n\n"
  },
  {
    "id": "chunk_72",
    "document": "Performance obligation policies.txt",
    "chunk_index": 0,
    "content": "Performance obligation policies\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferencePerformance obligation policiesSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Performance obligation policiesPolicyDetailsImmediateYou wish to recognize the revenue of the PO immediately: as soon as the invoice is generated. Journal entries are created.DeferredThe invoice is generated. However, the revenue is considered deferred or unearned. Deferred revenue is a liability. It is recognized proportionally as revenue as you deliver the promised service or product to your customer over time.UnbilledThe invoice has not been generated. However, the service or product has been delivered. This is applicable in postpaid use cases only.Updated 17 days ago Revenue distribution and redistribution methodsReceivables\n\n"
  },
  {
    "id": "chunk_73",
    "document": "Pipedrive.txt",
    "chunk_index": 0,
    "content": "Pipedrive\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferencePipedriveSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by PipedriveThe first CRM designed by salespeople, for salespeople. Do more to grow your business.Updated 17 days ago Microsoft Dynamics 365Salesforce\n\n"
  },
  {
    "id": "chunk_74",
    "document": "Plans.txt",
    "chunk_index": 0,
    "content": "Plans\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferencePlansSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by PlansZenskar fully automates generating invoices irrespective of the complexity of the contracts. Existing billing products are constrained to contracts that can be specified as a list of products and prices corresponding to these products.\n🚧Prerequisites\nIf you want to use the AvaTax feature in your contract plan, you must have a fully configured and active Avalara AvaTax account.\n\n📖 Definitions\n🔖MetricsMetrics represent all the data that you capture to analyze trends across your business and technology domains. Raw metrics are unfiltered data. Derived metrics, on the other hand, are generated when a certain combination of selection criteria (or filters) is applied on the raw metrics.Metering is the act of measuring customer activity or consumption of resources to collect the metrics needed to generate an invoice.Aggregates are derived metrics. Average, count, distinct, maximum, minimum, and sum are some selection criteria (or filters) applied on raw metrics to derive aggregates.\n🔖ContractA Contract, in general, is a formal and legally binding agreement between you and your customers. This is an all-encompassing document that defines how you and your customers will conduct business. In Zenskar, however, the concept of a contract refers only to a subset of the general contract and contains data related to pricing models and other billing determinants.\n🔖PlanA plan is a reusable contract pattern that contains product and feature definitions.\nA plan can be used as a guide to make tangible Zenskar contracts.\nA contract that is based on a plan will inherit all the products and features of the plan it is based on. You can override the plan values to create customized contracts.\n\n🔖ProductIn Zenskar, a product is any service or product you sell to your customer as part of the contract.\nIn a metered product, you measure customer activity or consumption of resources.\nIn a non-metered product, you do not measure customer activity or consumption of resources. You charge the customer based on the number of units purchased.\n\nPlan\nA plan can be created by navigating to Contracts > Plans, and clicking on the + Add New Plan button.\n\nA plan has the following properties:\nName:  you can give the plan a descriptive name.\nBilling duration: you can specify the frequency of billing.\nBilling type: prepaid or postpaid.\nFeatures:\n\nFeatureDescriptionTaxChoose this feature if you would like to handle the collection of taxes.\nAvaTax⚠️ Choose this feature only if you have a properly configured Avalara AvaTax account. Avalara AvaTax uses automation to make tax determination faster, easier, and more accurate.Avalara tax codes can be found here . The Avalara tax codes determine the taxability of the goods and services you sell.\nDiscountA contract-level discount applicable on the overall invoice value.\nPayment termsChoose this feature to assign due date. A due date can be assigned based on invoice creation or invoice approval date:\nMinimum commitmentA minimum amount that you can charge even if the products and services are not availed during the billing period. Custom currency!\n\nMinimum Commitment\nCustom Currency\n\nProducts\nPricing models\nFor all pricing models, billing can be configured as Recurring or One Time.\nPricing modelDescriptionFlat feeA simple pricing strategy in which you charge a fixed fee for a particular service, regardless of the time it takes to complete.Per unit pricingYou charge customers for each item sold.\nVolume pricingYour customers get a different price per unit as the quantity of the units they purchase increases.Tiered pricingA pricing strategy in which you present customers with several product or service options, with corresponding pricing levels.Package pricingA pricing model that includes everything so that each product or service is not charged for separately.\nFeatures\n\nFeatureDescriptionFree units!DiscountA product-level discount\nTaxA product-level tax:AvaTaxA product-level Avalara AvaTax deduction:Minimum commitmentA product-level minimum commitment:\nHow to create a plan\nLet us build a simple example plan using the following products and pricing:\nProductPricingUpfront implementation fee1500 USDSubscription product400 USD/2 monthsUsage-based product4 USD/unit with minimum guaranteed charges at 40 USDImplementation engineer chargesBilled at the time of signing the contractInvoice-level discount4%\n📖DiscountsA discount can be applied at the plan-level and\\or at a product-level. Each product can have a discount associated with it. Also, the overall invoice amount can be discounted irrespective of the product-level discount.\nNavigate to Contracts > Plas, and click on the + Add New Plan button.\nAdd a product: upfront implementation fee\nAdd a new product named (unimaginatively) Implementation Fee:\n\nThis is an non-metered one-time fee\nThis is a flat fee of 1500 USD\n\nAdd a product: subscription\nAdd a new product named Subscription Product:\n\nThis is an non-metered recurring fee\nThe billing cadence is once every two months\n\nAdd a product: usage-based\n\nAdd a product: implementation engineer charges\n\nAdd plan-level features\n\nA plan-level discount of 4%.\nPayment terms: the invoice due date is set to 15 days from the date of approving the invoice.\n\nSave the plan\nAll the products have been added to the plan. Click the Save button to save the plan.\nUse the plan\nYou can use a plan to create a contract, as shown below:\nUpdated 14 days ago Custom currencyContract renewalTable of Contents\n\n📖 Definitions\n\nPlan\n\nProducts\n\nPricing models\nFeatures\n\nHow to create a plan\n\nAdd a product: upfront implementation fee\nAdd a product: subscription\nAdd a product: usage-based\nAdd a product: implementation engineer charges\nAdd plan-level features\nSave the plan\nUse the plan\n\n"
  },
  {
    "id": "chunk_75",
    "document": "PostgreSQL.txt",
    "chunk_index": 0,
    "content": "PostgreSQL\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferencePostgreSQLSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by PostgreSQLPostgreSQL is a powerful, open source object-relational database system.\nZenskar's PostgreSQL connector offers the following features:\n\nReplicate data from tables, views and materilized views. Other data objects won't be replicated to the destination like indexes, permissions.\nMultiple methods of keeping syncing data, including Change Data Capture (CDC) and replication using the xmin system column.\nAll sync modes are available, providing flexibility in how data is delivered to your destination.\nReliable replication at any table size with checkpointing and chunking of database reads.\n\n🐕‍🦺 Setup guide\nStep 1: users and permissions\nCreate a dedicated read-only PostgreSQL user\nCreate a dedicated read-only PostgreSQL user for replicating data. Alternatively, you can use an existing user:\nSQLCREATE USER <user_name> PASSWORD 'your_password_here';\nProvide the user read-only access to relevant schemas and tables:\nSQLGRANT USAGE ON SCHEMA <schema_name> TO <user_name>;\nGRANT SELECT ON ALL TABLES IN SCHEMA <schema_name> TO <user_name>;\nALTER DEFAULT PRIVILEGES IN SCHEMA <schema_name> GRANT SELECT ON TABLES TO <user_name>;\n📖NoteYou must re-run the above command for each schema from which you expect to replicate data.\n⚙️ Step 2: create a PostgreSQL data source in Zenskar\nSet up data source\n\nLog into your Zenskar account.\nIn the left navigation bar, click Metering > Data Sources. In the top-right corner, click + ADD DATA SOURCE.\nIn the Set Up Source section of the Add New Data Source page, enter a name for the Google Sheets data source connection.\nSelect Postgres from the Source Type dropdown.\n\nConfigure data source\nIn the Source Config section of the Add New Data Source page, add the following details:\n\nConnect using SSL: select Yes or No depending on whether you would like Zenskar to establish an SSL connection with the data source\nHost: database hosting server\nPort: the port at which PostgreSQL listens for incoming requests\nschemas-0*: the schema you would like to replicate in Zenskar\nDatabase Name: the database name\nPassword: the database password\nSSL Modes: select from disable, allow, prefer, require, verify-ca, and verify-full\nRefer the section on SSH tunneling for details on all SSH-related configuration parameters.\nReplication Method: select from Standard and Logical Replication (CDC)\n\n🚧NoteYou must allow inbound traffic from Zenskar IP addresses .\n⚙️ Advanced Configuration\nSet up with CDC\nZenskar uses logical replication of the PostgreSQL write-ahead log (WAL) to incrementally capture deletes using a replication plugin.\nYou should configure PostgreSQL data source with CDC when:\n\nYou need a record of deletions.\nYou have a very large database (500 GB or more).\nYour table has a primary key but doesn't have a reasonable cursor field for incremental syncing (updated_at).\n\nThese are the additional steps required to configure your PostgreSQL source using CDC:\n\nProvide additional REPLICATION permissions to read-only user\nEnable logical replication on your PostgreSQL database\nCreate a replication slot on your PostgreSQL database\nCreate publication and replication identities for each PostgreSQL table\nEnable CDC replication in the Zenskar\n\nStep 1: prepopulate PostgreSQL source configuration\nFor CDC, you must connect to primary/master databases. Pointing the connector configuration to replica database hosts for CDC will lead to failures.\nStep 2: Provide additional permissions to read-only user\nTo configure CDC for the PostgreSQL source connector, grant REPLICATION permissions to the read-only user created earlier:\nALTER USER <user_name> REPLICATION;\nStep 3: Enable logical replication on your PostgreSQL database\nTo enable logical replication on bare metal, VMs (EC2/GCE/etc), or Docker, configure the following parameters in the postgresql.conf file# for your PostgreSQL database:\nParameterDescriptionSet value towal_levelType of coding used within the PostgreSQL write-ahead loglogicalmax_wal_sendersThe maximum number of processes used for handling WAL changesmin: 1max_replication_slotsThe maximum number of replication slots that are allowed to stream WAL changes1 (if Zenskar is the only service reading subscribing to WAL changes. More than 1 if other services are also reading from the WAL)\nTo enable logical replication on AWS PostgreSQL RDS or Aurora:\n\nGo to the Configuration tab for your DB cluster.\nFind your cluster parameter group. Either edit the parameters for this group or create a copy of this parameter group to edit. If you create a copy, change your cluster's parameter group before restarting.\nWithin the parameter group page, search for rds.logical_replication. Select this row and click Edit parameters. Set this value to 1.\nWait for a maintenance window to automatically restart the instance or restart it manually.\n\nTo enable logical replication on Azure Database for PostgreSQL, change the replication mode of your Postgres DB on Azure to logical using the replication menu of your PostgreSQL instance in the Azure Portal. Alternatively, use the Azure CLI to run the following command:\naz postgres server configuration set --resource-group group --server-name server --name azure.replication_support --value logicalaz postgres server restart --resource-group group --name server\nStep 4: create a replication slot on your PostgreSQL database\nZenskar requires a replication slot configured only for its use. Only one source should be configured that uses this replication slot.\nFor this step, Zenskar requires use of the pgoutput plugin. To create a replication slot called zenskar_slot using pgoutput, run as the user with the newly granted REPLICATION role:\nSELECT pg_create_logical_replication_slot('zenskar_slot', 'pgoutput');\nThe output of this command will include the name of the replication slot to fill into the Zenskar source setup page.\nStep 5: create publication and replication identities for each PostgreSQL table\nFor each table you want to replicate with CDC, follow the steps below:\n\nAdd the replication identity (the method of distinguishing between rows) for each table you want to replicate:\n\nALTER TABLE tbl1 REPLICA IDENTITY DEFAULT;\nIn rare cases, if your tables use data types that support TOAST or have very large field values, consider instead using replica identity type full: ALTER TABLE tbl1 REPLICA IDENTITY FULL;.\n\nCreate the PostgreSQL publication. You should include all tables you want to replicate as part of the publication:\n\nCREATE PUBLICATION zenskar_publication FOR TABLE <tbl1, tbl2, tbl3>;`\nThe publication name is customizable. Refer to the Postgres docs if you need to add or remove tables from your publication in the future.\n🚧NoteThe Zenskar UI currently allows selecting any tables for CDC. If a table is selected that is not part of the publication, it will not be replicated even though it is selected. If a table is part of the publication but does not have a replication identity, that replication identity will be created automatically on the first run if the Zenskar user has the necessary permissions.\nPostgreSQL replication methods\nThe PostgreSQL source currently offers three methods of replicating updates: CDC, xmin, and standard (with a user defined cursor). Both CDC and xmin are the more reliable methods of updating your data.\nCDC\nZenskar uses logical replication of the PostgreSQL write-ahead log (WAL) to incrementally capture deletes using a replication plugin. We recommend configuring your PostgreSQL source with CDC when:\n\nYou need a record of deletions.\nYou have a very large database (500 GB or more).\nYour table has a primary key but doesn't have a reasonable cursor field for incremental syncing (updated_at).\n\nIf your goal is to maintain a snapshot of your table in the destination but the limitations prevent you from using CDC, consider using the xmin replication method.\nXmin\nXmin replication is the new cursor-less replication method for PostgreSQL. Cursorless syncs enable syncing new or updated rows without explicitly choosing a cursor field. The xmin system column which (available in all PostgreSQL databases) is used to track inserts and updates to your source data.\nThis is a good solution if:\n\nThere is not a well-defined cursor candidate to use for Standard incremental mode.\nYou want to replace a previously configured full-refresh sync.\nYou are replicating PostgreSQL tables less than 500GB.\nYou are not replicating non-materialized views. Non-materialized views are not supported by xmin replication.\n\nConnecting with SSL or SSH tunneling\nSSL modes\nHere is a breakdown of available SSL connection modes:\n\ndisable: disable encrypted communication between Zenskar and the database\nallow: enable encrypted communication only when required by the database\nprefer: allow unencrypted communication only when the source doesn't support encryption\nrequire: always require encryption\n\n❗️Connection failureIf SSL mode is set to require, the connection will fail if the database doesn't support encryption.\n\nverify-ca: always require encryption, and verify that the source has a valid SSL certificate\nverify-full: always require encryption and verify the identity of the data source\n\nSSH tunneling\nFor SSH tunnel method, select:\n\nSSH Key Authentication to use an RSA private key as your secret for establishing the SSH tunnel\nPassword Authentication to use a password as your secret for establishing the SSH tunnel\n\nConnect via SSH Tunnel\nYou can connect to a PostgreSQL instance via an SSH tunnel.\nWhen using an SSH tunnel, you are configuring Zenskar to connect to an intermediate server (also called a bastion or a jump server) that has direct access to the database. Zenskar connects to the bastion and then asks the bastion to connect directly to the server.\nTo connect to a PostgreSQL instance via an SSH tunnel:\n\nWhile setting up the PostgreSQL source connector, from the SSH tunnel dropdown, select:\n\nSSH Key Authentication to use a private as your secret for establishing the SSH tunnel\nPassword Authentication to use a password as your secret for establishing the SSH Tunnel\n\nFor SSH Tunnel Jump Server Host, enter the hostname or IP address for the intermediate (bastion) server that Zenskar will connect to.\nFor SSH Connection Port, enter the port on the bastion server. The default port for SSH connections is 22.\nFor SSH Login Username, enter the username to use when connecting to the bastion server. Note: This is the operating system username and not the PostgreSQL username.\nFor authentication:\n\nIf you selected SSH Key Authentication, set the SSH Private Key to the private key that you are using to create the SSH connection.\nIf you selected Password Authentication, enter the password for the operating system user to connect to the bastion server. Note: This is the operating system password and not the PostgreSQL password.\n\nGenerating a private--public key pair for SSH tunneling\nZenskar supports all SSH-compatible key formats, such as RSA and Ed25519. To generate an RSA key, run the following command on your server:\nssh-keygen -t rsa -m PEM -f zenskar_rsa\nAlternatively, to generate an Ed25519 key, run the following command:\nssh-keygen -t ed25519 -m PEM -f zenskar_rsa\nThe above command produces, what is known as an asymmetric key pair: a private key and a public key.\nThe private key in generated in the PEM format whereas teh public key remains in the standard format which can be used in the authorized_keys file on your bastion host. Add the public key to your bastion host to the user you want to use with Zenskar. The private key is provided via copy-and-paste to the Zenskar connector configuration screen to allow it to log into the bastion server.\nData type mapping\nAccording to PostgreSQL documentation, PostgreSQL data types are mapped to the following data types when synchronizing data:\n PostgreSQL data type mapping PostgreSQL typeResulting typeNotesbigintnumberbigserial, serial8numberbitstringFixed-length bit string (e.g. \"0100\").bit varying, varbitstringVariable-length bit string (e.g. \"0100\").boolean, boolbooleanboxstringbyteastringVariable length binary string with hex output format prefixed with \"\\x\" (e.g. \"\\x6b707a\").character, charstringcharacter varying, varcharstringcidrstringcirclestringdatestringParsed as ISO8601 date time at midnight. CDC mode doesn't support era indicators.double precision, float, float8numberInfinity, -Infinity, and NaN are not supported and converted to null.hstorestringinetstringinteger, int, int4numberintervalstringjsonstringjsonbstringlinestringlsegstringmacaddrstringmacaddr8stringmoneynumbernumeric, decimalnumberInfinity, -Infinity, and NaN are not supported and converted to null.pathstringpg_lsnstringpointstringpolygonstringreal, float4numbersmallint, int2numbersmallserial, serial2numberserial, serial4numbertextstringtimestringParsed as a time string without a time-zone in the ISO-8601 calendar system.timetzstringParsed as a time string with time-zone in the ISO-8601 calendar system.timestampstringParsed as a date-time string without a time-zone in the ISO-8601 calendar system.timestamptzstringParsed as a date-time string with time-zone in the ISO-8601 calendar system.tsquerystringtsvectorstringuuidstringxmlstringenumstringtsrangestringarrayarrayE.g. \"[\\\"10001\\\",\\\"10002\\\",\\\"10003\\\",\\\"10004\\\"]\".composite typestringUpdated 13 days ago MySQLQuickBooksTable of Contents\n\n🐕‍🦺 Setup guide\n\nStep 1: users and permissions\n⚙️ Step 2: create a PostgreSQL data source in Zenskar\n⚙️ Advanced Configuration\n\nPostgreSQL replication methods\n\nCDC\nXmin\n\nConnecting with SSL or SSH tunneling\n\nSSL modes\nSSH tunneling\n\nData type mapping\n\n"
  },
  {
    "id": "chunk_76",
    "document": "Prepaid commitment with postpaid overages.txt",
    "chunk_index": 0,
    "content": "Prepaid commitment with postpaid overages\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferencePrepaid commitment with postpaid overagesSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Prepaid commitment with postpaid overagesAn example-based guide that helps you create a prepaid-commitment-with-postpaid-overages contract and generate invoicesThis is an example-based guide to help you understand the prepaid commitment with postpaid overages business model. You may use this guide as a starting point to build a bespoke template and/or contract.\nThe example\nYou are an artificial intelligence SaaS provider that helps relocation service providers perform virtual household surveys.\nContract details\nYour customer chooses the Silver Survey Plan contract:\nServiceFeesUp to 25 end-user surveys$ 850 per monthUnused surveysCredited for future use, but no refundsAdditional surveys$34 per surveyOnboarding and support$ 400 per year\nCreate a contract\nYou can create a contract using a contract template as base or you can create a contract from scratch.\nCreate a contract using a contract plan as base\n📖Why create a contract plan?A contract template is reusable. That is, a contract template can be used to create bespoke contracts. You can create a contract without creating a contract template.Read the Zenskar contract plan documentation for better understanding.\nThe contract explained in the previous section needs to be translated into a Zenskar contract template.\nProductPricing modelDetailsSilver Survey PlanFlat fee (refer: how to create a flat-fee product.$ 850\nRecurring, per monthPrevious month overagesPer-unit pricing (refer: how to create a per-unit-pricing product)$ 34 per survey\nYou can create a contract template with the following properties:\n\nTemplate name: Silver Survey Plan\nBilling cadence: Monthly\nContract type: Prepaid\nCurrency: USD\n\nProduct 1: silver survey plan\nServiceFeesUp to 25 end-user surveys$ 850 per month\nThe first product of your contract plan  addresses the first clause of the contract and has the following properties:\n\nProduct name: Silver Survey Product\nThe following product settings help the product inherit the global contract template settings:\n\nBilling cadence: inherits the monthly billing cadence from the contract template settings\nContract type: inherits the prepaid contract type from the contract template settings\nPricing model: Flat Fee\n\n🚧NoteWe have not added an important contract condition to this product: the flat-fee is applicable to 25 end-user surveys. This condition is handled in the next product.\nProduct 2: previous month overages\nServiceFeesAdditional surveys$34 per surveyUnused surveysCredited for future use, but no refunds\nThis product of your contract template addresses the second and third clauses of the contract and has the following properties:\n\nProduct name: Previous Month Overages\nThe following product settings help the product deviate from the global contract template settings:\n\nBilling cadence: monthly billing cadence\nContract type: postpaid (as opposed to the prepaid contract type of the contract template)\nPricing model: Per Unit Pricing\nMetered: overages are calculated\nUsage aggregates: the usage or consumption aggregates that will help in determining the charges\n\nFeatures\n\nFree units: 25\n\n🚧NoteThis product covers an important contract condition in the Free Units feature: the flat-fee is applicable to 25 end-user surveys.\n\nExpiry: at the end of the contract billing period, the unused surveys accrued shall expire\n\nProduct 3: onboarding and support fee\nServiceFeesOnboarding and support$ 400 per year\nThis product of your contract template addresses the second and third clauses of the contract and has the following properties:\n\nProduct name: Onboarding and Support Fee\nThe following product settings help the product deviate from the global contract template settings:\n\nBilling cadence: yearly billing cadence\nContract type: prepaid\nPricing model: Flat Fee\n\nThe final contract template\nYou performed the following operations:\n\nCreated a contract temple\nAdded products to the contract template to satisfy the contract requirements\n\nThe final contract template should look as shown below:\n\nSave the contract template.\nCreate a contract\n\nIn the side panel, navigate to Contracts > Contracts, and click on the + ADD NEW CONTRACT button.\nSelect the Silver Survey Plan contract template, as shown below.\nFill in the following details:\n\nContract name: Silver Survey Plan\nCustomer: assign the contract to a customer. You must add customers before performing this  step.\nStart date: enter the start date of the contract\nEnd date: enter the end date of the contract\nDescription: add a description\nCurrency: select the currency in which you would like to generate invoices\nBilling cycle details: the start date of the billing cycle and the frequency: monthly, quarterly, or annual\nRenewal policy: refer contract renewal documentation\n\nClick on the Create button.\nCustomize the contract:\n\nchange contract template values\nadd or remove features\nadd or remove products\n\nClick on ADD CONTRACT button to save the contract.\n\nCreate a contract without using a contract template\nCreating a contract from scratch is similar to creating a contract template.\n\nCreate the desired products.\n\n🚧NoteCurrently, products are created directly in the contract template. This means, products created directly in a contract template are not available in the products module.In a contract, only existing products can be selected. This means, only products created using the products module can be added to a contract.Work is in progress to make contract templates behave the same way as contracts.The process of creating a product, however, is same irrespective of where it is created.\n\nIn the side panel, navigate to Contracts > Contracts, and click on the + ADD NEW CONTRACT button.\nSelect + New Contract. The following page will appear.\n\nFill in the details as described above and click the CREATE button.\n\nClick on the +ADD NEW PRODUCT button, and select all applicable products.\n\n📘NoteOnly one product can be selected at a time. The process must be repeated to add multiple products.\n\nThe final contract is ready with all products included. Click on ADD CONTRACT.\n\nCreate an invoice\nInvoices will be generated automatically based on the contract settings you configured. However, invoices can be created manually.\n\nIn the side panel, navigate to Contracts > Contracts.\nSelect the desired contract.\nClick on Generate Invoice.\nSelect the month for which you would like to generate an invoice.\nClick on Generate Invoice.\n\nA message appears when the background invoice generation processes is successfully triggered.\n\nClick on View Invoice to view the invoice immediately. You can also navigate to Invoices in the side panel, to view all invoices.\n\nRefer invoice documentation to learn about invoices and operations applicable on invoices.Updated 17 days ago Volume pricing with flat feePrepaid subscription with postpaid overagesTable of Contents\n\nThe example\n\nContract details\n\nCreate a contract\n\nCreate a contract using a contract plan as base\nCreate a contract without using a contract template\n\nCreate an invoice\n\n"
  },
  {
    "id": "chunk_77",
    "document": "Prepaid subscription with postpaid overages.txt",
    "chunk_index": 0,
    "content": "Prepaid subscription with postpaid overages\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferencePrepaid subscription with postpaid overagesSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Prepaid subscription with postpaid overagesAn example-based guide that helps you create a prepaid-subscription-with-postpaid-overages contract and generate invoicesThis is an example-based guide to help you understand the prepaid subscription with postpaid overages business model. You may use this guide as a starting point to build a bespoke template and/or contract.\nThe example\nYou are an artificial intelligence SaaS provider that helps relocation service providers perform virtual household surveys.\nContract details\nYour customer chooses the Silver Survey Plan contract:\nServiceFeesUp to 25 end-user surveys$34 per survey, $850 prepaid payment per monthUnused surveysCredited for future use, but no refundsAdditional surveys$34 per surveyOnboarding and support$400 per year\nCreate a contract\nYou can create a contract using a contract template as base or you can create a contract from scratch.\nCreate a contract using a contract template as base\n📖Why create a contract plan?A contract template is reusable. That is, a contract template can be used to create bespoke contracts. You can create a contract without creating a contract template.Read the Zenskar contract template documentation for better understanding.\nThe contract explained in the previous section needs to be translated into a Zenskar contract template.\nProductPricing modelDetailsSilver Survey PlanPer-unit pricing (refer: how to create a product priced per-unit.$34 per survey, $850 prepaid payment per monthPrevious month overagesPer-unit pricing (refer: how to create a per-unit-pricing product)$34 per survey\nYou can create a contract template with the following properties:\n\nTemplate name: Silver Survey Plan\nBilling cadence: Monthly\nContract type: Prepaid\nCurrency: USD\n\nProduct 1: silver survey plan\nServiceFeesUp to 25 end-user surveys$34 per survey, $850 prepaid payment per month\nThe first product of your contract plan  addresses the first clause of the contract and has the following properties:\n\nProduct name: Silver Survey Product\nThe following product settings help the product inherit the global contract template settings:\n\nBilling cadence: inherits the monthly billing cadence from the contract template settings\nContract type: inherits the prepaid contract type from the contract template settings\nPricing model: per-unit pricing\nMetered: usage is calculated using the Compute aggregate\n\nProduct 2: previous month overages\nServiceFeesAdditional surveys$34 per surveyUnused surveysCredited for future use, but no refunds\nThis product of your contract template addresses the second and third clauses of the contract and has the following properties:\n\nProduct name: Previous Month Overages\nThe following product settings help the product deviate from the global contract template settings:\n\nBilling cadence: monthly billing cadence\nContract type: postpaid (as opposed to the prepaid contract type of the contract template)\nPricing model: Per Unit Pricing\nMetered: overages are calculated\nUsage aggregates: the usage or consumption aggregates that will help in determining the charges\n\nFeatures\n\nFree units: 25\n\n🚧NoteThis product covers an important contract condition in the Free Units feature: the prepaid amount of $850 covers 25 end-user surveys. Anything above this is considered overage and charges are postpaid.\n\nExpiry: at the end of the contract billing period, the unused surveys accrued shall expire\n\nProduct 3: onboarding and support fee\nServiceFeesOnboarding and support$ 400 per year\nThis product of your contract template addresses the second and third clauses of the contract and has the following properties:\n\nProduct name: Onboarding and Support Fee\nThe following product settings help the product deviate from the global contract template settings:\n\nBilling cadence: yearly billing cadence\nContract type: prepaid\nPricing model: Flat Fee\n\nThe final contract template\nYou performed the following operations:\n\nCreated a contract temple\nAdded products to the contract template to satisfy the contract requirements\n\nThe final contract template should look as shown below:\n\nSave the contract template.\nCreate a contract\n\nIn the side panel, navigate to Contracts > Contracts, and click on the + ADD NEW CONTRACT button.\nSelect the Silver Survey Plan contract template, as shown below.\nFill in the following details:\n\nContract name: Silver Survey Plan\nCustomer: assign the contract to a customer. You must add customers before performing this  step.\nStart date: enter the start date of the contract\nEnd date: enter the end date of the contract\nDescription: add a description\nCurrency: select the currency in which you would like to generate invoices\nBilling cycle details: the start date of the billing cycle and the frequency: monthly, quarterly, or annual\nRenewal policy: refer contract renewal documentation\n\nClick on the Create button.\nCustomize the contract:\n\nchange contract template values\nadd or remove features\nadd or remove products\n\nClick on ADD CONTRACT button to save the contract.\n\nCreate a contract without using a contract template\nCreating a contract from scratch is similar to creating a contract template.\n\nCreate the desired products.\n\n🚧NoteCurrently, products are created directly in the contract template. This means, products created directly in a contract template are not available in the products module.In a contract, only existing products can be selected. This means, only products created using the products module can be added to a contract.Work is in progress to make contract templates behave the same way as contracts.The process of creating a product, however, is same irrespective of where it is created.\n\nIn the side panel, navigate to Contracts > Contracts, and click on the + ADD NEW CONTRACT button.\nSelect + New Contract. The following page will appear.\n\nFill in the details as described above and click the CREATE button.\n\nClick on the +ADD NEW PRODUCT button, and select all applicable products.\n\n📘NoteOnly one product can be selected at a time. The process must be repeated to add multiple products.\n\nThe final contract is ready with all products included. Click on ADD CONTRACT.\n\nCreating an invoice\nInvoices will be generated automatically based on the contract settings you configured. However, invoices can be created manually.\n\nIn the side panel, navigate to Contracts > Contracts.\nSelect the desired contract.\nClick on Generate Invoice.\nSelect the month for which you would like to generate an invoice.\nClick on Generate Invoice.\n\nA message appears when the background invoice generation processes is successfully triggered.\n\nClick on View Invoice to view the invoice immediately. You can also navigate to Invoices in the side panel, to view all invoices.\n\nRefer invoice documentation to learn about invoices and operations applicable on invoices.Updated 17 days ago Prepaid commitment with postpaid overagesDealHubTable of Contents\n\nThe example\n\nContract details\n\nCreate a contract\n\nCreate a contract using a contract template as base\nCreate a contract without using a contract template\n\nCreating an invoice\n\n"
  },
  {
    "id": "chunk_78",
    "document": "Product, sub-product, add-on, and product catalog.txt",
    "chunk_index": 0,
    "content": "Product, sub-product, add-on, and product catalog\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceProduct, sub-product, add-on, and product catalogSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Product, sub-product, add-on, and product catalogA Zenskar concept that defines any service or product you sell to your customer as part of a contract.This guide will help you understand:\n\nthe concepts of product and product bundle in Zenskar\nhow to use products and product bundles in plans and contracts\n\nWhat is a product?\n🔖DefinitionIn Zenskar, a product is any service or product you sell to your customer as part of a contract.\nIn a metered product, you measure customer activity or consumption of resources.\nIn a non-metered product, you do not measure customer activity or consumption of resources. You charge the customer based on the number of units purchased.\n\nWhat is a product bundle?\n🔖DefinitionA product bundle is a collection of related products that can be used together in a plan.\nProduct catalog\nProduct catalog is a place where an organization can define the list of products/services that they offer to their customers. These products then can be directly used in a contract or plan.\nA product catalog can be accessed in two ways:\n\nNavigate to Contracts > Products to land on the Products page.\n\nClick on the + ADD PRODUCT button while creating or editing a contract or plan.\n\nComponents of a product\nPricing models\n\nPricing modelDescriptionFlat feeA simple pricing strategy used in business contracts where the total cost, scope, and timeline are agreed upon in advance.Per-unit pricingPer-unit pricing is a strategy in which you charge your customer for each unit of service or product you sell.Volume pricingA pricing strategy in which the price of a service or product is adjusted based on the quantity purchasedTiered pricingA pricing strategy where the cost of a product or service is set at different levels, or tiers, based on various factors such as quantity, quality, features, or customer segmentsPercent pricingA pricing strategy in which a service or product is sold at a price that is a percentage of the price of another product in the contractPackage pricingA pricing strategy in which a service or product that is sold as a packageMatrix pricingA pricing strategy where the cost of a product or service is dependent on multiple dimensionsCustom tiered pricingCustom tiered pricing allows you to use create products based on customized tiered and volume pricing models.Step pricingA tiered pricing strategy that defines a flat-fee for each tier or step\nFeatures\nFeatures at contract level\n\nFeatureDescriptionDiscountThe discount feature allows you to deduct a certain percentage or fixed value from the usual cost of a service or product.TaxThe payment terms feature helps you to set a due date for payment.CommitmentThe minimum commitment feature helps you set contract terms that require the customers to consume a minimum amount.ConsumptionsZenskar helps you generate invoices in a currency of your choice using the custom currency feature.\nFeatures at product level\n\nFeatureDescriptionDiscountTaxFree unitsCommitmentGrantsConsumption\nPutting it all together using an example\nLet us assume:\n\nyou are a cloud service provider who provides compute resources in different regions of US\nyour services are priced differently in every region\n\nIn plain English, the product can be defined as shown below:\nMarkdownCompute (product) with Minimum Gurantee - 100 USD\n    Compute East Zone (sub-product)\n\t\t- Per-unit pricing - 0.01 USD/min (metered)\n    Compute West Zone (sub-product)\n\t\t- Per-unit pricing - 0.02 USD/min (metered)\n    Compute North Zone (sub-product)\t\n\t\t- Per-unit pricing - 0.05 USD/min (metered)\n    Block storage\n\t\t- Per-unit pricing - 0.01 USD/GB (metered)\nYour customer is allowed to use a compute resource in any of the regions. The combined minimum charges for all the sub-products will be 100 USD, irrespective of the usage.\nAdd a product\nThe same product when defined in Zenskar will look like the following:\n\nHere, Compute is the parent product that contains three sub-products:\n\nCompute East Zone\nCompute West Zone\nCompute North Zone\n\nYou can notice that the parent product does not have a pricing model or an aggregate attached to it.\nThe Minimum Commitment feature is assigned to the parent product, Compute. The baseline charge irrespective of usage is set to 100 USD.\nAdd sub-products\nCompute East Zone\n\nThe compute resources are provided in the east zone at 0.01 USD/min.\nThe usage is metered. You must select an appropriate aggregate from the Usage Aggregate drop-down.\n\nCompute West Zone\n\nThe compute resources are provided in the west zone at 0.02 USD/min.\nThe usage is metered. You must select an appropriate aggregate from the Usage Aggregate drop-down.\n\nCompute North Zone\n\nThe compute resources are provided in the north zone at 0.05 USD/min.\nThe usage is metered. You must select an appropriate aggregate from the Usage Aggregate drop-down.\n\nAdd add-ons\nThe compute resource already comes with enough storage to install an operating system. However, if needed, the customer can add more block storage. Block storage is never sold individually and must be purchased in the context of a compute product. Therefore, block storage is an add-on.\nTo keep the example simple, let us assume that the block storage is charged at 0.01 USD/GB (metered) in all the zones.\n\nA new network-related add-on\nImagine a scenario where you are forced to charge for network usage in the east zone:\n\nfrom 0–1 TB/month, 1 USD/month\nfrom 2 TB/month onward, 1.5 USD/month\n\nThe new contract for east zone can be described in English as follows:\nMarkdownCompute (product) with Minimum Gurantee - 100 USD\n    Compute East Zone (sub-product)\n\t\t- Per-unit pricing - 0.01 USD/min (metered)\n    Compute West Zone (sub-product)\n\t\t- Per-unit pricing - 0.02 USD/min (metered)\n    Compute North Zone (sub-product)\t\n\t\t- Per-unit pricing - 0.05 USD/min (metered)\n    Block storage\n\t\t- Per-unit pricing - 0.01 USD/GB (metered)\n    Network\n    - Tiered pricing\n    \t- from 0–1 TB/month, 1 USD/month (metered)\n      - from 2 TB/month onward, 1.5 USD/month (metered)\nYou can edit a product and add a new add-on for network related usage and charges.\n\nThe Compute East Zone sub-product will now have a Block Storage and a Network add-on:\nUpdated 14 days ago ContractsFree unitsTable of Contents\n\nWhat is a product?\n\nWhat is a product bundle?\n\nProduct catalog\n\nComponents of a product\n\nPricing models\nFeatures\n\nPutting it all together using an example\n\nAdd a product\nAdd sub-products\nAdd add-ons\n\n"
  },
  {
    "id": "chunk_79",
    "document": "QuickBooks.txt",
    "chunk_index": 0,
    "content": "QuickBooks\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceQuickBooksSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by QuickBooksQuickBooks is online accounting software for small businesses.\n🐕‍🦺 Setup guide\nThis guide will help you set up QuickBooks as a data source for your Zenskar account.\n🚧PrerequisitesTo connect QuickBooks with Zenskar, you need:\nIntuit QuickBooks account\nIntuit Developer account\nOAuth2.0 credentials (see OAuth 2.0 playground)\nRealm ID\n\nSet up QuickBooks\n\nCreate an Intuit Developer account\nCreate an application\nObtain credentials. The easiest way to get these credentials is by using Quickbook's OAuth 2.0 playground\n\n⚙️ Set up the QuickBooks data source in Zenskar\n⚙️ Set up data source and type\n\nLog into your Zenskar account.\nIn the left navigation bar, click Metering > Data Sources. In the top-right corner, click + ADD DATA SOURCE.\nIn the Set Up Source section of the Add New Data Source page, enter a name for the QuickBooks data source connection.\nSelect Google Sheets from the Source Type dropdown.\n\n⚙️ Configure data source\nIn the Source Config section of the Add New Data Source page, do the following:\n\nSandbox - Select Yes if you're going to replicate the data from the sandbox environment. Else, select No.\nRealm ID - The labeled company ID whose data you'd like to sync.\n\nrealmID (also known as companyID) : An ID that identifies an individual QuickBooks Online company. Users commonly have multiple QuickBooks Online companies. The realmID identifies each one. Many users know this as a “company ID.” It’s this same value as the realm ID.\n\nClient ID - The OAuth2.0 application ID.\nStart date - The date starting from which you'd like to replicate data.\nClient Secret - The OAuth2.0 application secret.\nRefresh Token - Refresh token used to get new access token every time the current one is expired.\n\nSupported streams\nThe Zenskar QuickBooks connector is capable of syncing the following Streams:\n\nAccounts\nBillPayments\nBudgets\nBills\nClasses\nCreditMemos\nCustomers\nDepartments\nDeposits\nEmployees\nEstimates\nInvoices\nItems\nJournalEntries\nPayments\nPaymentMethods\nPurchases\nPurchaseOrders\nRefundReceipts\nSalesReceipts\nTaxAgencies\nTaxCodes\nTaxRates\nTerms\nTimeActivities\nTransfers\nVendorCredits\nVendors\n\nData type map\nIntegration TypeAirbyte TypeNotesstringstringnumbernumberarrayarrayobjectobjectUpdated 13 days ago PostgreSQLRedshiftTable of Contents\n\n🐕‍🦺 Setup guide\n\nSet up QuickBooks\n⚙️ Set up the QuickBooks data source in Zenskar\n\nSupported streams\n\nData type map\n\n"
  },
  {
    "id": "chunk_80",
    "document": "Razorpay.txt",
    "chunk_index": 0,
    "content": "Razorpay\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceRazorpaySearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by RazorpayUpdated 17 days ago AdyenStripe\n\n"
  },
  {
    "id": "chunk_81",
    "document": "Receivables.txt",
    "chunk_index": 0,
    "content": "Receivables\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceReceivablesSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by ReceivablesZenskar allows you to create, customize and send out communications and follow-ups with your customers. This includes customizing invoice templates, payment receipts, emails that go along with your invoices or any follow ups and reminders that you might want to send your customers.\nCustomer Segments\nYou can define customer segments based on any property within the Zenskar system. This could include things like the number of days for which payment has been pending, or the country that the customer belongs to, or any custom data that you might want to associate with a customer.\nFor example if you want to create a customer segment for all customers from a particular country.\n\nDocument & Email Templates\nYou can customise your invoice to look as you like it. These templates have support to ingest various variables like customer name, email, address, invoice amount, numbers etc.\nShown below is a sample invoice generated from a HTML template file\n\nYou can also customize the email templates that you send out to your customers. These templates can also be dynamically updated based on variables defined in these templates, for example, customer name, payment due date, etc. Emails can have any document as a attachment for example you can send out invoices, payment receipts etc.\nShown below is a sample invoice email sent to the customer\n\nAutomation\nOnce you have defined the segments and templates, you can either send out these communications manually or configure Zenskar to send them automatically via the Communications > Configuration section. These automations also support cc and bcc which will be used while sending out emails\nShow below is sample configuration to send out emails to users who have invoice due for more than a given number of days\nUpdated 17 days ago Performance obligation policiesMonitoringTable of Contents\nCustomer Segments\nDocument & Email Templates\nAutomation\n\n"
  },
  {
    "id": "chunk_82",
    "document": "Redshift.txt",
    "chunk_index": 0,
    "content": "Redshift\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceRedshiftSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Redshift\nOverview\nThe Redshift source supports Full Refresh syncs. Zenskar will copy all rows in the tables and columns you set up for replication.\nThis Redshift source connector is built on top of the source-jdbc code base and is configured to rely on JDBC 4.2 standard drivers provided by Amazon via Mulesoft here as described in Redshift documentation here.\nSync overview\nResulting schema\nThe Redshift source does not alter the schema present in your warehouse. Depending on the destination connected to this source, however, the schema may be altered. See the destination's documentation for more details.\nFeatures\nFeatureSupportedNotesFull Refresh SyncYesIncremental SyncYesCursor-based, using ORDER BY on a user-defined cursor columnReplicate Incremental DeletesNot supported in RedshiftLogical Replication (WAL)Not supported in RedshiftSSL SupportYesSSH Tunnel ConnectionNoNamespacesYesEnabled by defaultSchema SelectionYesMultiple schemas may be used at one time. Keep empty to process all of existing schemas\nIncremental Sync\nThe Redshift source connector supports incremental syncs. To setup an incremental sync for a table in Redshift, you must setup a user-defined cursor field such as an updated_at column. The connector relies on this column to know which records were updated since the last sync it ran.\nDefining a cursor field allows you to run incremental-append syncs. To run incremental-dedupe syncs, you'll need to tell the connector which column(s) to use as a primary key. See the incremental-dedupe sync docs for more information.\n🐕‍🦺 Setup guide\nPrerequisites\n\nActive Redshift cluster\nAllow connections from Zenksar to your Redshift cluster\n\n⚙️ Set up the QuickBooks data source in Zenskar\n⚙️ Set up data source and type\n\nLog into your Zenskar account.\nIn the left navigation bar, navigate to Metering > Data Sources. In the top-right corner, click + ADD DATA SOURCE.\nIn the Set Up Source section of the Add New Data Source page, enter a name for the MongoDB data source connection.\nSelect Redshift from the Source Type dropdown.\n\n⚙️ Configure data source\nIn the Source Config section of the Add New Data Source page, do the following:\n📖JDBC URLThe JDBC URL has the following format:jdbc:redshift://<endpoint>:<port>/<database>.\n\nHost:  The host is the JDBC URL without the <port> and <database>.\nPort: The port number that you specified when you launched the cluster. If you have a firewall, make sure that this port is open for you to use. Default is set to 5439.\nDatabase: The database that you created for your cluster.\nPassword: The password that you created for your cluster.\nUsername: The user that you created for your cluster.\nJDBC URL Params: Please refer AWS Redshift documentation regarding building the JDBC connection URL and options for JDBC driver version 2.1 configuration.\nUpdated 13 days ago QuickBooksShopifyTable of Contents\n\nOverview\n\nSync overview\nFeatures\n\n🐕‍🦺 Setup guide\n\nPrerequisites\n⚙️ Set up the QuickBooks data source in Zenskar\n\n"
  },
  {
    "id": "chunk_83",
    "document": "Revenue distribution and redistribution methods.txt",
    "chunk_index": 0,
    "content": "Revenue distribution and redistribution methods\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceRevenue distribution and redistribution methodsSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Revenue distribution and redistribution methodsRevenue distribution methods\n📚DefinitionA revenue distribution method is a method or an algorithm that is used to distribute or amortize deferred revenue over a contract period.\n\nRevenue distribution or amortization in this guide are based on an invoice that shows following:\n\nContract start date of 20 August\nContract end date of 19 December of the same year\nTotal of $400\n\n🚧NoteOnly those revenue distribution methods that are available end-to-end have been described in this document. A few work-in-progress methods are also available in the UI.\nEqual over all periods\nThis method distributes the revenue evenly across all periods, including partial periods. Revenue is not prorated based on the number of days in any given period.\nPeriodRevenueAugust$80September$80October$80November$80December$80Total$400\n\nProrated by days\nThis method distributes revenue individually for each period based on the number of days in each period.\n\nEach day in a given period recognizes an equal amount.\nHowever, each period may recognize a different amount. The full amortization period is 122 days, which is $3.278689 per day.\n\nFor the current example:\n\nThe first period is a partial one and is prorated for 20 August through 31 August, or 12 days.\nThe second period is prorated for the entire month of September, or 30 days.\nThe third period is prorated for the entire month of October, or 31 days.\nThe fourth period is prorated for the entire month of November, or 30 days.\nThe fifth period is also a partial one and prorated for 1 December through 19 December, or 19 days.\n\nPeriodRevenueCalculationAugust$39.3412 days ÷122 days × $400 = $39.34September$98.3630 days ÷122 days × $400 = $98.36October$101.6431 days ÷122 days × $400 = $101.64November$98.3630 days ÷122 days × $400 = $98.36December$62.3031 days ÷122 days × $400 = $62.30Total$400\n\nEqual prorate first and last period\nThis method determines the full number of periods in the contract and allocates revenues based on the proportional period amount. The example has four full periods, and the amount per period is $100.\nPeriodRevenueCalculationAugust$38.7112 days ÷ 31 days × $100September$100October$100November$100December$61.2919 days ÷ 31 days × $100Total$400\n\nRevenue redistribution methods\n📚DefinitionsA revenue redistribution method is a method or an algorithm that is used to redistribute or re-amortize deferred revenue over the open contract periods due to change in contract, such as a change in the start or end dates.An open contract period is a period whose revenue has not been recognized.A closed contract period is a period whose revenue has been recognized.\n\nRevenue redistribution or re-amortization in this guide are based on an invoice that shows following:\nInitial contract configuration:\n\nContract start date of 20 August\nContract end date of 19 December of the same year\nTotal of $400\n\nModified contract configuration:\n\nNew revenue start date of 20 October (a shift of two months)\nContract end date of 19 December of the same year (same as original)\n\n🚧NoteOnly those revenue distribution methods that are available end-to-end have been described in this document. A few work-in-progress methods are also available in the UI.\nStraight line\nThis method redistributes the revenue evenly across all periods, including partial periods. Revenue is not prorated based on the number of days in any given period. Continuing with the above example invoice:\n\nUnallocated revenue is $80 each for the month of August and September, totaling $160.\nThe $160 unallocated revenue has to be redistributed over the open contract periods.\nThere are three such open contract periods: October, November, and December.\n$160/3 = $53.33\n\nPeriodRevenueAugust$0September$0October$80 + $53.33November$80 + $53.33December$80 + $53.33Total$400\n\nFront-loaded distribution\nIn this method, the revenue is calculated per period, and the first partial period of the subscription term will get full revenue recognition. The unallocated revenue is also loaded to the first period.\nIn the current example, October is the first partial period and a revenue of $240 will be recognized, whereas a revenue of $80 will be recognized in November and December.\nPeriodRevenueAugust$0September$0October$240November$80December$80Total$400\n\nBack-loaded distribution\nIn this method, the revenue is calculated per period, and the last partial period of the subscription term will get full revenue recognition. The unallocated revenue is also loaded to the last period. This is the exact opposite of the front-loaded distribution method.\nIn the current example, December is the last partial period and a revenue of $240 will be recognized, whereas a revenue of $80 will be recognized in October and November.\nPeriodRevenueAugust$0September$0October$80November$80December$240Total$400Updated 13 days ago Revenue recognitionPerformance obligation policiesTable of Contents\n\nRevenue distribution methods\n\nEqual over all periods\nProrated by days\nEqual prorate first and last period\n\nRevenue redistribution methods\n\nStraight line\nFront-loaded distribution\nBack-loaded distribution\n\n"
  },
  {
    "id": "chunk_84",
    "document": "Revenue recognition.txt",
    "chunk_index": 0,
    "content": "Revenue recognition\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceRevenue recognitionSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Revenue recognitionZenskar is ASC 606- and IFRS 15-compliant.\nAlthough ASC 606 and IFRS 15 have some differences, both establish the principles that an entity applies when reporting information about the nature, amount, timing, and uncertainty of revenue and cash flows from a contract with a customer.\nApplying either standard, an entity recognizes revenue to depict the transfer of promised goods or services to the customer in an amount that reflects the consideration to which the entity expects to be entitled in exchange for those goods or services.\nBoth ASC 606 and IFRS 15 have defined a 5-step model for revenue recognition:\n\nIdentify the contract\nIdentify separate performance obligations\nDetermine the transaction price\nAllocate transaction price to performance obligations\nRecognize revenue when each performance obligation is satisfied\n\n⚙️ Step 1: Identify the contract\n📚NoteAll contracts created in Zenskar are inherently ASC 606- and IFRS 15-compliant. There is no further action required of you.\nLet us build an example contract that contains the following three products:\nProductDescriptionPlatform annual feeA prepaid, recurring flat fee of $3600 per year for access to the platform.Implementation feeA one-time implementation fee of $600.Extra seatsA fee of $10 per seat for 60 extra seats.\nFig. 1: A Zenskar contract is inherently ASC 606- and IFRS 15-compliant.\n\n⚙️ Step 2: Identify separate performance obligations\nPerformance obligation (POB) is your promise to transfer services or products to your customer. During this step, you should itemize every distinct POB. A service or product is considered distinct when it is of value to the customer and can be transferred independently of other services or products in the contract.\n📚NoteIdentifying POs will result in the unbundling of a contract into POB. This is a crucial step to recognize revenue correctly.\n📚NoteThe following are examples of circumstances which do not give rise to a POB:\nproviding goods at scrap value\nactivities relating to internal administrative contract set-up\n\nAdd performance obligations in Zenskar\n\nTo add POBs from the contract mentioned in Step 1, navigate to Accounting > Revenue Rule Library.\nThe Create Performance Obligation Template page is displayed.\n\nFill in the required details in the Template Information section:\n\nName: a descriptive name for the POB template.\nDescription: describe what the template is for.\nRevenue Account: refer to the documentation on the hierarchy of default accounts.\nRevenue Distribution: choose from Point in Time and Over Time.\n\nFill in the required details in the Criteria section:\n\nMap a product to a POB by selecting product parameters and defining conditions.\nThe following product parameters are available:\n\nParameterConditionValueProductequalsSelect the product from the Value drop-down menu.Pricing ModelequalsSelect the pricing model from the Value drop-down menu.Contract Item Namecontains\nnot contains\nstarts with\nend withProduct Start DateequalsSelect a date.Product End DateequalsSelect a date.Aggregateequals\nis empty\nis not emptySelect an aggregate  from the Value drop-down menu.Entitlementis empty\nis not empty\n\nOne or more parameters can be used to define conditions for mapping a product to a POB template.\n\nTo map multiple products to the same POB template, click on the Add more products to the POB  checkbox. Thereafter, map the desired product to the POB template by selecting corresponding product parameters and defining conditions.\n\nContinuing with the example: add performance obligations\nThe contract mentioned in Step 1 has three distinct products that could result in the contract unbundling into three potential POBs:\n\nPlatform annual fee\nImplementation fee\nExtra seats\n\n📚NoteThere are circumstances that could result in services or products being combined into a POB. For example, if one service or product depends on the price or performance of another service or product, you may consider combining them into one PO.\nIn the current example, one potential POB, Platform annual fee, is dependent on the performance of another potential PO, Implementation fee. Therefore, it makes sense to combine them.\nLet us add two POBs:\n\nPlatform access: this POB has the following products serving as value sources.\n\nProductPercentagePlatform annual fee100Implementation fee100\n\nPerformance obligation parameterDetailsNameAny descriptive string that uniquely identifies the POB.DescriptionDescribe your PO.POB periodOver what period do you expect the customer to make the payment?POB policyRefer the documentation on POB policies.Value sourceThe products that contribute value to the POB:\n• a POB may have multiple products as value sources\n• multiple POBs may share a portion of the value of a product\n\nExtra seats: this PO has only one product serving as value source.\n\nProductPercentageExtra seats100\n\n📚NoteIdentifying POBs is entirely dependent on the circumstances under which your business operates. Therefore, Zenskar provides you the necessary tools and lets you decide how to identify POBs.\nView performance obligations\n\nTo view the POBs from the contract mentioned in Step 1, navigate to Contracts.\nClick on the kebab menu located at the end of the row containing the contract you are interested in.\nClick on the Revenue Recognition menu option, as shown below:\n\nThe list of POBs associated with the contract will be displayed, as shown below:\n\nEdit performance obligations\n\nThe following fields can be edited in a revenue plan:\nFieldDetailsStart dateThis date can be different from the contract start date. For example, the implementation of your service or product may not be trivial and may take a couple of months. You can choose to start recognizing the revenue two months after the invoice creation.End dateThis date can also be different from the contract start date based on your special circumstances.Revenue distribution methodRefer the documentation on revenue distribution methods.Revenue config change impactIf the end date of a PO is edited, the revenue plan is affected. There are two ways of handling this change:\n• update all periods: revenue postings are considered loked if they have already been recognized and corresponding journal entries created. Locked revenue postings cannot be altered. However, the changes affecting such locked revenue postings can be redistributed over the remaining periods using any revenue redistribution method supported by Zenskar. For example, if the revenue postings for January, 2024, through August, 2024, have been recognized, any changes affecting these postings can be redistributed in the revenue postings of September, 2024, through December, 2024.\n• update remaining periods: for changes that do not affect the locked revenue postings, this method can be used.Revenue redistribution methodIn the event of a change in the end date of a revenue plan, the following revenue redistribution methods are supported:\n• straight-line\n• front-loaded\n• back-loadedDeferral accountThe revenue account where deferred revenue is posted.Revenue account\n\n⚙️ Step 3: Determine the transaction price\nTransaction price is the most likely value that you expect to be entitled to in exchange for the promised services or products supplied under a contract. The product definition will contain the transaction price necessary for revenue recognition.\nFig. 4: \"Platform annual fee\" as product.\nFig. 5: One-time \"implementation fee\" as product.\nFig. 6: \"Extra seats\" as product.\n\n⚙️ Step 4: Allocate transaction price to performance obligations\nAllocate transaction price to each PO on the basis of the relative stand-alone selling prices of each distinct service or product promised in the contract. Continuing with our example, the following two POs can be created:\n\nPlatform access: this PO has the following products serving as value sources.\n\nProductPercentagePlatform annual fee100Implementation fee100\n\nExtra seats: this PO has only one product serving as value source.\n\nProductPercentageExtra seats100\nYou can create more POBs, view and edit POs associated with a contract:\n\n📚NoteIdentifying POs is entirely dependent on the circumstances under which your business operates. Therefore, Zenskar provides you the necessary tools and lets you decide how to identify POs.\n⚙️ Step 5: Recognize revenue when each performance obligation is satisfied\nFig. 9: Invoice.\nThe invoice has resulted in a journal entry that has credited the deferred revenue and debited the accounts receivable for $4800.\nFig. 10: Journal entry created upon invoice approval.\nIf we perform revenue recognition of the Platform Access performance obligation for a single month and post the revenue to the general ledger, we will see the following journal entry.\nFig. 11: Journal entry created on revenue recognition of the Platform Access performance obligation for a single month.Updated 17 days ago CreditsRevenue distribution and redistribution methodsTable of Contents\n\n⚙️ Step 1: Identify the contract\n\n⚙️ Step 2: Identify separate performance obligations\n\nAdd performance obligations in Zenskar\nView performance obligations\nEdit performance obligations\n\n⚙️ Step 3: Determine the transaction price\n\n⚙️ Step 4: Allocate transaction price to performance obligations\n\n⚙️ Step 5: Recognize revenue when each performance obligation is satisfied\n\n"
  },
  {
    "id": "chunk_85",
    "document": "Role-based access control.txt",
    "chunk_index": 0,
    "content": "Role-based access control\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceRole-based access controlSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Role-based access controlZenskar employs Role-based access control (RBAC) for authorization.Updated 17 days ago SendersUsers\n\n"
  },
  {
    "id": "chunk_86",
    "document": "Roles.txt",
    "chunk_index": 0,
    "content": "Roles\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceRolesSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by RolesZenskar employs a mix of role-based access control (RBAC) and permission-based access control for authorization. People often get confused between authentication and authorization. It is important to remember that authorization is not the same as authentication:\nAuthenticationAuthorizationAre you who you claim to be?Are you allowed to do what you are trying to do?You are challenged to validate your credentials through mechanisms such as password verification, fingerprint matching, facial recognition.You are provided access to a resource through policies and rules created by an administrator.Generally governed by the OpenID Connect (OIDC) protocol.Generally governed by the OAuth 2.0 framework.\nIn summary, access to a resource is protected by both authentication and authorization: you have to prove your identity and possess appropriate permissions to interact with resources\n\nImportant concepts are summarized in the table below:\nAuthorization objectDescriptionPermissionsSets of permitted verbs (or actions) on a set of resources. In Zenskar, Read, Write, Delete, and Approve are the verbs available.RolesCollections of permissions. You can bind (or assign) users to a role.BindingsAssociations of a user with a role.\nHow to add a new role?\n\nClick on the named drop-up menu located at the bottom of the side panel, and click on Roles.\nClick on the + ADD NEW ROLE  button.\nEnter the new role name.\nGrant required permissions to the role by selecting permissions from the AVAILABLE PERMISSIONS list and adding them to the GRANTED PERMISSIONS list.\nClick ADD ROLE.\n\n🚧Choose all permissionsThe option to choose all permissions must be used with caution. The user attains unlimited power.\n\nAvailable permissions\nThe permissions are of the form:\nCan Read <RESOURCE>\nCan Write <RESOURCE>\nCan Delete <RESOURCE>\n📖Can Approve <RESOURCE> permissionThere is also a Can Approve<RESOURCE> permission applicable only to invoices.\nResourceAccountingAggregateAnalyticsContractCredit NotesCustomerData SourcesIntegrationsInvoicesJobsMonitorsPaymentsPayment MethodsProductRaw MetricRolesTemplateTriggersUser\nHow to update a role?\n\nClick on the named drop-up menu located at the bottom of the side panel, and click on Roles.\nFrom the roles listed on the page, click on the role you wish to edit.\nMake the necessary edits and click the UPDATE ROLE button.\n\nHow to delete a role?\n\nClick on the named drop-up menu located at the bottom of the side panel, and click on Roles.\nEach row on the Roles page has a kebab menu. Clicking on the kebab menu will display the option to delete a role.\n\n🚧CautionA user can be granted more permissions than allowed by a role. Deleting a role will revoke the permissions granted to user by the role. However, the user will retain the extra permissions.Updated 13 days ago UsersWebhook alertsTable of Contents\nHow to add a new role?\n\nAvailable permissions\n\nHow to update a role?\nHow to delete a role?\n\n"
  },
  {
    "id": "chunk_87",
    "document": "Sage.txt",
    "chunk_index": 0,
    "content": "Sage\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceSageSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by SageBusiness management tools and insights.Updated 17 days ago QuickBooksSAP\n\n"
  },
  {
    "id": "chunk_88",
    "document": "Salesforce.txt",
    "chunk_index": 0,
    "content": "Salesforce\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceSalesforceSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Salesforce\nThe following steps will help you integrate your Zenskar and Salesforce accounts:\n\nThe mandatory step: Installation and setup of Zenskar's Salesforce package.\nFurther, you may choose to:\n\nuse the default Flow or\ncreate your own Flow to suit your workflow.\n\nUpdated 17 days ago PipedriveInstallation and setup of Zenskar’s package for Salesforce\n\n"
  },
  {
    "id": "chunk_89",
    "document": "SAML authentication.txt",
    "chunk_index": 0,
    "content": "SAML authentication\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceSAML authenticationSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by SAML authenticationSingle sign-on based on Security Assertion Markup LanguageZenskar supports single sign-on (SSO) based on security assertion markup language (SAML).\n📚DefinitionsIdentity provider (IdP): performs authentication and passes the user's identity and authorization level to the service provider (SP). Google is an IdP.Service provider (SP): trusts the IdP and authorizes the given user to access the requested resource. Zenskar is an SP.\nObtain signing certificate from Zenskar\nBefore enabling SAML-based SSO in your Cloud Identity or Google Workspace, you must contact [email protected] to obtain a signing certificate, which is a base64-encoded RS256 signing certificate in PEM format:\n-----BEGIN CERTIFICATE-----\nMIICmzCCAYMCBgF7v8/V1TANBgkq...\n-----END CERTIFICATE-----\nAfter authenticating a user, Zenskar passes a SAML assertion to Cloud Identity or Google Workspace. To enable Cloud Identity and Google Workspace to verify the integrity and authenticity of that assertion, Zenskar  signs the assertion with a special token-signing key and provides a certificate that enables Cloud Identity or Google Workspace to check the signature.\nConfiguring Cloud Identity or Google Workspace\nYou must configure single sign-on in Cloud Identity or Google Workspace.\n\nOpen the Admin Console and log in using a super-admin user.\n\nIn the menu, click Show more and go to Security > Authentication > SSO with third-party IdP.\n\nClick Add SSO profile.\n\nSet Setup SSO with third party identity provider to enabled.\n\nEnter the following settings:\n\nSign-in page URL:\nhttps://ZENSKAR_AUTH_SERVER/protocol/saml\n\nSign-out page URL:\nhttps://ZENSKAR_AUTH_SERVER/protocol/openid-connect/logout\n\nUse a domain specific issuer: clear\n\nChange password URL:\nhttps://ZENSKAR_AUTH_SERVER/account\n\nIn all URLs, replace the following with values provided by Zenskar:\n\nZENSKAR_AUTH_SERVER: the fully qualified domain name of Zenskar's authentication server\n\nUnder Verification certificate, click Upload certificate, and then pick the token signing certificate that you received from Zenskar.\n\nClick Save.\n\nSign out of the Admin Console.\n\nTesting single sign-on\nYou've completed the single sign-on configuration. You can now check whether SSO works as intended.\n\nChoose a Zenskar user that satisfies the following criteria:\n\nThe user has an email address.\n\nThe email address corresponds to the primary email address of an existing user in your Cloud Identity or Google Workspace account.\n\nThe Cloud Identity user does not have super-admin privileges.\nUser accounts that have super-admin privileges must always sign in by using Google credentials, so they aren't suitable for testing single sign-on.\n\nOpen a new browser window and go to the Google Cloud console.\n\nOn the Google sign-in page, enter the email address of the user account, and then click Next.\n\nYou are redirected to Zenskar.\n\nEnter your Zenskar credentials, and then click Log in.\nAfter successful authentication, Zenskar redirects you back to the Google Cloud console. Because this is the first login for this user, you're asked to accept the Google terms of service and privacy policy.\n\nIf you agree to the terms, click Accept.\n\nYou are redirected to the Google Cloud console, which asks you to confirm preferences and accept the Google Cloud terms of service. If you agree to the terms, click Yes, and then click Agree and Continue.\n\nClick the avatar icon, and then click Sign out.\nYou are redirected to Zenskar, logged out, and redirected to www.google.com.\n\nIf you have trouble signing in, keep in mind that user accounts with super-admin privileges can bypass SSO, so you can still use the Admin console to verify or change settings.Updated 17 days ago Single sign-on authenticationHow to edit an invoiceTable of Contents\nObtain signing certificate from Zenskar\nConfiguring Cloud Identity or Google Workspace\nTesting single sign-on\n\n"
  },
  {
    "id": "chunk_90",
    "document": "SAP.txt",
    "chunk_index": 0,
    "content": "SAP\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceSAPSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by SAPEnterprise software to manage business operations and customer relations.Updated 17 days ago SageXero\n\n"
  },
  {
    "id": "chunk_91",
    "document": "Segments.txt",
    "chunk_index": 0,
    "content": "Segments\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceSegmentsSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by SegmentsSegments module provides a comprehensive view of different customer segments created based on various filters. Segments module allows efficient management and customization of communication strategies for different customer groups.\n⚙️ Create a segment\n\nNavigate to Communications > Segments in the left side-panel.\n\nYou will arrive at Segments page.\n\nClick on the CREATE NEW SEGMENT button.\n\nIn the Add New Segment page, add the following details:\n\nSegment name: any user-defined string that describes the segment.\nAdd filters to create a segment: major filters types available are as follows:\n\nFilterSub-filtersCustomerCustomer Name\nCustomer Email\nCustom Data\nConnector Name\\\nDefault Payment Method\nDefault Payment Method Status\nCustomer CountryInvoiceStatus\nDue date exceeded by(days)\nCreated afterPayment methodType\nStatus\nConnector\nIs defaultConnectorName\nConnectionMonitor\n\nClick on the CREATE SEGMENT button to save the segment.\n\n📚 Filters explained\nA filter is used to create a segment of customers. A filter can be as simple as shown below.\nFig. 1: Create a simple segment based on a filter of type customer.\nYou can add multiple filters of the same type, as shown below.\nFig. 2: Create a complex segment based on filters of type customer.\nYou can also combine filters of different types to create a complex segment, as shown below.\n\n⚙️ Edit a segment\n\nNavigate to Communications > Segments in the left side-panel.\nYou will arrive at Segments page.\nClick on the segment you would like to edit. Alternatively, you can use the kebab menu located at the end of the row containing the segment.\nMake the necessary edits.\nClick on the SAVE button.\n\n⚙️ Use a segment\n\nNavigate to Communications > Configurations in the left side-panel.\nYou will arrive at Configurations page.\nClick on the + ADD COMMUNICATION button.\nOn the Add New Messaging page, add the following details:\n\nCommunication name: any string that describes the message.\nSegment: click on the drop-down menu to select the segment of customers.\nEvent type: choose between email invoice and email payment reminder.\nTrigger type: choose between automatic and manual.\nAlert or communication type: choose between email alert and webhook.\n\nfor email alert, select the sender and the attachment.\n\nUpdated 13 days ago Document templatesSendersTable of Contents\n⚙️ Create a segment\n📚 Filters explained\n⚙️ Edit a segment\n⚙️ Use a segment\n\n"
  },
  {
    "id": "chunk_92",
    "document": "Senders.txt",
    "chunk_index": 0,
    "content": "Senders\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceSendersSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by SendersAdd and authenticate senders who can send emails and notifications to your customers.📖DefinitionsSender: a user authorized to send emails and notifications to your customers.\n🐕‍This guide will help you to:\n\nset up senders who are authorized to send emails and notifications to your customers\nverify your domain ownership.\n\n🚧 Critical background information\n📖 Learn about email authentication, DKIM, DNS, and more.Sending emails and notifications to your customers is a sensitive activity. Cyber adversaries can impersonate organizations and forge emails to target unsuspecting victims. Email forgery is also known as email spoofing.🤔 What is email authentication?Email authentication is a collection of techniques used to ascertain that the emails sent from a specific server are not forged. It eliminates the possibility of a malicious actor impersonating an organization to send spam or phishing emails.Zenskar takes the threat of email forgery seriously and employs DomainKeys Identified Mail (DKIM) email authentication standard to defend against email forgery. The other commonly used email authentication standards are SPF and DMARC.🤔 How does DKIM work?DKIM authentication uses public-key cryptography , also called asymmetric cryptography, to secure emails. DKIM leverages the following:\nPrivate keys: secret keys visible only to the domain owner. These keys are used by the sending email server to digitally sign an email.\nPublic keys: keys published in Domain Name System (DNS) records for the receiver. These are retrieved by the receiving email server to verify the authenticity of the email.\n📖Your private keysZenskar, on your behalf, sends emails and notifications to your customers. To make this possible, we store and handle your private keys. We employ enterprise-grade security mechanisms to secure the private keys we handle.📖Your public keysZenskar will provide you all the necessary records to be updated in your DNS. These records will make it possible for the receiving email servers to retrieve the necessary public keys for verification.The following diagram shows an easy-to-understand depiction of the DKIM mechanism:🤔 Adding DKIM records to DNSA DNS record for DKIM can be:\nCNAME:  used if the DNS record is a pointer to a key.\nTXT: used if the DNS record contains a key.\nZenskar uses Amazon SES email service. Amazon SES uses pointers to keys. Therefore, CNAME records must be added to your DNS to enable DKIM.For example, to enable DKIM for example.com domain, the following records will be required:TypeNameValueCNAME<selector 1>._domainkey.example.com<prefix 1>.dkim.amazonses.comCNAME<selector 2>._domainkey.example.com<prefix 2>.dkim.amazonses.comCNAME<selector 3>._domainkey.example.com<prefix 3>.dkim.amazonses.com🚧Caution<selector X> and <prefix X> used in the example above are placeholders. The DKIM records you download from Zenskar will have real data. Caution must be exercised while copying and pasting the data to your DNS. Any change in the data will result in verification failure and wasted time.\nAdd a new sender\n⚙️ Step 1: Add a sender\n\nNavigate to Communications > Senders and click on the + ADD NEW SENDER button.\nIn the ADD NEW SENDER page, enter the sender name and email Id.\nClick on SAVE & VERIFY SENDER button.\nAn email with a verification link will be sent to the email ID supplied.\n\nSender email verification\nThe sender will receive an email with a verification link.\n\nClicking on the link will complete the verification process.\n\n🚧Verification link expiryThe verification link in the email expires 24 hours after your verification request. If a link expires, go to  Edit Sender page and click on RESEND VERIFICATION EMAIL .\nVerifying status of a sender\n\nNavigate to Communications > Senders.\nEach sender in the sender list displayed will have one of the following tags:\n\nPENDING: if the email verification is pending.\nVERIFIED: if the email verification has been completed successfully.\n\n⚙️ Step 2: Domain ownership verification\nAfter the completion of Step 1, you will be automatically taken to the EDIT SENDER page. If you did not download the DKIM records, you may navigate to the Edit Sender page.\n\nDownload the DKIM records by clicking the DOWNLOAD DKIM RECORD button.\nAdd the DKIM records to your DNS.\n\n🚧ImportantYou must possess administrator access to your domain registrar web portal to add DKIM records to DNS. If you do not have such access, ask the web administrator of your organization to complete this action.\n\n🚧Domain ownership verification is criticalDomain ownership verification can take 24 hours or more. The verification can fail, and the process may need to be started again. This can cause significant delays.Senders can send emails even when your domain ownership has not been verified. However, it is highly likely that your emails may end up in your customer's spam folder.Therefore, it is critical to get your domain ownership verified with the slightest delay.\nThe procedure to update DKIM records in DNS will vary depending on your domain registrar:\n\nGoDaddy\n\n🚧GoDaddy quirksGoDaddy automatically appends the domain to the host value.TypeNameValueCNAME<selector 1>._domainkey.example.com<prefix 1>.dkim.amazonses.comTherefore, while adding the above record, enter only <selector 1>._domainkey in the Host field.\n\nNamecheap\nGoogle Domains\nHostgator\nHover\nSquarespace\nAWS\nCloudflare\n\nEdit sender details\nTo edit the details of an existing sender, navigate to Communications > Senders. Click on the row corresponding to the sender whose details you wish to edit.\n🚧What can be edited?Currently, only the name of the sender can be edited.Updated 13 days ago SegmentsRole-based access controlTable of Contents\n\n🚧 Critical background information\n\nAdd a new sender\n\n⚙️ Step 1: Add a sender\n⚙️ Step 2: Domain ownership verification\n\nEdit sender details\n\n"
  },
  {
    "id": "chunk_93",
    "document": "Set up Snowflake for integration with Zenskar.txt",
    "chunk_index": 0,
    "content": "Set up Snowflake for integration with Zenskar\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceSet up Snowflake for integration with ZenskarSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Set up Snowflake for integration with ZenskarPreparing Snowflake for integration.🐕‍🦺 Setup guide\nIn this guide, we will explore how to set up Snowflake for integration with Zenskar. The outcome of this guide will be a SQL script that does the following for integration with Zenskar:\n\nCreate a Snowflake role\nCreate a Snowflake user\nCreate a Snowflake warehouse\nCreate a Snowflake database\nGrant the role and user appropriate privileges and access\n\n⚙️ Define identifiers\nDefine some identifiers to refer to Snowflake objects in the SQL script.\n\nIn Snowflake SQL statements, in addition to referring to objects by name (see Identifier Requirements), you can also use a string literal, session variable, bind variable, or Snowflake Scripting variable to refer to an object. For example, you can use a session variable that is set to the name of a table in the FROM clause of a SELECT statement.\n\nTo use an object name specified in a literal or variable, use IDENTIFIER().\nSQLIDENTIFIER( { string_literal | session_variable | bind_variable | snowflake_scripting_variable } )\n<string_literal>: string identifying the name of the object:\n\nThe string must either be enclosed by single quotes ('name') or start with a dollar sign ($name).\nThe string literal can be a fully-qualified object name (e.g. 'db_name.schema_name.object_name' or $db_name.schema_name.object_name).\n\nSQLset zenskar_role = '<zenskar_role>';\nset zenskar_username = '<zenskar_user>';\nset zenskar_warehouse = '<zenskar_warehouse>';\nset zenskar_database = '<zenskar_database>';\nset zenskar_schema = '<zenskar_schema>';\nset zenskar_password = '<password>';\n📖Identifiers and placeholdersIn the above snippet, the structure of the statement is set IDENTIFIER = 'PLACEHOLDER';. For example, in the statement set zenskar_role = '<zenskar_role>';, zenskar_role is the identifier whereas <zenskar_role> is the placeholder. Replace the placeholder with appropriate values before executing the SQL script.\n⚙️ Create a role for Zenskar\nCreate a role for Zenskar in Snowflake. Only a user assigned with the securityadmin role can create a new role.\n\nSECURITYADMIN (aka Security Administrator)\nRole that can manage any object grant globally, as well as create, monitor, and manage users and roles. More specifically, this role:\n\nIs granted the MANAGE GRANTS security privilege to be able to modify any grant, including revoking it.\nInherits the privileges of the USERADMIN role via the system role hierarchy (i.e. USERADMIN role is granted to SECURITYADMIN).\n\nThe following script snippet uses the securityadmin role privileges to create a role dedicated to Zenskar (identifier($zenskar_role)). Further, the snippet grants the privileges of the sysadmin role to the newly created Zenskar role.\n\nSYSADMIN (aka System Administrator)\nRole that has privileges to create warehouses and databases (and other objects) in an account.\nIf, as recommended, you create a role hierarchy that ultimately assigns all custom roles to the SYSADMIN role, this role also has the ability to grant privileges on warehouses, databases, and other objects to other roles.\n\n use role securityadmin;\n create role if not exists identifier($zenskar_role);\n grant role identifier($zenskar_role) to role SYSADMIN;\n⚙️ Create a user for Zenskar\nCreate a user dedicated to Zenskar.\nSQL create user if not exists identifier($zenskar_username)\n password = $zenskar_password\n default_role = $zenskar_role\n default_warehouse = $zenskar_warehouse;\n\nTo facilitate querying immediately after a session is initiated, Snowflake supports specifying a default warehouse for each individual user. The default warehouse for a user is used as the warehouse for all sessions initiated by the user.\nA default warehouse can be specified when creating or modifying the user, either through the web interface or using CREATE USER/ALTER USER.\n\n⚙️ Grant Zenskar role to Zenskar user\nThe Zenskar role we configured earlier, must be assigned to the Zenskar user.\nSQLgrant role identifier($zenskar_role) to user identifier($zenskar_username);\n⚙️ Create a warehouse and a database for Zenskar\nOnly a sysadmin has privileges to create warehouses and databases:\nSQLuse role sysadmin;\n📖DefinitionA virtual warehouse is a cluster of compute resources. A warehouse is needed to execute certain types of SQL statements because it provides resources such as CPU, memory, and local storage.\nSQL create warehouse if not exists identifier($zenskar_warehouse);\n📖DefinitionAll data in Snowflake is maintained in databases. Each database consists of one or more schemas, which are logical groupings of database objects, such as tables and views. Snowflake does not place any hard limits on the number of databases, schemas (within a database), or objects (within a schema) you can create.\nSQL  create database if not exists identifier($zenskar_database);\n⚙️ Grant usage access on the warehouse to Zenskar\nThe following steps grant usage access on warehouse to the Zenskar role.\nSQLgrant USAGE  \n on warehouse identifier($zenskar_warehouse)  \n to role identifier($zenskar_role);\n⚙️ The final annotated SQL script\nThe final annotated SQL script is shown below. You can replace the placeholders with real values and execute the script in your Snowflake environment.\nSQL-- set all required identifiers\nset zenskar_role = '<zenskar_role>';\nset zenskar_username = '<zenskar_user>';\nset zenskar_warehouse = '<zenskar_warehouse>';\nset zenskar_database = '<zenskar_database>';\nset zenskar_schema = '<zenskar_schema>';\nset zenskar_password = '<password>';\n\n begin;\n\n -- create zenskar role\n use role securityadmin;\n create role if not exists identifier($zenskar_role);\n grant role identifier($zenskar_role) to role SYSADMIN;\n\n -- create zenskar user\n create user if not exists identifier($zenskar_username)\n password = $zenskar_password\n default_role = $zenskar_role\n default_warehouse = $zenskar_warehouse;\n\n grant role identifier($zenskar_role) to user identifier($zenskar_username);\n\n -- change role to sysadmin to create warehouse and database\n use role sysadmin;\n\n -- create zenskar warehouse\n create warehouse if not exists identifier($zenskar_warehouse);\n\n -- create zenskar database\n create database if not exists identifier($zenskar_database);\n\n -- grant zenskar warehouse access\n grant USAGE\n on warehouse identifier($zenskar_warehouse)\n to role identifier($zenskar_role);\n\n commit;\n\n begin;\n\n USE DATABASE identifier($zenskar_database);\n\n -- create schema for zenskar data\n -- CREATE SCHEMA IF NOT EXISTS identifier($zenskar_schema);\n\n commit;\nUpdated 17 days ago SnowflakeConfigure Zenskar's Snowflake connectorTable of Contents\n🐕‍🦺 Setup guide\n⚙️ Define identifiers\n⚙️ Create a role for Zenskar\n⚙️ Create a user for Zenskar\n⚙️ Grant Zenskar role to Zenskar user\n⚙️ Create a warehouse and a database for Zenskar\n⚙️ Grant usage access on the warehouse to Zenskar\n⚙️ The final annotated SQL script\n\n"
  },
  {
    "id": "chunk_94",
    "document": "Shopify.txt",
    "chunk_index": 0,
    "content": "Shopify\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceShopifySearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Shopify\n🚧Prerequisites\n\nAn active Shopify store.\n\nIf you are syncing data from a store that you do not own, you will need to request access to your client's store (not required for account owners).\n\nA custom Shopify application with read_ scopes enabled.\n\n🐕‍🦺 Setup guide\nThis connector supports OAuth2.0 and API Password (for private applications) authentication methods.\n⚙️ Step 1: create a custom application in Shopify\nA custom application is required to access Shopify APIs. The following instructions help you create a custom app and an Admin API Access Token.\n\nLog in to your Shopify partner dashboard.\nIn the dashboard, navigate to Settings > App and sales channels > Develop apps > Create an app.\nSelect a name for your new app.\nSelect Configure Admin API scopes.\nGrant access to the following list of scopes. Only select scopes prefixed with read_, not write_ (for example,  read_locations,read_price_rules, etc.).\nClick Install app to give this app access to your data.\n\nRetrieve the API Password\nOnce the app is installed, go to the API Credentials tab to copy the Admin API Access Token.\nRetrieve client credentials\nYou can manually retrieve your app's client credentials in the Partner Dashboard.\n\nLog in to your Shopify partner dashboard.\nClick Apps.\nClick the name of the app you want to retrieve client credentials for.\nClick Client credentials.\nView or copy your client ID and client secret.\n\n⚙️ Step 2: set up data source and type\n\nLog into your Zenskar account.\nIn the left navigation bar, click Metering > Data Sources.\nIn the top-right corner, click + ADD DATA SOURCE.\nIn the Set Up Source section of the Add New Data Source page, enter a name for the Shopify data source connection.\nSelect Shopify from the Source Type drop-down menu.\n\n⚙️ Step 3: configure data source\nIn the Source Config section of the Add New Data Source page, fill in the following details:\n\nShopify Store : Enter your Shopify Store name.\n\nShopify Authorization Method:\n\nTo authorize API requests via OAuth 2.0, retrieve your Client ID, Client Secret, and Access Token.\n\nTo authorize API requests via API Password, retrieve your password.\n\nReplication Start Date (defaults to 01 January, 2020): set a starting point for data replication. Any data created before this date will not be synced.\n\nAdduser_id to Transactions (slower): define which API type (REST/BULK) to use to fetch Transactions data. If you are a Shopify Plus user, leave the default value to speed up the fetch.\n\n📚 Custom app scopes\nAdd the following scopes to your custom app to allow Zenskar can sync all available data. For more information on access scopes, see the Shopify docs.\n\nread_analytics\nread_assigned_fulfillment_orders\nread_content\nread_customers\nread_discounts\nread_draft_orders\nread_fulfillments\nread_gdpr_data_request\nread_gift_cards\nread_inventory\nread_legal_policies\nread_locations\nread_locales\nread_marketing_events\nread_merchant_managed_fulfillment_orders\nread_online_store_pages\nread_order_edits\nread_orders\nread_price_rules\nread_product_listings\nread_products\nread_publications\nread_reports\nread_resource_feedbacks\nread_script_tags\nread_shipping\nread_shopify_payments_accounts\nread_shopify_payments_bank_accounts\nread_shopify_payments_disputes\nread_shopify_payments_payouts\nread_themes\nread_third_party_fulfillment_orders\nread_translations\n\n📚 Supported sync modes\nThe Shopify source supports both Full Refresh and Incremental syncs. You can choose if this connector will copy only the new or updated data, or all rows in the tables and columns you set up for replication, every time a sync is run.\nThis source can sync data for the Shopify REST API and the Shopify GraphQL API and the Shopify GraphQL BULK API\n📚 Supported streams\n\nAbandoned Checkouts\nArticles\nBalance Transactions\nBlogs\nCollects\nCollections (GraphQL)\nCountries\nCustom Collections\nCustomers\nCustomer Journey Summary (GraphQL)\nCustomer Address (GraphQL)\nCustomer Saved Search\nDraft Orders\nDiscount Codes (GraphQL)\nDisputes\nFulfillments\nFulfillment Orders (GraphQL)\nInventory Items (GraphQL)\nInventory Levels (GraphQL)\nLocations\nMetafields (GraphQL)\nOrder Agreements (GraphQL)\nOrders\nOrder Refunds\nOrder Risks (GraphQL)\nPages\nPrice Rules\nProducts (GraphQL)\nProduct Images (GraphQL)\nProduct Variants (GraphQL)\nShop\nSmart Collections\nTransactions\nTransactions (GraphQL)\nTender Transactions\n\n📚 Capturing deleted records\nThe connector captures deletions for records in the Articles, Blogs, CustomCollections, Orders, Pages, PriceRules and Products streams.\nWhen a record is deleted, the connector outputs a record with the ID of that record and the deleted_at, deleted_message, and deleted_description fields filled out. No other fields are filled out for the deleted records.\nCheck the following Shopify documentation for more information about retrieving deleted records.\n📚 Data-type mapping\nShopify typeZenskar typestringstringnumbernumberarrayarrayobjectobjectbooleanboolean\n📚 Features\nFeatureSupported?Full Refresh SyncYesIncremental - Append SyncYesNamespacesNo\n🚧 Limitations & Troubleshooting\nExpand to see details about Shopify connector limitations and troubleshootingConnector limitationsRate limitingShopify has some rate limit restrictions. Typically, there should not be issues with throttling or exceeding the rate limits but, in some edge cases, you may encounter the following warning message:\"Caught retryable error '<some_error> or null' after <some_number> tries.\nWaiting <some_number> seconds then retrying...\"This is expected when the connector hits a 429 - Rate Limit Exceeded HTTP error. The sync operation will continue successfully after a short backoff period.These limitations are applied to all Shopify GraphQL bulk API requests.TroubleshootingIf you encounter access errors while using OAuth2.0 authentication, please make sure you've followed this Shopify Article to request the access to the client's store first. Once the access is granted, you should be able to proceed with OAuth2.0 authentication.Updated 13 days ago RedshiftSnowflakeTable of Contents\n\n🐕‍🦺 Setup guide\n\n⚙️ Step 1: create a custom application in Shopify\n⚙️ Step 2: set up data source and type\n⚙️ Step 3: configure data source\n📚 Custom app scopes\n\n📚 Supported sync modes\n\n📚 Supported streams\n\n📚 Capturing deleted records\n\n📚 Data-type mapping\n\n📚 Features\n\n🚧 Limitations & Troubleshooting\n\n"
  },
  {
    "id": "chunk_95",
    "document": "Single sign-on authentication.txt",
    "chunk_index": 0,
    "content": "Single sign-on authentication\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceSingle sign-on authenticationSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Single sign-on authenticationZenskar supports single sign-on via the Sign in with Google button.\n\nSign in with Google helps you easily and securely sign in to Zenskar with your Google account. If you are already logged in to your Google account, you don't have to enter a username and password when you use use Sign in with Google button.\n🚧NoteTo use Sign in with Google, you need a Google account. You can use your private (gmail.com) Google Account or Google Workspace (custom domain) account.\n 🤔 What happens when you use Sign in with Google? Sign in with Google uses a securely transmitted code that's based on your Google Account. It allows Zenskar to authenticate you and create an account based on the information it shares from your Google Account, like name, email, and profile picture.🚧NoteSign in with Google never shares your account password with Zenskar.\n 🤔 What happens if I already have an account on Zenskar and try to use Sign in with Google button? \nIf you have an account with Zenskar that you created using Sign up with Google, you can log in.\n\nIf you have a Zenskar account that you created using custom email, a new account will be created for you.\n\n 🤔 What happens if I delete my Zenskar account? Your Zenskar account and Google account are independent of each other. Deleting your Zenskar account has no effect on your Google account.\n 🤔 How does Sign in with Google work if I have more than one Google Account? If you have more than one Google Account, Sign in with Google prompts you to choose which account you want to use.If the Google Account you want to use isn’t one of the choices, select Add another account.\n 🤔 What happens if I delete my Google Account? If you delete your Google Account, you will delete your sign-in credentials for Zenskar. You can login to Zenskar using a previous username and password if you had an account with Zenskar before you used Sign in with Google. Else, you may create a new account.\n 🤔 How do I stop using Sign in with Google? If you no longer want to use your Google Account to sign in to Zenskar, you can remove this connection.\nSign in into your Google Account.\nView the apps and services that use Sign in with Google.\nSelect Zenskar.\nSelect See details > Stop using Sign in with Google > Confirm.\nUpdated 17 days ago Two-factor authenticationSAML authentication\n\n"
  },
  {
    "id": "chunk_96",
    "document": "Snowflake.txt",
    "chunk_index": 0,
    "content": "Snowflake\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceSnowflakeSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by SnowflakeData platform as a self-managed service.Integrating your Snowflake data source with Zenskar is a two-step process:\n\n⚙️ Set up Snowflake for integration with Zenskar.\n⚙️ Configure Zenskar to connect with Snowflake.\nUpdated 17 days ago ShopifySet up Snowflake for integration with Zenskar\n\n"
  },
  {
    "id": "chunk_97",
    "document": "SQL-query templates.txt",
    "chunk_index": 0,
    "content": "SQL-query templates\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceSQL-query templatesSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by SQL-query templates🚧PrerequisitesYou must understand how Zenskar handles metering before proceeding with this guide.\nWhat is a template engine?\n📖DefinitionsTemplate is a mold or pattern.Template engine is a software that generates dynamic content by replacing placeholders or variables in a template with contextual data.\nA generic example\nTo understand templates and template engine, let us explore an example. A marketing team can create an email template, as shown below:\nHello {{customer_name}},\n\n{{product_name}} is the best way to {{feature_set}}. We are currently offerring a discount of {{discount}}%.\n  \n Hurry! This offer is only valid till {{discount_end_date}}.\nHere {{customer_name}}, {{product_name}}, {{feature_set}}, {{discount}}, and {{discount_end_date}}are placeholders.\nA properly configured template engine can replace placeholders with data derived from a given context. Let us now set some context: a customer, John Doe, had shown some interest in Awesome Software, which is now available at a discount of 20% till 23 August 2023.\nPlaceholderContext{{customer_name}}John Doe{{product_name}}Awesome Software{{feature_set}}file your taxes and attain nirvana{{discount}}20{{discount_end_date}}23 August 2023\nThe template engine can merge the template and the context to generate the following email:\nHello John Doe,\n\nAwesome Software is the best way to file your taxes and attain nirvana. We are currently offerring a discount of 20%.\n  \nHurry! This offer is only valid till 23 August 2023.\nLet us now set another context: a customer, Jane Doe, was interested in Yet Another Awesome Software, which is now available at a discount of 30% till 23 August 2023.\nPlaceholderContext{{customer_name}}Jane Doe{{product_name}}Yet Another Awesome Software{{feature_set}}order food online and attain nirvana{{discount}}30{{discount_end_date}}23 August 2023\nThe template engine can merge the template and the context to generate the following email:\nHello Jane Doe,\n\nYet Another Awesome Software is the best way to order food online and attain nirvana. We are currently offerring a discount of 30%.\n  \nHurry! This offer is only valid till 23 August 2023.\nUnderstanding SQL-query templates in Zenskar\nThe aim of the example presented in the above section is to help you understand the basic concepts related to templating. This section will help you understand how Zenskar leverages templates to provide you with potentially unlimited flexibility.\n📖DefinitionSQL template engine generates SQL queries by replacing placeholders or variables in an SQL query template with contextual data.\nZenskar wants you to have total control over how you query various data sources to extract meaningful and actionable data. One tool we employ to achieve this flexibility is a SQL template engine.\nFig. 1: SQL template engine generates valid SQL queries using templates and dynamic runtime data.\nThere are two types of queries you can write:\n\nAggregate query: SQL query to create a intermediate aggregate table, aggregates, to hold billable aggregates for all customers in a given billing period.\n\n📖Aggregate query is optionalIf your source data already contains aggregates (not raw metrics), this SQL query is not needed.\nFig. 2: Aggregate query is optional if data source already contains aggregates.\n\nCustomer-specific query: SQL query to fetch customer-specific billable aggregates from the aggregates table.\n\n📖Output of the customer-specific queryThe intermediate table aggregates contains aggregate data of all customers in a given billing period. The customer-specific query extracts customer-specific billable aggregate value (a single row) from the aggregates table.\nExample 1: Deriving aggregates from raw metrics\nStep 1: Define schema and send data to Zenskar\nLet us assume that you have submitted the following schema to Zenskar by navigating to Metering > Raw Metrics > + ADD RAW METRICS:\nJSON{\n    \"data\": {\n        \"loan_id\": \"int\",\n        \"loan_status\": \"string\",\n        \"amount_financed\": \"float\"\n    },\n    \"timestamp\": \"timestamp\",\n    \"customer_id\": \"string\"\n}\nLet us also assume that you are using the following HTTP POST API to send raw metrics to Zenskar:\nShellcurl --location --request POST 'https://api.zenskar.com/usage/loan_demo' \\\n-H 'organisation: 888ae523-8878-4ed7-85cc-6c0a54320568' \\\n-H 'authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSlI6ImFjY291bnQiLCJzdW\n-H 'Content-Type: application/json' \\\n--data-raw '{\"data\":{\"loan_id\":114,\"loan_status\":\"sample_data_1\",\"amount_financed\":47.08293585087888},\"timestamp\":\"2023-09-18 10:10:41\",\"customer_id\":\"sample_data_1\"}'\n  \nThe above steps can be visualized using the following diagram:\nFig. 3: From defining data schema to invoice.\nStep 2: Create aggregate query\n\nNavigate to Metering > Usage Aggregates and click on the + ADD NEW AGGREGATE button.\nInput a name for the aggregate.\nCopy the name of the raw metrics table (eg., raw_metric_loan) from which you would like to derive aggregate.\nActivate the SQL Aggregator tab.\nSelect Raw events.\nCreate an aggregate query to retrieve the desired aggregate from the raw_metric_loan table.\n\nStructure of the raw metrics table, raw_metric_loan, in Zenskar:\ndata.loan_iddata.loan_statusdata.amount_financedtimestampcustomer_id977active5002023-07-11 21:51:13.0001001943active6002023-07-07 00:27:20.0001002889active21002023-08-05 12:33:07.0001001117active3002023-07-15 16:35:21.0001001444active10002023-08-27 06:00:20.0001002432active3502023-08-20 21:53:46.0001002212active35002023-07-20 05:21:12.0001002\nAn example aggregate query:\nSQLselect \"customer_id\",count(*) as quantity\t\nfrom raw_metric_loan\nwhere \"data.loan_status\" = 'active' \n  and \"data.amount_financed\" >=500 and \"data.amount_financed\" <= 2000\n  and Date(\"timestamp\") >= Date({{start_date}}) and Date(\"timestamp\") <= Date({{end_date}})\ngroup by \"customer_id\"\nThe above query will get the total number of loans where:\n\nthe amount_financed is between 500-2000 USD,\nthe loan_status is active, and\nthe sanctioning date was between a specified start date (Date(\"timestamp\") >= Date({{start_date}})) and end date (Date(\"timestamp\") <= Date({{end_date}}) grouped by customer_id.\n\n📖Special variables {{start_date}} and {{end_date}}The {{start_date}} and {{end_date}} are determined by the SQL template engine at the time of contract execution. Usually, {{start_date}} will be correspond automatically to the start date of the billing cycle whereas {{end_date}} will correspond to the end date of the billing cycle.You must not manipulate these variables.\nThe output of the aggregate query will be stored in an intermediate table called aggregates. Assuming that the {{start_date}} is set to 2023-07-01 and {{end_date}} is set to 2023-08-31, the result will look like the below table:\ncustomer_idquantity1001110022\nStep 3: Create customer-specific query\nIn Step 2, you derived the desired aggregates. However, the aggregates you derived were for all customers. Now, you must retrieve the customer-specific value for billing:\nSQLselect cast(quantity as decimal) as quantity\nfrom aggregates\nwhere \"customer_id\" = {{customer.external_id}}\nThe result of the customer-specific query for customer_id set to 1001 will be:\nquantity1\n📖SQL template engine's customer objectThe SQL template engine has a context object called customer with all the properties that define a customer in Zenskar. Therefore, the SQL variable customer_id can be set to {{customer.email}} if you would like to treat email as key or it can be set to {{customer.external_id}} if you would like to use Zenskar's Customer Id field as key.\nStep 4: Finish\nClick on the CREATE AGGREGATE button.\nYou can preview the output of the queries on the Usage Aggregate page by clicking on Preview.Updated 17 days ago Billable metricsContractsTable of Contents\nWhat is a template engine?\n\nA generic example\n\nUnderstanding SQL-query templates in Zenskar\n\nExample 1: Deriving aggregates from raw metrics\n\n"
  },
  {
    "id": "chunk_98",
    "document": "Step pricing.txt",
    "chunk_index": 0,
    "content": "Step pricing\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceStep pricingSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Step pricingA tiered pricing strategy that defines a flat-fee for each tier or step.In Zenskar, step pricing strategy has the concept of steps which is equivalent to tiers in the volume and tiered pricing strategies. In volume and tiered pricing strategies, each tier has a per-unit price associated with it. However, unlike volume and tiered pricing strategies, each step has a flat fee associated with it.\nHow to add a product based on step pricing in Zenskar\n🔖ImportantRefer the products documentation to learn more about the concept of products in Zenskar.\nStep 1: Create a product based on step pricing\n\nNavigate to Contracts > Products, and click on the ADD PRODUCT button.\nSelect the Step Pricing from the drop-down.\nSelect or deselect Metered:\n\nIf the service or product is metered, select the appropriate usage aggregate from the drop-down.\nIf the service or product is not metered, enter the quantity.\n\nFill in all other details, and select all the desired features.\nSave the product.\n\nExample: non-metered purchase\nLet us assume that:\n\nyou sell cloud storage space for three months as a one-time purchase\nafter three months, the customer is moved to the free tier\neconomies of scale allow you to provide the following steps:\n\nStorage step (GB)Flat fee (USD)1-10015101-1000301000-∞60\n\nExample: metered purchase\nLet us assume that:\n\nyou sell cloud storage space as a monthly subscription\nif the subscription is not renewed, the customer is moved to the free tier\neconomies of scale allow you to provide the following steps:\n\nStorage step (GB)Flat fee (USD)1-1005101-1000101000-∞20\n\nStep 2\nAdd product to new contract\n\nNavigate to Contracts > Contracts, and click on the + ADD NEW CONTRACT button.\nClick on the + ADD NEW PRODUCT button.\nSelect the product(s) based on package pricing for the contract.\n\nAdd product to new template\n\nNavigate to Contracts > Templates, and click on the + ADD NEW TEMPLATE button.\nClick on the + ADD NEW PRODUCT button.\nSelect the product(s) based on package pricing for the template.\n\nHow is step pricing strategy different from volume and tiered pricing strategies\nStep pricing strategy is based on a flat fee defined for each step. However, the volume and tiered pricing strategies are based on per-unit pricing for each tier. Therefore, in step pricing strategy, if a step is defined as 1-100 units of a service or product, the flat fee defined for the step will be applicable irrespective of whether the customer purchases 1 or 100 units of the service or product.\n📖Tiered versus volume vs step pricingLet us assume:\nyou are in the business of selling software licenses\nyou are selling 250 licenses to a particular customer\nyou have defined tiers as shown below:\nNumber of licensesPrice per unit in USD1-100100101-20090201-∞80In stark contrast, steps in step pricing strategy are defined based on flat-fee as shown below:Number of licensesFlat fee in USD1-10010000101-20018000201-∞20000Comparing the total cost of 250 licenses in tiered, volume and step pricing strategies:Number of licensesTiered pricingVolume pricingStep pricing1-100100 * 100101-200100 * 90201-25050 * 80250 * 8020000Total230002000020000Updated 13 days ago Percent pricingTiered pricingTable of Contents\n\nHow to add a product based on step pricing in Zenskar\n\nStep 1: Create a product based on step pricing\nStep 2\n\nHow is step pricing strategy different from volume and tiered pricing strategies\n\n"
  },
  {
    "id": "chunk_99",
    "document": "Stripe Tax.txt",
    "chunk_index": 0,
    "content": "Stripe Tax\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceStripe TaxSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Stripe TaxAutomate sales tax, VAT, and GST compliance on all your transactions—low or no code integrations available.Updated 17 days ago Avalara AvaTaxAuth0\n\n"
  },
  {
    "id": "chunk_100",
    "document": "Stripe.txt",
    "chunk_index": 0,
    "content": "Stripe\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceStripeSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Stripe🐕‍🦺 Setup guide\nThis guide will help you connect your Stripe account with your Zenskar account.\n🚧PrerequisitesYou must have a working Stripe account before you proceed with this guide.\nIntegrate Stripe with Zenskar\n\nLogin to your Zenskar account.\nGo to Settings > Connectors > Payment Gateways > Stripe.\nClick the Connect button on the Stripe connector card.\n\nYou will be redirected to Stripe Connect Onboarding flow.\nLogin to your Stripe account from the Stripe Connect Onboarding page:\n\nComplete the on-boarding process, and you will be redirected to the dashboard. A Connected badge on the Stripe connector card indicates a successful connection.\n\nConfigure the Stripe connector\n\nTo configure the Stripe connector, you can click on the Manage on the Stripe\nconnector card:\n\nEnable the Customers module to sync customer information updates between Stripe and Zenskar. The following sync types are available:\n\nImport only: any customer information update on Stripe will be synced with Zenskar.\nExport only: any customer information update on Zenskar will be synced with Stripe.\nImport and Export: any customer information update to a selected field on one platform will\nbe synced with the other platform.\n\nIf the sync type selected is Import and Export, a desired customer information field can be selected for two-way sync on the next page of connector configuration:\n\nFeatures of the Stripe connector\nZenskar initiated payments\n\nPayment links with different payment methods:\nWhen a customer clicks on the PAY ONLINE button on an invoice, a Stripe Checkout session is created for the customer to complete the payment.\nAuto-charge a customer:\nZenskar initiates a payment intent capture on the customer’s default payment method when:\n\nyou click on Charge Customer button on an invoice or\nyou charge the invoice(s) from the Invoices page by clicking on the CHARGE button.\n\nCustomer initiated payments\nACH Credit Transfer:\nWhen a customer sends money via ACH Credit Transfer, Zenskar can automatically check if the customer has pending invoices, charge the ACH source on Stripe and reconcile the payment against the pending invoices (earliest due first).\nPayment Method sync\nAny changes to a customer’s payment methods (eg., changing the default payment method) will reflect on Zenskar.\nCustomer sync\nDescribed in the Configure the Stripe connector section.\n📖SyncIn this guide, sync refers to the syncing of updates only. Thus, sync works for customers in Zenskar who also exist in Stripe. If you would like to import customers from Stripe to Zenskar, please contact [email protected].Updated 17 days ago RazorpayAnrokTable of Contents\n\n🐕‍🦺 Setup guide\n\nIntegrate Stripe with Zenskar\nConfigure the Stripe connector\nFeatures of the Stripe connector\n\n"
  },
  {
    "id": "chunk_101",
    "document": "Tiered pricing with flat fee.txt",
    "chunk_index": 0,
    "content": "Tiered pricing with flat fee\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceTiered pricing with flat feeSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Tiered pricing with flat feeOverview\nTiered pricing with flat fee is a pricing strategy where customers are charged a flat fee, and additional usage is billed based on the specific tier they fall into. Unlike volume-based pricing, which applies the same unit price once a certain threshold is reached, tiered pricing assigns distinct costs to each tier based on usage levels.\nThis approach is commonly employed in SaaS, cloud services, and subscription-based platforms, where pricing is structured in tiers to incentivize higher usage while ensuring a fair and scalable cost distribution across customers.\n\nExample: Cloud storage\nA cloud storage provider charges customers for storage based on usage tiers, with a different flat fee applied at each tier.\nStorage tiers (GB)Flat fee (USD per month)Price per request (USD)1–100500.01101–5001000.08501–10002500.061000+5000.04\nIf a customer stores 750 GB data in a month, the total bill they have to pay is USD 448:\nStorage tiers (GB)Flat fee (USD)Usage fee (USD)Flat fee + Usage fee (USD)1–10050100 × 0.0151101–500100400 × 0.08132501–750250250 × 0.06265Total448\n\nCreate a product based on volume pricing with flat fee\nStep 1\n\nNavigate to Contracts > Products  in the left side panel.\n\nClick + CREATE NEW drop-down menu at the top right of the Products page,.\n\nSelect the Product menu option.\n\nFill the relevant details on the Create Product form, and click on the SAVE & PROCEED button.\nOn the Edit Product page, click on the + ADD PRICE button.\nOn the Add Price Details form, click on the Pricing Models drop-down menu, and select Tiered With Flat Fee option.\n\nCreate tiers by specifying the flat fee and the usage fee for each tier, as shown below.\n\nFill in all the other product details and click on the CONFIRM button.\n\nStep 2: Assign the product to a contract or plan\n\nAdd the product to a contract.\nAdd the product to a plan.\n\nVolume pricing with flat fee versus tiered pricing with flat fee\nModelHow It WorksExampleVolume Pricing with Flat FeeA single flat fee is applied based on the highest usage tier, and all units are billed at that tier’s per-unit rate.If 750 GB is stored, only the 501-1000 GB tier’s pricing applies ($100 + $0.01 per GB).Tiered Pricing with Flat FeeEach tier has its own flat fee, and pricing is calculated separately for usage within each tier.If 750 GB is stored, fees are charged at all three tiers separately, leading to a total of $170.Updated 5 days ago Tiered pricingTwo-dimensional tiered pricingTable of Contents\n\nOverview\n\nExample: Cloud storage\n\nCreate a product based on volume pricing with flat fee\n\nStep 1\nStep 2: Assign the product to a contract or plan\n\nVolume pricing with flat fee versus tiered pricing with flat fee\n\n"
  },
  {
    "id": "chunk_102",
    "document": "Tiered pricing.txt",
    "chunk_index": 0,
    "content": "Tiered pricing\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceTiered pricingSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Tiered pricingA pricing strategy where the cost of a service or product is set at different levels, or tiers, based on a single factor, such as quantity, quality, features, or customer segments.Tiered pricing is a pricing strategy where the cost of a service or product is set at different levels, or tiers, based on a single factor such as quantity, quality, features, or customer segments.\nHow to add a product based on tiered pricing in Zenskar\n🔖ImportantRefer the products documentation to learn more about the concept of products in Zenskar.\nStep 1: Create a product based on tiered pricing\n\nNavigate to Contracts > Products, and click on the ADD PRODUCT button.\nSelect the Tiered Pricing from the drop-down.\nSelect or deselect Metered:\n\nIf the service or product is metered, select the appropriate usage aggregate from the drop-down.\nIf the service or product is not metered, enter the quantity.\n\nFill in all other details, and select all the desired features.\nSave the product.\n\nExample: metered product\nDetails:\n\nComputing resources are being sold at:\n\nNumber of unitsPrice (USD per hour)1-990.01100-2000.005201-∞0.002\n\nOwing to the nature of consumption, this is a metered product.\nThe usage aggregate named Compute is being used to fetch consumption details for a given billing period.\n\nExample: non-metered product\nDetails:\n\nCereals are being sold at:\n\nNumber of unitsPrice (USD per pound)1-1001.5101-2001.3201-∞1.25\n\n500 units are being sold.\nThis is a non-metered product.\n\nDifference between volume and tiered pricing\n📖Volume versus tiered pricingLet us assume:\nyou are in the business of selling software licenses\nyou are selling 250 licenses to a particular customer\nNumber of licensesPrice per unit in USD1-100100101-20090201-∞80Comparing the total cost of 250 licenses in both the models:Number of licensesTiered pricingVolume pricing1-100100 * 100101-200100 * 90201-25050 * 80250 * 80Total2300020000Updated 13 days ago Step pricingTiered pricing with flat feeTable of Contents\nHow to add a product based on tiered pricing in Zenskar\n\nStep 1: Create a product based on tiered pricing\n\nDifference between volume and tiered pricing\n\n"
  },
  {
    "id": "chunk_103",
    "document": "Two-dimensional tiered pricing.txt",
    "chunk_index": 0,
    "content": "Two-dimensional tiered pricing\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceTwo-dimensional tiered pricingSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Two-dimensional tiered pricingTwo-dimensional or 2D tiered pricing is a pricing strategy where the cost of a service or product is set at different tiers, or levels, based on two dimensions, or factors.\nDifference between 2D tiered pricing model and tiered pricing model\n2D tiered pricing model is similar to tiered pricing model. The most important difference being that the tiered pricing model has tiers based on one factor whereas the 2D tiered pricing model has tiers based on two factors.\nIn the following example for the tiered pricing model, commission tiers are defined for the service or product based on a single factor: quantity.\nNumber of units of the service or productCommission charged per unit (USD)1-990.01100-2000.005201-∞0.002\nIn the following example for the 2D tiered pricing model, commission tiers have been defined for the service or product based on two factors:\n\nquantity\nper-unit price range\n\nNumber of units of the service or productCommission (USD per unit) when per unit costs $0–100Commission (USD per unit) when per unit costs more than $1000–500000.010.0250000–1000000.0050.01100000–1500000.0020.005150000-∞0.0010.002\nFig.1: In this product based on the 2D-tiered pricing model, the y-axis can be thought of as representing the quantity, whereas the x-axis can be thought of as representing the per-unit price range. The commission rate is fixed based on values of both the x-axis and the y-axis.\nHow to add a product based on 2D tiered pricing in Zenskar\n🔖ImportantRefer the products documentation to learn more about the concept of products in Zenskar.\nStep 1: Create a product based on 2D tiered pricing\n\nNavigate to Contracts > Products, and click on the ADD PRODUCT button.\nSelect the 2D Tiered Pricing from the drop-down.\nSelect or deselect Metered:\n\nIf the service or product is metered, select the appropriate usage aggregate from the drop-down. The usage aggregates for 2D tiered pricing model must be created in the SQL query builder. Visual query builder  cannot be used.\nIf the service or product is not metered, enter the quantity.\n\nFill in all other details, and select all the desired features.\nSave the product.\n\nExample: metered product\n🔖NoteThis pricing model is available only for metered products.\n\nLet us assume that you sell provide a platform for sellers, and you charge commission on sales made by the sellers.\nCommission tiers have been defined based on two factors:\n\nquantity\nper-unit price range\n\nNumber of units of the service or productCommission (USD per unit) when per unit costs $0–100Commission (USD per unit) when per unit costs more than $1000–500000.010.0250000–1000000.0050.01100000–1500000.0020.005150000-∞0.0010.002\n\nOwing to the nature of consumption, this is a metered product.\nThe usage aggregate named demoAggregate is being used to fetch usage details for a given billing period.\n\nFig. 1: A metered product based on 2D tiered pricing model.\nCreating usage aggregates for 2D tiered pricing model\nThe usage aggregates for 2D tiered pricing model must be created in the SQL query builder due to the complexity of the pricing model. Visual query builder  cannot be used.\n👷Engineering effort requiredCreating raw SQL queries for complex scenarios is the job of an engineer proficient in SQL.Updated 17 days ago Tiered pricing with flat feeVolume pricingTable of Contents\n\nDifference between 2D tiered pricing model and tiered pricing model\n\nHow to add a product based on 2D tiered pricing in Zenskar\n\nStep 1: Create a product based on 2D tiered pricing\nExample: metered product\n\nCreating usage aggregates for 2D tiered pricing model\n\n"
  },
  {
    "id": "chunk_104",
    "document": "Two-factor authentication.txt",
    "chunk_index": 0,
    "content": "Two-factor authentication\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceTwo-factor authenticationSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Two-factor authenticationStrengthening authentication.Authentication is the process of determining whether someone or something is, in fact, who or what it is declared to be. Typically, password-based authentication is used for authentication.However, password-based authentication is weak and can easily be circumvented, for example, by launching a man-in-the-middle or brute-force attacks. To strengthen the authentication protocol, multi-factor authentication (MFA) is used.\n📚Authentication versus authorizationAuthentication is the process of determining you are who you claim to be. Authorization is the process of determining what level of access you have to various resources once you have been successfully authenticated.\nTwo-factor authentication\nTwo-factor authentication (2FA) is a specific type of MFA that strengthens access security by requiring two authentication factors to verify your identity. The three most common authentication factors are:\n\nSomething you know; a password, or a memorized PIN.\nSomething you have: a smartphone, or a secure USB key.\nSomething you are: a fingerprint, or facial recognition.\n\n2FA protects against phishing, social engineering and password brute-force attacks and secures your logins from attackers exploiting weak or stolen credentials.\nEnabling 2FA\n\nClick on the drop-up menu at the bottom left with your name.\nClick on Users option in the drop-up menu.\nFind the user for whom you wish to enable 2FA.\nClick on the kebab-menu as shown in the image below:\n\nClick on the Enable Two Factor Authentication option.\nThe following message is displayed:\n\nClick OK.\n\nThe 2FA is enabled. The next time the user logs in, all necessary 2FA configuration can be performed by following the instructions provided on the login screen.\nConfigure 2FA\nMobile authentication using QR code\n\nYou can use FreeOTP or Google Authenticator.\nFreeOTP\n\nGoogle Authenticator\n\nSteps to configure 2FA\n\nOpen the application and scan the barcode.\nEnter the one-time code provided by the application.\nClick Submit to finish the setup.\n\nYou can optionally provide a device name to manage your OTP devices.\nMobile authentication using time-based one-time password\n\nTime-based one-time password (TOTP) is a common form of two-factor authentication (2FA). Unique numeric passwords are generated with a standardized algorithm that uses the current time as an input.\nUse the following configuration values if the application allows setting them:\n\nType: Time-based\nAlgorithm: SHA1\nDigits: 6\nInterval: 30\n\nSteps to configure 2FA\n\nOpen the application and scan the barcode.\nEnter the one-time code provided by the application.\nClick Submit to finish the setup.\n\nYou can optionally provide a device name to manage your OTP devices.Updated 17 days ago Zenskar IPsSingle sign-on authenticationTable of Contents\n\nTwo-factor authentication\n\nEnabling 2FA\n\nConfigure 2FA\n\nMobile authentication using QR code\nMobile authentication using time-based one-time password\n\n"
  },
  {
    "id": "chunk_105",
    "document": "Understanding Zenskar.txt",
    "chunk_index": 0,
    "content": "Understanding Zenskar\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceUnderstanding ZenskarSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Understanding ZenskarZenskar is an end-to-end billing and revenue recognition system for subscription- and usage-based business models.\nZenskar modules\nThe following Zenskar modules help you manage your billing and revenue recognition needs.\nModulesDescription😎 CustomersManage your customers.🤝 ContractsManage contracts you signed with your customers.⏲ MeteringMeasure customer activity or consumption of resources to collect the metrics needed to generate an invoice.🧾 InvoicesManage invoices.💳 PaymentsCollect payments using Zenskar's integrations with payment gateways like Stripe.⚖️ Revenue recognitionBe ASC 606- and IFRS 15-compliant.\n🦮 Getting started guides\n🧾 Generating an invoice: from start to finish\nStepActionStep 1Add a customerStep 2Add and configure a data source\nOR\nAdd and configure raw metricsStep 3Create a contractStep 4Generate an invoice\n⚙️ How-to guides\n👤 Manage users🛡️ Manage role-based access control for users\n✉️ Manage sendersUsers in your organization who are authorized to send emails and notifications to your customers.✉️ Create email templatesUpdated 14 days ago Introduction to ZenskarWhat does Zenskar pilot program entail?Table of Contents\nZenskar modules\n🦮 Getting started guides\n\n🧾 Generating an invoice: from start to finish\n\n⚙️ How-to guides\n\n"
  },
  {
    "id": "chunk_106",
    "document": "Usage alerts.txt",
    "chunk_index": 0,
    "content": "Usage alerts\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceUsage alertsSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Usage alertsEntitlement-usage alerts.Zenskar supports entitlement-usage alerts. Work is in progress to support other types of alerts, such as aggregate alerts.\n⚙️ Configure an entitlement-usage alert\n\nNavigate to Communications > Usage Alerts in the left side-panel.\nYou will arrive at Home/Communications/Usage Alerts page.\nOn the Usage Alerts page, click on the + ADD USAGE ALERT button to land on the Home/Communications/Usage Alerts/Create New Usage Alert page.\nAdd the following details:\n\nAlert name: any user-defined string that describes the alert.\nSelect Entitlement: click the drop-down menu to select the entitlement on which you would like to configure the alert.\nConsumption and value type: these work in conjunction to define at what point an alert must be triggered.\nWebhook alert: click the drop-down menu to select the webhook you would like to trigger. Read the webhook documentation to understand how to create a webhook.\n\nClick on the SAVE USAGE ALERT button to save the alert.\n\n⚙️ View entitlement-usage alerts\n\nNavigate to Communications > Usage Alerts in the left side-panel.\nYou will arrive at Home/Communications/Usage Alerts page.\nOn the Usage Alerts page, you can view all the alerts.\n\n⚙️ Edit an entitlement-usage alert\n\nNavigate to Communications > Usage Alerts in the left side-panel.\nYou will arrive at Home/Communications/Usage Alerts page.\nOn the Usage Alerts page, click on the alert that you wish to edit.\nMake the necessary edits and click on the SAVE USAGE ALERT button\n\n⚙️ Pause or delete an entitlement-usage alert\n\nNavigate to Communications > Usage Alerts in the left side-panel.\nYou will arrive at Home/Communications/Usage Alerts page.\nOn the Usage Alerts page, click on the kebab menu as shown below.\n\nIf an alert is paused, the status of the alert is changed from active to paused, as shown below.\nUpdated 17 days ago Email alertsDocument templatesTable of Contents\n⚙️ Configure an entitlement-usage alert\n⚙️ View entitlement-usage alerts\n⚙️ Edit an entitlement-usage alert\n⚙️ Pause or delete an entitlement-usage alert\n\n"
  },
  {
    "id": "chunk_107",
    "document": "Usage events_ data-ingestion APIs.txt",
    "chunk_index": 0,
    "content": "Usage events: data-ingestion APIs\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceUsage events: data-ingestion APIsSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Usage events: data-ingestion APIsOverview\nRaw metrics or aggregates ingested via Zenskar API\nYou can integrate Zenskar in your application workflow by configuring a data-ingestion API. You can call this API like any other REST API and help Zenskar ingest your raw metrics or aggregates. Zenskar expects the input data in JavaScript Object Notation (JSON) format: a universal data-interchange format like XML.\n\nSet up a data-ingestion API in Zenskar\n\nTo set up a data-ingestion API, navigate to Metering > Usage Events page.\nClick on the + ADD USAGE EVENT button.\nOn the Add Usage Event page, fill in the following details.\n\nFieldDescriptionUsage event nameA descriptive name.API slug endpointThe slug of the endpoint URL which is automatically derived from the raw metric name. However, you can override the auto-generated name. The slug must contain alphanumeric characters, underscores, and dashes only. For example, if the raw metric name is a raw metric, the slug generated will be a_raw_metric.Root fieldscustomer_id and timestamp are read-only root fields mandatory for Zenskar.Your data schemaDefine the schema of the JSON data you wish to send to Zenskar. Zenskar will use this schema to create tables.Order byZenskar orders the data by timestamp.\n\nClick on the ADD USAGE EVENT button to save the API.\n\nSome examples are shown below:\n\nIf you are providing a compute resource (for example, CPU time) for rent, a raw metric schema in JSON form may look like the following:\n\nJSON{\n    \"data\": {\n        \"cpu_usage_hours_per_day\": \"5\"\n    },\n    \"timestamp\": \"2023-05-21 09:30:38.731\",\n    \"customer_id\": \"[email protected]\"\n}\n\nIf you are providing a compute resource (for example, CPU time) for rent, a JSON aggregate data may look like the following:\n\nJSON{\n    \"data\": {\n        \"cpu_usage_hours_per_month\": \"300\"\n    },\n    \"timestamp\": \"2023-05-21 09:30:38.731\",\n    \"customer_id\": \"[email protected]\"\n}\nThe customer_id and timestamp are mandatory fields. A combination of these mandatory fields provides Zenskar the capability to uniquely identify a raw metric or an aggregate.\nSample API calls to send raw metrics or aggregate data to Zenskar would look like the following. The examples below use curl utility which can act as a REST client. However, the same can be done from any REST client:\nJSONJSONcurl --location --request POST 'https://api.zenskar.com/usage/test_1' \\\n-H 'organisation: 23507783-d5b4-4854-b012-2bf4ea922205' \\\n-H 'authorization: Bearer b3VyY2VfYWNjZXNzIjp7OiIwOTkxNTEyYy0wMzI3LTQzMzEtYjQ1NS1jNzgxZjg2YWRjNzMiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6Ik1vaGFuIFNyZWVrYW50IiwicHJlZmVycmVkX3VzZXJuYW1lIjoibW9oYW5AemVuc2thci5jb20iLCJnaXZlbl9uYW1lIjoiTW9oYW4iLCJmYW1pbHlfbmFtZSI6IlNyZWVrYW50IiwiZW1haWwiOiJtb2hhbkB6ZW5za2FyLmNvbSJ9.K5fuK2fBlzJjQQ06Etu_H3syFjT3Q7ZtZzQqFi51YDkdJCDc-_l9JQakXWRIyeXiAM4XmbnuOorUUItNYopwfD033kQL5aI6vPnDR5DoRRkelwTam7bn94Ce83IgXbzzi0rLBzhC47lMStj-CLnNY2qdEAFRyrL8eWDsjE_8IXUB-LYb1V9I3dMOpgme77zLKySo3dHYQkBC-rZc9sNTdnaLdZy7nLrJ2-uoDvPvtOq6JLeR5ozf3bn5XEBhaHRzY23VMAgOX64-Ow_CAeVng0xIEq5P2CgqFDuNFdT3gfB8-qjKlPHdC_ndAAGGcyxbcCwrhKMgwsP6q2ZvaFDwYA' \\\n-H 'Content-Type: application/json' \\\n--data-raw '{\"data\":{\"cpu_usage_hours_per_day\":5},\"timestamp\":\"2023-05-21 09:30:38.731\",\"customer_id\":\"[email protected]\"}'curl --location --request POST 'https://api.zenskar.com/usage/test_1' \\\n-H 'organisation: 23507783-d5b4-4854-b012-2bf4ea922205' \\\n-H 'authorization: Bearer b3VyY2VfYWNjZXNzIjp7OiIwOTkxNTEyYy0wMzI3LTQzMzEtYjQ1NS1jNzgxZjg2YWRjNzMiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6Ik1vaGFuIFNyZWVrYW50IiwicHJlZmVycmVkX3VzZXJuYW1lIjoibW9oYW5AemVuc2thci5jb20iLCJnaXZlbl9uYW1lIjoiTW9oYW4iLCJmYW1pbHlfbmFtZSI6IlNyZWVrYW50IiwiZW1haWwiOiJtb2hhbkB6ZW5za2FyLmNvbSJ9.K5fuK2fBlzJjQQ06Etu_H3syFjT3Q7ZtZzQqFi51YDkdJCDc-_l9JQakXWRIyeXiAM4XmbnuOorUUItNYopwfD033kQL5aI6vPnDR5DoRRkelwTam7bn94Ce83IgXbzzi0rLBzhC47lMStj-CLnNY2qdEAFRyrL8eWDsjE_8IXUB-LYb1V9I3dMOpgme77zLKySo3dHYQkBC-rZc9sNTdnaLdZy7nLrJ2-uoDvPvtOq6JLeR5ozf3bn5XEBhaHRzY23VMAgOX64-Ow_CAeVng0xIEq5P2CgqFDuNFdT3gfB8-qjKlPHdC_ndAAGGcyxbcCwrhKMgwsP6q2ZvaFDwYA' \\\n-H 'Content-Type: application/json' \\\n--data-raw '{\"data\":{\"cpu_usage_hours_per_month\":300},\"timestamp\":\"2023-05-21 09:30:38.731\",\"customer_id\":\"[email protected]\"}'\nThe JSON data you send us is securely stored in our database as a table after the requisite transformations are applied.\n📚NoteIrrespective of the data source type, Zenskar stores all ingested data in the form of RDBMS tables.Tables are database objects that contain all the data in a database. In tables, data is logically organized in a row-and-column format similar to a spreadsheet.\nPush data to Zenskar\nIntegrate the data-ingestion APIs in your application workflow\n👷Engineering effort requiredIntegrating Zenskar data-ingestion REST API in your application workflow will require engineering effort. However, to test all you need is a REST client. Prominent examples of REST clients are Postman (feature-rich) and Thunder Client (lightweight).\n👍 Pros and 👎 cons\n👍 Pros👎 ConsYour data model and Zenskar are decoupled: you can change your database schema without worrying about affecting your integration with Zenskar.Using data-ingestion APIs requires engineering effort. The integration time depends on the number of usage metrics that need to be integrated and the available engineering bandwidth.Real-time data transmission from your system to Zenskar ensures that the usage data is always up-to-date.Real-time data transmission from your system to Zenskar ensures quick invoice generation.Real-time usage-based entitlement tracking, monitoring, and alerts are possible.Zenskar allows you to edit usage data that has been synced.\n🔖NoteIf data ingestion via Zenskar's APIs does not suit your needs, you may look at the following options:\nData ingestion via data-source connectors\nData ingestion via Zenskar-compatible CSV file\nData ingestion via Zenskar's web form\nUpdated 14 days ago Data sources: query remote data sourcesManual: upload Zenskar-compatible CSV fileTable of Contents\nOverview\nSet up a data-ingestion API in Zenskar\nPush data to Zenskar\n\nIntegrate the data-ingestion APIs in your application workflow\n\n👍 Pros and 👎 cons\n\n"
  },
  {
    "id": "chunk_108",
    "document": "Use default Flow.txt",
    "chunk_index": 0,
    "content": "Use default Flow\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceUse default FlowSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Use default FlowOverview\nThis section explains how to create a contract on Zenskar using the Reference ID linked to your Salesforce pricing.\nCreate Pricing on Zenskar\n\nAdd a Reference ID:\n\nWhen creating pricing in Zenskar, include a Reference ID of your choice for easier pricing identification later.\n\nSave Pricing:\n\nOnce your pricing is saved, proceed to Salesforce.\n\nCreate a Price Book in Salesforce\n\nCreate a Price Book:\n\nBefore creating a product, you need to create a Price Book.\nTypes available:\n\nStandard Price Book: The default price book.\nCustom Price Book: Create as needed.\n\nCreate a Custom Price Book:\n\nSearch for Price Books:\n\nCreate a new Price Book named Zenskar Pricings.\n\nSet it to Active.\n\nThis custom price book allows you to store and manage your products efficiently.\n\nCreate a Product\n\nProduct Creation:\n\nNavigate to the Product page on Salesforce.\n\nCreate a Product and set it to Active.\n\nAssign Product to Price Book:\n\nOpen the newly created product and go to the Related section.\n\nAdd the product to the Standard Price Book using Add Standard Price.\n\nUse placeholder details as needed.\n\nAdd to Price Book:\n\nSearch for Zenskar Pricings in the Price Book field.\nEnter a placeholder list price and set the status to Active.\nAdd the Reference ID from Zenskar to the LinkID (Zenskar) field.\nSave changes.\n\nOnce all products and PriceBookEntries are set up, you can create Accounts and Opportunities in Salesforce.\n\nCreate an Account\nBefore creating an Opportunity, you need to create an Account.\n\nCreate an Opportunity\n\nNavigate to the Account where you want to create an Opportunity.\n\nClick Add Opportunity to create one.\n\n🚧NoteThe Contract Start Date is required.\nSelect Price Book\n\nAfter creating the Opportunity, select Choose Price Book.\n\nPick Zenskar Pricings to access the added products.\n\nClick Add Products.\n\nEnter necessary placeholder details. Once added, the Products will be listed on the right side.\n\nThe Opportunity is now ready to sync with Zenskar. Once marked as Close Won, Zenskar’s Flow will automatically create a Customer and Contract in Zenskar.\n\nUpdate Contract or Customer from Salesforce\nTo update a Customer or Contract:\n\nChange the Opportunity’s Stage from Closed to any other stage.\nUpdate the details.\nSet the Opportunity’s stage back to Close Won to trigger a sync with Zenskar.\n\nThis completes the setup for integrating Zenskar with Salesforce.Updated 17 days ago Installation and setup of Zenskar’s package for SalesforceCreate your own FlowTable of Contents\n\nOverview\nCreate Pricing on Zenskar\nCreate a Price Book in Salesforce\nCreate a Product\n\nCreate an Account\n\nCreate an Opportunity\n\nSelect Price Book\n\nUpdate Contract or Customer from Salesforce\n\n"
  },
  {
    "id": "chunk_109",
    "document": "Users.txt",
    "chunk_index": 0,
    "content": "Users\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceUsersSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by UsersIn Zenskar, a user is someone who can access the web application by authenticating their credentials. Roles must be assigned to a user. Roles grant users permissions to perform tasks. A role is a collection of permissions.\nAn existing user can be granted the following permissions related to user management:\n\nCan Read User:  grants an existing user the permission to view the other users in their organization.\nCan Write User: grants an existing user the permission to create users in their organization.\nCan Delete User: grants an existing user the permission to delete users in their organization.\n\nAdding a new user\n🚧Do you have the permission?Only a user with Can Write User permission can add a new user.\n\nClick on the named drop-up menu displayed on the bottom of the side panel.\nClick on the Users menu item.\n\nClick the + ADD NEW USER button\n\nAdd the new user's details in the modal dialog, and click the SAVE USER button:\n\nThe newly added user will be displayed on the page:\n\nAssigning role and permissions to a user\nA user can be assigned only one role. However, a user can be granted more permissions than those associated with the role assigned to them.\n\nEditing a user\n\nOn the Users page, click on the user you wish to edit.\nUpdate the details and click on SAVE USER.\n\nHow to delete a user?\n🚧Do you have the permission?Only a user with Can Delete User permission can delete a user.\nEach row on the Users page has a kebab menu. Clicking on the kebab menu will display the option to delete a user.\nUpdated 13 days ago Role-based access controlRolesTable of Contents\nAdding a new user\nAssigning role and permissions to a user\nEditing a user\nHow to delete a user?\n\n"
  },
  {
    "id": "chunk_110",
    "document": "Volume pricing with flat fee.txt",
    "chunk_index": 0,
    "content": "Volume pricing with flat fee\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceVolume pricing with flat feeSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Volume pricing with flat feeOverview\nVolume pricing with flat fee is a pricing strategy where a flat fee is charged, and additional usage is billed based on predefined volume tiers. Unlike standard volume pricing, where only the per-unit price decreases, this model introduces different flat fees at each volume level to account for increased operational or service costs.\nThis model is commonly used in SaaS, cloud services, and subscription-based platforms where customers pay a base fee and receive a certain volume of usage, with additional pricing based on their total consumption.\n\nExample: API request\nA cloud service provider charges customers for API requests based on usage tiers, with a different flat fee applied at each tier.\nNumber of API requestsFlat fee (USD per month)Price per request (USD)1 - 10,000500.0110,001 - 50,0001000.0850,001 - 100,0002500.06100,001+5000.04\nIf a customer makes 75,000 API requests in a month:\n\nThey fall into the 50,001 - 100,000 tier.\n\nThe flat fee for this tier is $250.\n\nAPI request pricing is $0.06 per request.\n\nFlat fee (USD per month)Usage fee (USD)Total (USD)25075000 × 0.06700\n\nUse a product based on volume pricing with flat fee\nStep 1: create a product\n\nNavigate to Contracts > Products  in the left side panel.\n\nClick + CREATE NEW drop-down menu at the top right of the Products page,.\n\nSelect the Product menu option.\n\nFill the relevant details on the Create Product form, and click on the SAVE & PROCEED button.\nOn the Edit Product page, click on the + ADD PRICE button.\nOn the Add Price Details form, click on the Pricing Models drop-down menu, and select Volume With Flat Fee option.\n\nCreate volume tiers by specifying the flat fee and the usage fee for each tier, as shown below.\n\nFill in all the other product details and click on the CONFIRM button.\n\nStep 2: Use the product\n\nAdd the product to a contract.\nAdd the product to a plan.\n\nVolume pricing versus volume pricing with flat fee\nModelHow it worksExampleStandard Volume PricingThe per-unit price decreases as volume increases, but no fixed fee is applied per tier.Paying $0.01 per API request for 1-10K requests, then $0.008 for 10K+ requests.Volume Pricing with Flat FeeA different flat fee applies at each tier, and per-unit pricing also varies based on usage.Paying a $250 flat fee for 50K-100K requests, plus $0.006 per request.\nUpdated 4 days ago Volume pricingPrepaid commitment with postpaid overagesTable of Contents\n\nOverview\n\nExample: API request\n\nUse a product based on volume pricing with flat fee\n\nStep 1: create a product\nStep 2: Use the product\n\nVolume pricing versus volume pricing with flat fee\n\n"
  },
  {
    "id": "chunk_111",
    "document": "Volume pricing.txt",
    "chunk_index": 0,
    "content": "Volume pricing\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceVolume pricingSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Volume pricingA pricing strategy in which the price of a service or product is adjusted based on the quantity purchased.Volume pricing is a pricing strategy in which the price of a service or product is adjusted based on the quantity purchased. Typically, as the quantity purchased increases, the price per unit decreases. This strategy is often employed by businesses to provide customers an incentive to buy more of a particular service or product to drive up sales volume.\nHow to add a product based on volume pricing in Zenskar\n🔖ImportantRefer the products documentation to learn more about the concept of products in Zenskar.\nStep 1: Create a product based on volume pricing\n\nNavigate to Contracts > Products, and click on the ADD PRODUCT button.\nSelect the Volume Pricing from the drop-down.\nSelect or deselect Metered:\n\nIf the service or product is metered, select the appropriate usage aggregate from the drop-down.\nIf the service or product is not metered, enter the quantity.\n\nFill in all other details, and select all the desired features.\nSave the product.\n\nExample: metered purchase\nDetails:\n\nComputing resources are being sold at:\n\nNumber of unitsPrice (USD per hour)1-990.01100-2000.005201-∞0.002\n\nOwing to the nature of consumption, this is a metered product.\nThe usage aggregate named Compute is being used to fetch consumption details for a given billing period.\n\nExample: non-metered purchase\nDetails:\n\nCereals are being sold at:\n\nNumber of unitsPrice (USD per pound)1-1001.5101-2001.3201-∞1.25\n\n500 units are being sold.\nThis is a non-metered product.\n\nStep 2\nAdd product to new contract\n\nNavigate to Contracts > Contracts, and click on the + ADD NEW CONTRACT button.\nClick on the + ADD NEW PRODUCT button.\nSelect the product(s) based on volume pricing for the contract.\n\nAdd product to new template\n\nNavigate to Contracts > Templates, and click on the + ADD NEW TEMPLATE button.\nClick on the + ADD NEW PRODUCT button.\nSelect the product(s) based on volume pricing for the template.\n\nDifference between tiered and volume pricing\n📖Tiered versus volume pricingLet us assume:\nyou are in the business of selling software licenses\nyou are selling 250 licenses to a particular customer\nNumber of licensesPrice per unit in USD1-100100101-20090201-∞80Comparing the total cost of 250 licenses in both the models:Number of licensesTiered pricingVolume pricing1-100100 × 100101-200100 × 90201-25050 × 80250 × 80Total2300020000Updated 5 days ago Two-dimensional tiered pricingVolume pricing with flat feeTable of Contents\n\nHow to add a product based on volume pricing in Zenskar\n\nStep 1: Create a product based on volume pricing\nStep 2\n\nDifference between tiered and volume pricing\n\n"
  },
  {
    "id": "chunk_112",
    "document": "Webhook alerts.txt",
    "chunk_index": 0,
    "content": "Webhook alerts\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceWebhook alertsSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Webhook alertsA webhook is an HTTP-based callback function that allows lightweight, event-driven communication between two application programming interfaces (APIs).What is a webhook?\nA webhook is an HTTP-based callback function that allows lightweight, event-driven communication between two application programming interfaces (APIs). Events, such as adding a new customer, deleting a customer, and usage limit exceeded are raised on a source system, and destination systems hooked or subscribed to the events receive a payload of data. In our case, Zenskar is the source system that will send payload of data to all destination systems hooked or subscribed to events.\nThree primary components are required for webhooks to function:\n\nEndpoint URL: the destination endpoint where the payload will be transmitted from Zenskar via a POST HTTP method.\nSubscribed events: the events that the destination system is hooked on to.\nSecret key: to ensure that your system only processes webhook payloads delivered by Zenskar, and to ensure that the delivery was not tampered with, you should validate the webhook signature before processing the payload further.\n\n🚧Securing the secret keyYou must store your secret key in a secure location that only your system can access. You must never hardcode a key into an application or store a key in any source code repository.\nCreating a webhook\n\nClick on the drop-up menu at the bottom left with your name.\nClick on the Webhook Alerts tab on the Settings page.\nClick on the + ADD WEBHOOK ALERT button on the Webhook Alerts page.\n\nFill in the details on the following page:\n\nDetails:\n\nWebhook name: input any desired name for the webhook\nAdd description (optional): add a description\nEndpoint URL: the address URL of the destination system where Zenskar will send event data using POST HTTP method.\nSecret key: enter a random string of text with high entropy. This secret key will be hashed using the SHA256 algorithm and added to the payload.\nEnable webhook alerts (selected by default): enables a webhook. If deselected, the webhook will be disabled.\n\nTypes of webhooks\nTypes of webhookEventsCustomerCustomer created\nCustomer updated\nEditing a webhook\n\nClick on the drop-up menu at the bottom left with your name.\nClick on the Webhook Alerts tab on the Settings page.\n\nClick on the kebab menu at the end of the row containing the webhook you wish to edit, and proceed as shown below:\n\nMake the necessary edits.\nClick on the UPDATE button to persist the changes.\n\nDeleting a webhook\n\nClick on the drop-up menu at the bottom left with your name.\nClick on the Webhook Alerts tab on the Settings page.\nClick on the kebab menu at the end of the row containing the webhook you wish to delete, and proceed as shown below:\n\nView webhook activity\n\nClick on the drop-up menu at the bottom left with your name.\nClick on the Webhook Alerts tab on the Settings page.\nClick on the row containing the webhook whose details you wish to view.\n\nThe Alerts History panel\nYou can view the history of the webhook alert in the Alerts History panel. In the case of the above figure, the webhook was triggered five times.\nEvent Information panel\nThe event payload (JSON format) can be viewed in the Event Information panel:\nJSON{\n  \"event_info\": {\n    \"id\": \"2446f64c-d3e8-4ce9-8d65-753690571134\",\n    \"email\": \"[email protected]\",\n    \"address\": {\n      \"city\": null,\n      \"line1\": \"Global Academy for Learning, 40 Pattanagere Main Road\",\n      \"line2\": null,\n      \"line3\": null,\n      \"state\": null,\n      \"country\": \"India\",\n      \"zipCode\": null\n    },\n    \"tax_info\": [],\n    \"created_at\": \"2024-02-29 05:18:23.104360\",\n    \"deleted_at\": null,\n    \"updated_at\": null,\n    \"custom_data\": {},\n    \"external_id\": \"cust_4178904715915710_5te_random\",\n    \"organisation\": \"888ae523-8878-4ed7-85cc-6c0a54320568\",\n    \"phone_number\": \"+91 9999999999\",\n    \"customer_name\": \"Shreyansh\",\n    \"ship_to_address\": {\n      \"city\": null,\n      \"line1\": \"Global Academy for Learning, 40 Pattanagere Main Road\",\n      \"line2\": null,\n      \"line3\": null,\n      \"state\": null,\n      \"country\": \"India\",\n      \"zipCode\": null\n    },\n    \"auto_charge_enabled\": true,\n    \"communications_enabled\": true\n  },\n  \"event_triggered\": \"customer.updated\"\n}\nTriggered Webhook Details panel\nThis panel shows the following details:\n\nWebhook Id: the Zenskar-enerated UUID of the webhook.\nStatus: Succeeded or Failed as status.\n\n🚧The status shown in Zenskar is determined by the response received from the endpoint URL shared by you. If the response code is 200, the status is Succeeded, else it is considered Failed. You must configure your system to return a 200 as response code to Zenskar when a payload from Zenskar is successfully delivered.\nValidating webhook deliveries\nZenskar will use the secret key to generate a hash signature. This hash signature will be included in the 'X-Signature' header of each payload.\nWhen validating webhook payloads, several important considerations should be noted:\n\nZenskar employs an HMAC hex digest for computing the hash.\nThe hash signature always starts with 'sha256='.\nThe hash signature is generated using the secret token and the contents of the payload.\n\nYou can use your programming language of choice to implement HMAC verification in your code. For example, you can define the following verify_signature function and call it when you receive a webhook payload:\nPythonimport hashlib\nimport hmac\ndef verify_signature(payload_body, secret_token, signature_header):\n    \"\"\"Verify that the payload was sent from GitHub by validating SHA256.\n\n    Raise and return 403 if not authorized.\n\n    Args:\n        payload_body: original request body to verify (request.body())\n        secret_token: GitHub app webhook token (WEBHOOK_SECRET)\n        signature_header: header received from GitHub (x-hub-signature-256)\n    \"\"\"\n    if not signature_header:\n        raise HTTPException(status_code=403, detail=\"x-hub-signature-256 header is missing!\")\n    hash_object = hmac.new(secret_token.encode('utf-8'), msg=payload_body, digestmod=hashlib.sha256)\n    expected_signature = \"sha256=\" + hash_object.hexdigest()\n    if not hmac.compare_digest(expected_signature, signature_header):\n        raise HTTPException(status_code=403, detail=\"Request signatures didn't match!\")Updated 17 days ago RolesCustomer-facing portalTable of Contents\n\nWhat is a webhook?\nCreating a webhook\nTypes of webhooks\nEditing a webhook\nDeleting a webhook\nView webhook activity\n\nValidating webhook deliveries\n\n"
  },
  {
    "id": "chunk_113",
    "document": "What does Zenskar implementation entail_.txt",
    "chunk_index": 0,
    "content": "What does Zenskar implementation entail?\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceWhat does Zenskar implementation entail?SearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by What does Zenskar implementation entail?🔖ImportantIntegrating Zenskar with your system takes only 3-6 weeks, depending on the complexity of your requirements.\nThe optional pilot program\nThe primary objective of the pilot program is to showcase the capabilities of Zenskar: a modern, flexible, no-code billing infrastructure for your business. However, the pilot program is optional if you have already chosen Zenskar as the billing infrastructure for your business.\nImplementation roadmap\nObjectivesTime frameZenskar's responsibilitiesYour responsibilities (Zenskar will be your guide)\n\n🤝 Align on the requirements, and get 🆗 approvals from all relevant stakeholders.\n\n😊 Fulfill custom feature requests, if any.\n\nWeeks 1-2\n\nAlign with you on the requirements for going live, such as:\n• contracts,\n• invoice formats,\n• usage data structure,\n• revenue recognition/AR  nuances.\n\nBuild and ship custom feature requests, if any.\n\nGet stakeholders' approvals on the requirements for going live, such as:\n• contracts,\n• invoice formats,\n• usage data structure,\n• revenue recognition/AR  nuances.\n\nGet approvals on custom feature requests.\n\n⚙️ Configure your Zenskar sandbox account with contracts, customers, usage data/aggregates, and journal entries.Weeks 1-2Configure your sandbox based on mutually agreed-upon requirements for contracts, customers, usage data/aggregates and journal entries.\n\nShare contracts and customers data.\n\nUsage data:\n• Let Zenskar pull usage data from your data sources, such as data warehouse and spreadsheets. 🚧 Note: you do not need to allocate engineering bandwidth.\n• Alternatively, push usage data using Zenskar's data-ingestion API. 🚧 Note: you must allocate engineering bandwidth.\n\nℹ️ Optional:\nConnect test/production accounts of your CRM/ERP/Tax/Payment software with Zenskar’s sandbox account.Week 3Assist you in connecting test/production accounts of your CRM/ERP/Tax/Payment tools with Zenskar’s sandbox account.Connect test/production accounts of your CRM/ERP/Tax/Payment software with Zenskar’s sandbox account.🧪 Testing:\nCompare Zenskar with the existing process for a sample set of contracts, invoices and journal entries for the last billing cycle in the sandbox account.Week 4Assist you in comparing the invoices and journals generated by Zenskar with the invoices and journal entries in your existing setup.Generate invoices and journal entries on Zenskar and compare them with the invoices and journal entries generated by your existing setup.⚙️ Configure your Zenskar production account for automation.Week 5Assist you in configuring live contracts, customer details, and setting up ongoing usage data, and aggregates in your Zenskar production account.Configure live contracts, customer details, and set up ongoing usage data and aggregates in your Zenskar production account.ℹ️ Optional (if you want to migrate historical data into Zenskar):\nImport historical contracts, customer details,invoices, and journal entries into your Zenskar production account.Week 6Assist you in importing and configuring historical contracts, customer details, invoices and journal entries into your Zenskar production account.Import/configure historical contracts, customer details, invoices and journal entries into your Zenskar production account.🚀 Sign-off and go live.Week 6Ensure everything is ready to go live.Go live on your Zenskar production account.\nData migration and integration options\nThe documentation on data migration and integration options describes various options for migrating historical data and for integrating contemporary data for both sales-led and product-led motions.Updated 17 days ago What does Zenskar pilot program entail?Data migration and integration optionsTable of Contents\nThe optional pilot program\nImplementation roadmap\nData migration and integration options\n\n"
  },
  {
    "id": "chunk_114",
    "document": "What does Zenskar pilot program entail_.txt",
    "chunk_index": 0,
    "content": "What does Zenskar pilot program entail?\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceWhat does Zenskar pilot program entail?SearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by What does Zenskar pilot program entail?The Zenskar free pilot program is where the rubber meets the road. Billing tools promise the world but end up falling short on expectations when you actually use them. Our pilot program is designed to give you a risk-free environment to experience the power of our platform firsthand.\nYou can choose the specific use cases you want to test. We help configure your own sample contracts (pricing agreements), usage data flows (if applicable), and corresponding invoices, with the option to redact sensitive information, to see the platform live in action.\nThere is no obligation to buy until you're confident Zenskar is the perfect fit for your business needs. If you've already chosen Zenskar, you can skip the pilot and get started right away.\nObjectivesTime frameZenskar's responsibilitiesYour responsibilities (Zenskar will be your guide)🤝 Agree on the objectives and success criteria for the pilot.Day 1Document and share the objectives and success criteria of the pilot based on your inputs.Share and approve the objectives and success criteria of the pilot.⚖️ Determine and finalize data flows for customers, contracts (pricing agreements), and usage data for billing and downstream workflows related to collections and  revenue recognition.Week 1Configure data flows:\n• let Zenskar pull data from your data sources.\n• push data to Zenskar using Zenskar's data-ingestion APIs.\n• use Zenskar connectors to connect Zenskar with your CRM/ERP/CPQ/Tax software.Review the data flows proposed by Zenskar.• ⚙️ Configuring sample contracts (pricing agreements) and usage data.\n• 🧪 Test corresponding invoices generated,  usage reports, and accounting entries.Week 2–3• Configure sample contracts (pricing plans) and usage data as received from client.\n• Test corresponding invoices generated, usage reports, and accounting entries.• Share required sample documents - contracts (pricing plans), usage data, corresponding invoices,etc\n• Test and confirm if everything is functioning as expected\n\nScope of the pilot program\nModuleScopeCustomersImport customer data using any of the following options:\n• Manually\n• Upload CSV\n• Zenskar APIs\n• IntegrationsExport customers using any of the following options:\n• CSV\n• Integrations\n• Zenskar APIsContracts (i.e. Pricing Agreements)Create and configure contracts of any complexity using the following components:\n• Product, sub-product, add-on, and product catalog\n• Plans (reusable contract patterns)\n• Pricing modelsUsage meteringIngest usage-data using any of the following options:\n• Push data to Zenskar using Zenksar's data-ingestion APIs.\n• Let Zenskar pull data from your data sources using the Zenskar data-source connectors.\n• Upload a Zenskar-compatible CSV.Create usage aggregates:\n• Derive billing determinants by creating usage aggregates.InvoicesGenerate, approve and reconcile invoices.Revenue recognition• Manage your accounting sub-ledgers for all billing related accounts, such as revenue (broken down by product and customer), accounts receivables (broken down by customer), credit balances, unearned revenue, etc.\n• Revenue recognition: flexible accounting rule engine that can be customised to your specific revenue recognition needs.Receivables• Communicate with your customers using email and document templates\n• Create segments of customers based on country, invoice due date or any other custom criteria\n• Automate Dunning processEntitlementsAdd and monitor services or products that a customer is entitled to.MonitoringMonitor data related to your customer's usage.Analytics• Monitor analytics regarding invoices and outstanding amounts.\n• Calculate revenue at company-level or at per-customer level.\n• Receive usage reports.IntegrationsTest important third-party software integrations:\n• CRM/CPQ: HubSpot, Salesforce\n• ERP: NetSuite, QuickBooks, Xero, Zoho Books\n• Payment gateway: Stripe\n• Sales tax: Avalara AvaTaxExport journal entries to your ERP:\n• Use Zenskar's accounting system to generate double-entry journal entries\n• Use ERP's accounting systemWebhook alertsSet up and configure webhook alerts.Customer-facing billing portalProvide your customers complete information about their accounts.\n🚧NOTEThe pilot program will involve end-to-end testing of a couple of different types of contracts to get a sense of how well Zenskar interacts with your internal systems.Updated 17 days ago Understanding ZenskarWhat does Zenskar implementation entail?Table of Contents\nScope of the pilot program\n\n"
  },
  {
    "id": "chunk_115",
    "document": "Xero.txt",
    "chunk_index": 0,
    "content": "Xero\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceXeroSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by XeroAccounting software for everyday business.Connect to Xero\n\nClick on the drop-up menu at the bottom of the left sidebar.\nClick on the Settings option on the drop-up menu.\nOn the Settings page, move to the Connectors tab.\nClick on ERP filter to access the Xero connector. Alternatively, you may use the search box to search for Xero.\nClick on the Connect button on the Xero card, and login to Xero, as shown in Fig. 1:\n\nFig. 1: Connect Zenskar to your Xero account.\n\nOnce the login is completed, you must allow Zenskar access to your Xero account, as shown below.\n\nFig. 2: Allow Zenskar access to your Xero account.\n\nOnce you allow Zenskar access to your Xero account, you will be redirected to the following page.\n\nAccount Mapping\nThe account mapping will be as shown in Fig. 2:\nFig. 2: Zenskar and Xero mapping\nEach Zenskar account must be mapped with an account on Xero, as shown in Fig. 3. The dropdown shows all the non-system accounts present on Xero i.e., accounts for which journal entry creation is possible. You can select an appropriate account:\nFig. 3: Zenskar and Xero mapping\nIf you find that the accounts listed are inappropriate, you can create a new account by checking the Create Account checkbox beside the dropdown. An account creation window shall appear, as shown in Fig.4:\nFig. 4: New Xero account creation window\n\nEnter a name in the Name field.\nSelect an account type in the Account Type dropdown. The dropdown contains all account types supported by Xero.\nClick on ADD. You have successfully configured Xero.\n\nHow Zenskar journal entries look on Xero\nXero does not allow you to create entries with line amount equal to zero. Therefore, entries created with line amount zero such as Free units are not synced with Xero.\nThe actual Accounts Receivable and other system accounts cannot be used to create Journals. This is a known limitation of Xero. Therefore, you should map the Zenskar Accounts Receivable with something similar in Xero. For example, you can use the Create Account checkbox to create a new account with similar name in Xero.\nExample 1: When credits are issued to a Customer\n\nSystem account names for these entries are:\n\nCustomer Wallet: 4a003f19-ae13-4fe2-b7bb-98666a8abcd\nExpenses: Sales Returns and Allowances: 4a003f19-ae13-4fe2-b7bb-98666a8abcd\n\nExample 2: When an invoice is approved\n\nSystem account names for these entries are:\n\nRevenue: Storage - Volume Pricing: 4d24700c-29de-4351-aa5a-965e3334abcd\nRevenue: SQS - Per Unit Pricing: 4d24700c-29de-4351-aa5a-965e3334abcd\nAssets: Accounts Receivable: 4d24700c-29de-4351-aa5a-965e3334abcd\n\nExample 3: When a payment is made\n\nSystem account names for these entries were:\nAssets: Cash: 4d24700c-29de-4351-aa5a-965e3334abcd\nAssets: Accounts Receivable: 4d24700c-29de-4351-aa5a-965e3334abcd\nUsually the last element in the system account name is customer Id. Therefore it is ignored. All the accounts visible in the entries are created according to the mapping. The customer visible in the description is also created on Xero if it is not already present.Updated 17 days ago SAPZoho BooksTable of Contents\n\nConnect to Xero\n\nAccount Mapping\n\nHow Zenskar journal entries look on Xero\n\nExample 1: When credits are issued to a Customer\nExample 2: When an invoice is approved\nExample 3: When a payment is made\n\n"
  },
  {
    "id": "chunk_116",
    "document": "Zenskar IPs.txt",
    "chunk_index": 0,
    "content": "Zenskar IPs\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceZenskar IPsSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Zenskar IPsYou must allow inbound traffic from the following Zenskar IP addresses:\n\n184.73.234.173\nUpdated 17 days ago CoinAPITwo-factor authentication\n\n"
  },
  {
    "id": "chunk_117",
    "document": "Zoho Books.txt",
    "chunk_index": 0,
    "content": "Zoho Books\n\nJump to ContentDocumentationDocumentationAPI ReferenceDocumentationDocumentationMoon (Dark Mode)Sun (Light Mode)DocumentationAPI ReferenceZoho BooksSearchAllPagesStart typing to search…IntroductionIntroduction to ZenskarUnderstanding Zenskarintegration and migration guidesWhat does Zenskar pilot program entail?What does Zenskar implementation entail?Data migration and integration optionsIntegrating your ERP software with ZenskarPRODUCT GUIDESConsolidating invoicesZenskar ModulesAnalyticsCustomersMeteringData ingestionData sources: sync data to ZenskarData sources: query remote data sourcesUsage events: data-ingestion APIsManual: upload Zenskar-compatible CSV fileManual: use Zenskar's web form to upload dataBillable metricsSQL-query templatesContractsProduct, sub-product, add-on, and product catalogFree unitsCreditsDiscountAvaTaxPayment termsMinimum commitmentCustom currencyPlansContract renewalInvoicesLife cycle of an invoiceGenerate invoicesCredit notesPaymentsPayment MethodsDefault Payment MethodPayment GatewaysAccountingHierarchy of default accountsCreditsRevenue recognitionRevenue distribution and redistribution methodsPerformance obligation policiesReceivablesMonitoringEntitlementsCommunicationsEmail templatesEmail alertsUsage alertsDocument templatesSegmentsSendersRole-based access controlUsersRolesWebhook alertsCustomer-facing portalBusiness entitiesPRICING MODELSFlat-fee pricingMatrix pricingPackage pricingPer-unit pricingPercent pricingStep pricingTiered pricingTiered pricing with flat feeTwo-dimensional tiered pricingVolume pricingVolume pricing with flat feeBUSINESS MODELSPrepaid commitment with postpaid overagesPrepaid subscription with postpaid overagesCRM:CPQ INTEGRATIONSDealHubHubSpotMicrosoft Dynamics 365PipedriveSalesforceInstallation and setup of Zenskar’s package for SalesforceUse default FlowCreate your own FlowERP INTEGRATIONSNetSuiteQuickBooksSageSAPXeroZoho BooksPAYMENT-GATEWAY INTEGRATIONSAdyenRazorpayStripeTAX-AUTOMATION INTEGRATIONSAnrokAvalara AvaTaxStripe TaxZENSKAR DATA-SOURCE CONNECTORSAuth0AWS AthenaBigQueryClickHouseCockroachDBDatabricks LakehouseGoogle SheetsLookerMetabaseMongoDBMySQLPostgreSQLQuickBooksRedshiftShopifySnowflakeSet up Snowflake for integration with ZenskarConfigure Zenskar's Snowflake connectorCoinAPIZenskar IPsSECURITYTwo-factor authenticationSingle sign-on authenticationSAML authenticationHOW-TO GUIDESHow to edit an invoiceHow to edit historical dataHow to manage API keysPowered by Zoho Books🐕‍🦺 Setup guide\nThis guide will help you connect your Zoho Books account with your Zenskar account.\n🚧PrerequisitesYou must have a properly configured Zoho Books account.\nIntegrate Zoho Books with Zenskar\n\nLog into your Zenskar account.\nGo to Settings > Connectors > Zoho and click on the Connect button.\nComplete the authentication using your company’s Zoho account credentials.\nAfter a successful authentication, you will be redirected to the following page:\n\nEnable the modules you want to sync with Zoho.\n\nInvoices: No additional configuration is required for syncing invoices.\nPayments: No additional configuration is required for syncing payments.\nCustomers: No additional configuration is required for syncing customers.\n\n📖Tax calculationsTaxes are not synced from Zenskar to Zoho. Taxes will be applied by Zoho depending on how your configuration.Updated 17 days ago XeroAdyenTable of Contents\n🐕‍🦺 Setup guide\n\nIntegrate Zoho Books with Zenskar\n\n"
  }
]